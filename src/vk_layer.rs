#![allow(warnings)]
/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const VULKAN_CORE_H_: u32 = 1;
pub const VK_VERSION_1_0: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 36;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const VK_USE_64_BIT_PTR_DEFINES: u32 = 1;
pub const VK_HEADER_VERSION: u32 = 248;
pub const VK_ATTACHMENT_UNUSED: i32 = -1;
pub const VK_FALSE: u32 = 0;
pub const VK_LOD_CLAMP_NONE: f64 = 1000.0;
pub const VK_QUEUE_FAMILY_IGNORED: i32 = -1;
pub const VK_REMAINING_ARRAY_LAYERS: i32 = -1;
pub const VK_REMAINING_MIP_LEVELS: i32 = -1;
pub const VK_SUBPASS_EXTERNAL: i32 = -1;
pub const VK_TRUE: u32 = 1;
pub const VK_WHOLE_SIZE: i32 = -1;
pub const VK_MAX_MEMORY_TYPES: u32 = 32;
pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: u32 = 256;
pub const VK_UUID_SIZE: u32 = 16;
pub const VK_MAX_EXTENSION_NAME_SIZE: u32 = 256;
pub const VK_MAX_DESCRIPTION_SIZE: u32 = 256;
pub const VK_MAX_MEMORY_HEAPS: u32 = 16;
pub const VK_VERSION_1_1: u32 = 1;
pub const VK_MAX_DEVICE_GROUP_SIZE: u32 = 32;
pub const VK_LUID_SIZE: u32 = 8;
pub const VK_QUEUE_FAMILY_EXTERNAL: i32 = -2;
pub const VK_VERSION_1_2: u32 = 1;
pub const VK_MAX_DRIVER_NAME_SIZE: u32 = 256;
pub const VK_MAX_DRIVER_INFO_SIZE: u32 = 256;
pub const VK_VERSION_1_3: u32 = 1;
pub const VK_KHR_surface: u32 = 1;
pub const VK_KHR_SURFACE_SPEC_VERSION: u32 = 25;
pub const VK_KHR_SURFACE_EXTENSION_NAME: &[u8; 15usize] = b"VK_KHR_surface\0";
pub const VK_KHR_swapchain: u32 = 1;
pub const VK_KHR_SWAPCHAIN_SPEC_VERSION: u32 = 70;
pub const VK_KHR_SWAPCHAIN_EXTENSION_NAME: &[u8; 17usize] = b"VK_KHR_swapchain\0";
pub const VK_KHR_display: u32 = 1;
pub const VK_KHR_DISPLAY_SPEC_VERSION: u32 = 23;
pub const VK_KHR_DISPLAY_EXTENSION_NAME: &[u8; 15usize] = b"VK_KHR_display\0";
pub const VK_KHR_display_swapchain: u32 = 1;
pub const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION: u32 = 10;
pub const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME: &[u8; 25usize] = b"VK_KHR_display_swapchain\0";
pub const VK_KHR_sampler_mirror_clamp_to_edge: u32 = 1;
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION: u32 = 3;
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME: &[u8; 36usize] =
    b"VK_KHR_sampler_mirror_clamp_to_edge\0";
pub const VK_KHR_video_queue: u32 = 1;
pub const VK_KHR_VIDEO_QUEUE_SPEC_VERSION: u32 = 8;
pub const VK_KHR_VIDEO_QUEUE_EXTENSION_NAME: &[u8; 19usize] = b"VK_KHR_video_queue\0";
pub const VK_KHR_video_decode_queue: u32 = 1;
pub const VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION: u32 = 7;
pub const VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME: &[u8; 26usize] = b"VK_KHR_video_decode_queue\0";
pub const VK_KHR_video_decode_h264: u32 = 1;
pub const VULKAN_VIDEO_CODEC_H264STD_H_: u32 = 1;
pub const vulkan_video_codec_h264std: u32 = 1;
pub const STD_VIDEO_H264_CPB_CNT_LIST_SIZE: u32 = 32;
pub const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS: u32 = 6;
pub const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS: u32 = 16;
pub const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS: u32 = 6;
pub const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS: u32 = 64;
pub const STD_VIDEO_H264_MAX_NUM_LIST_REF: u32 = 32;
pub const STD_VIDEO_H264_MAX_CHROMA_PLANES: u32 = 2;
pub const VULKAN_VIDEO_CODEC_H264STD_DECODE_H_: u32 = 1;
pub const vulkan_video_codec_h264std_decode: u32 = 1;
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE: u32 = 2;
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME: &[u8; 38usize] =
    b"VK_STD_vulkan_video_codec_h264_decode\0";
pub const VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION: u32 = 8;
pub const VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME: &[u8; 25usize] = b"VK_KHR_video_decode_h264\0";
pub const VK_KHR_dynamic_rendering: u32 = 1;
pub const VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME: &[u8; 25usize] = b"VK_KHR_dynamic_rendering\0";
pub const VK_KHR_multiview: u32 = 1;
pub const VK_KHR_MULTIVIEW_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MULTIVIEW_EXTENSION_NAME: &[u8; 17usize] = b"VK_KHR_multiview\0";
pub const VK_KHR_get_physical_device_properties2: u32 = 1;
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION: u32 = 2;
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME: &[u8; 39usize] =
    b"VK_KHR_get_physical_device_properties2\0";
pub const VK_KHR_device_group: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_SPEC_VERSION: u32 = 4;
pub const VK_KHR_DEVICE_GROUP_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_device_group\0";
pub const VK_KHR_shader_draw_parameters: u32 = 1;
pub const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_KHR_shader_draw_parameters\0";
pub const VK_KHR_maintenance1: u32 = 1;
pub const VK_KHR_MAINTENANCE_1_SPEC_VERSION: u32 = 2;
pub const VK_KHR_MAINTENANCE_1_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_maintenance1\0";
pub const VK_KHR_MAINTENANCE1_SPEC_VERSION: u32 = 2;
pub const VK_KHR_MAINTENANCE1_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_maintenance1\0";
pub const VK_KHR_device_group_creation: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_KHR_device_group_creation\0";
pub const VK_MAX_DEVICE_GROUP_SIZE_KHR: u32 = 32;
pub const VK_KHR_external_memory_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &[u8; 36usize] =
    b"VK_KHR_external_memory_capabilities\0";
pub const VK_LUID_SIZE_KHR: u32 = 8;
pub const VK_KHR_external_memory: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME: &[u8; 23usize] = b"VK_KHR_external_memory\0";
pub const VK_QUEUE_FAMILY_EXTERNAL_KHR: i32 = -2;
pub const VK_KHR_external_memory_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME: &[u8; 26usize] = b"VK_KHR_external_memory_fd\0";
pub const VK_KHR_external_semaphore_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME: &[u8; 39usize] =
    b"VK_KHR_external_semaphore_capabilities\0";
pub const VK_KHR_external_semaphore: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME: &[u8; 26usize] = b"VK_KHR_external_semaphore\0";
pub const VK_KHR_external_semaphore_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_KHR_external_semaphore_fd\0";
pub const VK_KHR_push_descriptor: u32 = 1;
pub const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION: u32 = 2;
pub const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME: &[u8; 23usize] = b"VK_KHR_push_descriptor\0";
pub const VK_KHR_shader_float16_int8: u32 = 1;
pub const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_KHR_shader_float16_int8\0";
pub const VK_KHR_16bit_storage: u32 = 1;
pub const VK_KHR_16BIT_STORAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_16BIT_STORAGE_EXTENSION_NAME: &[u8; 21usize] = b"VK_KHR_16bit_storage\0";
pub const VK_KHR_incremental_present: u32 = 1;
pub const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION: u32 = 2;
pub const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_KHR_incremental_present\0";
pub const VK_KHR_descriptor_update_template: u32 = 1;
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME: &[u8; 34usize] =
    b"VK_KHR_descriptor_update_template\0";
pub const VK_KHR_imageless_framebuffer: u32 = 1;
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION: u32 = 1;
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_KHR_imageless_framebuffer\0";
pub const VK_KHR_create_renderpass2: u32 = 1;
pub const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME: &[u8; 26usize] =
    b"VK_KHR_create_renderpass2\0";
pub const VK_KHR_shared_presentable_image: u32 = 1;
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_KHR_shared_presentable_image\0";
pub const VK_KHR_external_fence_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME: &[u8; 35usize] =
    b"VK_KHR_external_fence_capabilities\0";
pub const VK_KHR_external_fence: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME: &[u8; 22usize] = b"VK_KHR_external_fence\0";
pub const VK_KHR_external_fence_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME: &[u8; 25usize] = b"VK_KHR_external_fence_fd\0";
pub const VK_KHR_performance_query: u32 = 1;
pub const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME: &[u8; 25usize] = b"VK_KHR_performance_query\0";
pub const VK_KHR_maintenance2: u32 = 1;
pub const VK_KHR_MAINTENANCE_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_2_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_maintenance2\0";
pub const VK_KHR_MAINTENANCE2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE2_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_maintenance2\0";
pub const VK_KHR_get_surface_capabilities2: u32 = 1;
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_KHR_get_surface_capabilities2\0";
pub const VK_KHR_variable_pointers: u32 = 1;
pub const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME: &[u8; 25usize] = b"VK_KHR_variable_pointers\0";
pub const VK_KHR_get_display_properties2: u32 = 1;
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME: &[u8; 31usize] =
    b"VK_KHR_get_display_properties2\0";
pub const VK_KHR_dedicated_allocation: u32 = 1;
pub const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION: u32 = 3;
pub const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_KHR_dedicated_allocation\0";
pub const VK_KHR_storage_buffer_storage_class: u32 = 1;
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME: &[u8; 36usize] =
    b"VK_KHR_storage_buffer_storage_class\0";
pub const VK_KHR_relaxed_block_layout: u32 = 1;
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_KHR_relaxed_block_layout\0";
pub const VK_KHR_get_memory_requirements2: u32 = 1;
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_KHR_get_memory_requirements2\0";
pub const VK_KHR_image_format_list: u32 = 1;
pub const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION: u32 = 1;
pub const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME: &[u8; 25usize] = b"VK_KHR_image_format_list\0";
pub const VK_KHR_sampler_ycbcr_conversion: u32 = 1;
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION: u32 = 14;
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_KHR_sampler_ycbcr_conversion\0";
pub const VK_KHR_bind_memory2: u32 = 1;
pub const VK_KHR_BIND_MEMORY_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_bind_memory2\0";
pub const VK_KHR_maintenance3: u32 = 1;
pub const VK_KHR_MAINTENANCE_3_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_3_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_maintenance3\0";
pub const VK_KHR_MAINTENANCE3_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE3_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_maintenance3\0";
pub const VK_KHR_draw_indirect_count: u32 = 1;
pub const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_KHR_draw_indirect_count\0";
pub const VK_KHR_shader_subgroup_extended_types: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME: &[u8; 38usize] =
    b"VK_KHR_shader_subgroup_extended_types\0";
pub const VK_KHR_8bit_storage: u32 = 1;
pub const VK_KHR_8BIT_STORAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_8BIT_STORAGE_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_8bit_storage\0";
pub const VK_KHR_shader_atomic_int64: u32 = 1;
pub const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_KHR_shader_atomic_int64\0";
pub const VK_KHR_shader_clock: u32 = 1;
pub const VK_KHR_SHADER_CLOCK_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_CLOCK_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_shader_clock\0";
pub const VK_KHR_video_decode_h265: u32 = 1;
pub const VULKAN_VIDEO_CODEC_H265STD_H_: u32 = 1;
pub const vulkan_video_codec_h265std: u32 = 1;
pub const STD_VIDEO_H265_SUBLAYERS_LIST_SIZE: u32 = 7;
pub const STD_VIDEO_H265_CPB_CNT_LIST_SIZE: u32 = 32;
pub const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS: u32 = 6;
pub const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS: u32 = 16;
pub const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS: u32 = 6;
pub const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS: u32 = 64;
pub const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS: u32 = 6;
pub const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS: u32 = 64;
pub const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS: u32 = 2;
pub const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS: u32 = 64;
pub const STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE: u32 = 3;
pub const STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE: u32 = 128;
pub const STD_VIDEO_H265_MAX_DPB_SIZE: u32 = 16;
pub const STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS: u32 = 32;
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE: u32 = 6;
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE: u32 = 19;
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE: u32 = 21;
pub const STD_VIDEO_H265_MAX_NUM_LIST_REF: u32 = 15;
pub const STD_VIDEO_H265_MAX_CHROMA_PLANES: u32 = 2;
pub const STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS: u32 = 64;
pub const STD_VIDEO_H265_MAX_LONG_TERM_PICS: u32 = 16;
pub const STD_VIDEO_H265_MAX_DELTA_POC: u32 = 48;
pub const VULKAN_VIDEO_CODEC_H265STD_DECODE_H_: u32 = 1;
pub const vulkan_video_codec_h265std_decode: u32 = 1;
pub const STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE: u32 = 8;
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME: &[u8; 38usize] =
    b"VK_STD_vulkan_video_codec_h265_decode\0";
pub const VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION: u32 = 7;
pub const VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME: &[u8; 25usize] = b"VK_KHR_video_decode_h265\0";
pub const VK_KHR_global_priority: u32 = 1;
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_KHR: u32 = 16;
pub const VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME: &[u8; 23usize] = b"VK_KHR_global_priority\0";
pub const VK_KHR_driver_properties: u32 = 1;
pub const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME: &[u8; 25usize] = b"VK_KHR_driver_properties\0";
pub const VK_MAX_DRIVER_NAME_SIZE_KHR: u32 = 256;
pub const VK_MAX_DRIVER_INFO_SIZE_KHR: u32 = 256;
pub const VK_KHR_shader_float_controls: u32 = 1;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION: u32 = 4;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_KHR_shader_float_controls\0";
pub const VK_KHR_depth_stencil_resolve: u32 = 1;
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_KHR_depth_stencil_resolve\0";
pub const VK_KHR_swapchain_mutable_format: u32 = 1;
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_KHR_swapchain_mutable_format\0";
pub const VK_KHR_timeline_semaphore: u32 = 1;
pub const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION: u32 = 2;
pub const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME: &[u8; 26usize] = b"VK_KHR_timeline_semaphore\0";
pub const VK_KHR_vulkan_memory_model: u32 = 1;
pub const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION: u32 = 3;
pub const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_KHR_vulkan_memory_model\0";
pub const VK_KHR_shader_terminate_invocation: u32 = 1;
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME: &[u8; 35usize] =
    b"VK_KHR_shader_terminate_invocation\0";
pub const VK_KHR_fragment_shading_rate: u32 = 1;
pub const VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION: u32 = 2;
pub const VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_KHR_fragment_shading_rate\0";
pub const VK_KHR_spirv_1_4: u32 = 1;
pub const VK_KHR_SPIRV_1_4_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SPIRV_1_4_EXTENSION_NAME: &[u8; 17usize] = b"VK_KHR_spirv_1_4\0";
pub const VK_KHR_surface_protected_capabilities: u32 = 1;
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME: &[u8; 38usize] =
    b"VK_KHR_surface_protected_capabilities\0";
pub const VK_KHR_separate_depth_stencil_layouts: u32 = 1;
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME: &[u8; 38usize] =
    b"VK_KHR_separate_depth_stencil_layouts\0";
pub const VK_KHR_present_wait: u32 = 1;
pub const VK_KHR_PRESENT_WAIT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PRESENT_WAIT_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_present_wait\0";
pub const VK_KHR_uniform_buffer_standard_layout: u32 = 1;
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME: &[u8; 38usize] =
    b"VK_KHR_uniform_buffer_standard_layout\0";
pub const VK_KHR_buffer_device_address: u32 = 1;
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_KHR_buffer_device_address\0";
pub const VK_KHR_deferred_host_operations: u32 = 1;
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION: u32 = 4;
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_KHR_deferred_host_operations\0";
pub const VK_KHR_pipeline_executable_properties: u32 = 1;
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME: &[u8; 38usize] =
    b"VK_KHR_pipeline_executable_properties\0";
pub const VK_KHR_map_memory2: u32 = 1;
pub const VK_KHR_MAP_MEMORY_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAP_MEMORY_2_EXTENSION_NAME: &[u8; 19usize] = b"VK_KHR_map_memory2\0";
pub const VK_KHR_shader_integer_dot_product: u32 = 1;
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME: &[u8; 34usize] =
    b"VK_KHR_shader_integer_dot_product\0";
pub const VK_KHR_pipeline_library: u32 = 1;
pub const VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME: &[u8; 24usize] = b"VK_KHR_pipeline_library\0";
pub const VK_KHR_shader_non_semantic_info: u32 = 1;
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_KHR_shader_non_semantic_info\0";
pub const VK_KHR_present_id: u32 = 1;
pub const VK_KHR_PRESENT_ID_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PRESENT_ID_EXTENSION_NAME: &[u8; 18usize] = b"VK_KHR_present_id\0";
pub const VK_KHR_synchronization2: u32 = 1;
pub const VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME: &[u8; 24usize] = b"VK_KHR_synchronization2\0";
pub const VK_KHR_fragment_shader_barycentric: u32 = 1;
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: u32 = 1;
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: &[u8; 35usize] =
    b"VK_KHR_fragment_shader_barycentric\0";
pub const VK_KHR_shader_subgroup_uniform_control_flow: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME: &[u8; 44usize] =
    b"VK_KHR_shader_subgroup_uniform_control_flow\0";
pub const VK_KHR_zero_initialize_workgroup_memory: u32 = 1;
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME: &[u8; 40usize] =
    b"VK_KHR_zero_initialize_workgroup_memory\0";
pub const VK_KHR_workgroup_memory_explicit_layout: u32 = 1;
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME: &[u8; 40usize] =
    b"VK_KHR_workgroup_memory_explicit_layout\0";
pub const VK_KHR_copy_commands2: u32 = 1;
pub const VK_KHR_COPY_COMMANDS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME: &[u8; 22usize] = b"VK_KHR_copy_commands2\0";
pub const VK_KHR_format_feature_flags2: u32 = 1;
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION: u32 = 2;
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_KHR_format_feature_flags2\0";
pub const VK_KHR_ray_tracing_maintenance1: u32 = 1;
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_KHR_ray_tracing_maintenance1\0";
pub const VK_KHR_portability_enumeration: u32 = 1;
pub const VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME: &[u8; 31usize] =
    b"VK_KHR_portability_enumeration\0";
pub const VK_KHR_maintenance4: u32 = 1;
pub const VK_KHR_MAINTENANCE_4_SPEC_VERSION: u32 = 2;
pub const VK_KHR_MAINTENANCE_4_EXTENSION_NAME: &[u8; 20usize] = b"VK_KHR_maintenance4\0";
pub const VK_EXT_debug_report: u32 = 1;
pub const VK_EXT_DEBUG_REPORT_SPEC_VERSION: u32 = 10;
pub const VK_EXT_DEBUG_REPORT_EXTENSION_NAME: &[u8; 20usize] = b"VK_EXT_debug_report\0";
pub const VK_NV_glsl_shader: u32 = 1;
pub const VK_NV_GLSL_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_NV_GLSL_SHADER_EXTENSION_NAME: &[u8; 18usize] = b"VK_NV_glsl_shader\0";
pub const VK_EXT_depth_range_unrestricted: u32 = 1;
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_EXT_depth_range_unrestricted\0";
pub const VK_IMG_filter_cubic: u32 = 1;
pub const VK_IMG_FILTER_CUBIC_SPEC_VERSION: u32 = 1;
pub const VK_IMG_FILTER_CUBIC_EXTENSION_NAME: &[u8; 20usize] = b"VK_IMG_filter_cubic\0";
pub const VK_AMD_rasterization_order: u32 = 1;
pub const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_AMD_rasterization_order\0";
pub const VK_AMD_shader_trinary_minmax: u32 = 1;
pub const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_AMD_shader_trinary_minmax\0";
pub const VK_AMD_shader_explicit_vertex_parameter: u32 = 1;
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME: &[u8; 40usize] =
    b"VK_AMD_shader_explicit_vertex_parameter\0";
pub const VK_EXT_debug_marker: u32 = 1;
pub const VK_EXT_DEBUG_MARKER_SPEC_VERSION: u32 = 4;
pub const VK_EXT_DEBUG_MARKER_EXTENSION_NAME: &[u8; 20usize] = b"VK_EXT_debug_marker\0";
pub const VK_AMD_gcn_shader: u32 = 1;
pub const VK_AMD_GCN_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_GCN_SHADER_EXTENSION_NAME: &[u8; 18usize] = b"VK_AMD_gcn_shader\0";
pub const VK_NV_dedicated_allocation: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_NV_dedicated_allocation\0";
pub const VK_EXT_transform_feedback: u32 = 1;
pub const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME: &[u8; 26usize] = b"VK_EXT_transform_feedback\0";
pub const VK_NVX_binary_import: u32 = 1;
pub const VK_NVX_BINARY_IMPORT_SPEC_VERSION: u32 = 1;
pub const VK_NVX_BINARY_IMPORT_EXTENSION_NAME: &[u8; 21usize] = b"VK_NVX_binary_import\0";
pub const VK_NVX_image_view_handle: u32 = 1;
pub const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION: u32 = 2;
pub const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME: &[u8; 25usize] = b"VK_NVX_image_view_handle\0";
pub const VK_AMD_draw_indirect_count: u32 = 1;
pub const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION: u32 = 2;
pub const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_AMD_draw_indirect_count\0";
pub const VK_AMD_negative_viewport_height: u32 = 1;
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION: u32 = 1;
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_AMD_negative_viewport_height\0";
pub const VK_AMD_gpu_shader_half_float: u32 = 1;
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION: u32 = 2;
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_AMD_gpu_shader_half_float\0";
pub const VK_AMD_shader_ballot: u32 = 1;
pub const VK_AMD_SHADER_BALLOT_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_BALLOT_EXTENSION_NAME: &[u8; 21usize] = b"VK_AMD_shader_ballot\0";
pub const VK_AMD_texture_gather_bias_lod: u32 = 1;
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION: u32 = 1;
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME: &[u8; 31usize] =
    b"VK_AMD_texture_gather_bias_lod\0";
pub const VK_AMD_shader_info: u32 = 1;
pub const VK_AMD_SHADER_INFO_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_INFO_EXTENSION_NAME: &[u8; 19usize] = b"VK_AMD_shader_info\0";
pub const VK_AMD_shader_image_load_store_lod: u32 = 1;
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME: &[u8; 35usize] =
    b"VK_AMD_shader_image_load_store_lod\0";
pub const VK_NV_corner_sampled_image: u32 = 1;
pub const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION: u32 = 2;
pub const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_NV_corner_sampled_image\0";
pub const VK_IMG_format_pvrtc: u32 = 1;
pub const VK_IMG_FORMAT_PVRTC_SPEC_VERSION: u32 = 1;
pub const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME: &[u8; 20usize] = b"VK_IMG_format_pvrtc\0";
pub const VK_NV_external_memory_capabilities: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &[u8; 35usize] =
    b"VK_NV_external_memory_capabilities\0";
pub const VK_NV_external_memory: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME: &[u8; 22usize] = b"VK_NV_external_memory\0";
pub const VK_EXT_validation_flags: u32 = 1;
pub const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_validation_flags\0";
pub const VK_EXT_shader_subgroup_ballot: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_EXT_shader_subgroup_ballot\0";
pub const VK_EXT_shader_subgroup_vote: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_shader_subgroup_vote\0";
pub const VK_EXT_texture_compression_astc_hdr: u32 = 1;
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME: &[u8; 36usize] =
    b"VK_EXT_texture_compression_astc_hdr\0";
pub const VK_EXT_astc_decode_mode: u32 = 1;
pub const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_astc_decode_mode\0";
pub const VK_EXT_pipeline_robustness: u32 = 1;
pub const VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_pipeline_robustness\0";
pub const VK_EXT_conditional_rendering: u32 = 1;
pub const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION: u32 = 2;
pub const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_EXT_conditional_rendering\0";
pub const VK_NV_clip_space_w_scaling: u32 = 1;
pub const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION: u32 = 1;
pub const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_NV_clip_space_w_scaling\0";
pub const VK_EXT_direct_mode_display: u32 = 1;
pub const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_direct_mode_display\0";
pub const VK_EXT_display_surface_counter: u32 = 1;
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME: &[u8; 31usize] =
    b"VK_EXT_display_surface_counter\0";
pub const VK_EXT_display_control: u32 = 1;
pub const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME: &[u8; 23usize] = b"VK_EXT_display_control\0";
pub const VK_GOOGLE_display_timing: u32 = 1;
pub const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME: &[u8; 25usize] = b"VK_GOOGLE_display_timing\0";
pub const VK_NV_sample_mask_override_coverage: u32 = 1;
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION: u32 = 1;
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME: &[u8; 36usize] =
    b"VK_NV_sample_mask_override_coverage\0";
pub const VK_NV_geometry_shader_passthrough: u32 = 1;
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION: u32 = 1;
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME: &[u8; 34usize] =
    b"VK_NV_geometry_shader_passthrough\0";
pub const VK_NV_viewport_array2: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME: &[u8; 22usize] = b"VK_NV_viewport_array2\0";
pub const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME: &[u8; 22usize] = b"VK_NV_viewport_array2\0";
pub const VK_NVX_multiview_per_view_attributes: u32 = 1;
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION: u32 = 1;
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME: &[u8; 37usize] =
    b"VK_NVX_multiview_per_view_attributes\0";
pub const VK_NV_viewport_swizzle: u32 = 1;
pub const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME: &[u8; 23usize] = b"VK_NV_viewport_swizzle\0";
pub const VK_EXT_discard_rectangles: u32 = 1;
pub const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME: &[u8; 26usize] = b"VK_EXT_discard_rectangles\0";
pub const VK_EXT_conservative_rasterization: u32 = 1;
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME: &[u8; 34usize] =
    b"VK_EXT_conservative_rasterization\0";
pub const VK_EXT_depth_clip_enable: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME: &[u8; 25usize] = b"VK_EXT_depth_clip_enable\0";
pub const VK_EXT_swapchain_colorspace: u32 = 1;
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION: u32 = 4;
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_swapchain_colorspace\0";
pub const VK_EXT_hdr_metadata: u32 = 1;
pub const VK_EXT_HDR_METADATA_SPEC_VERSION: u32 = 2;
pub const VK_EXT_HDR_METADATA_EXTENSION_NAME: &[u8; 20usize] = b"VK_EXT_hdr_metadata\0";
pub const VK_EXT_external_memory_dma_buf: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME: &[u8; 31usize] =
    b"VK_EXT_external_memory_dma_buf\0";
pub const VK_EXT_queue_family_foreign: u32 = 1;
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION: u32 = 1;
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_queue_family_foreign\0";
pub const VK_QUEUE_FAMILY_FOREIGN_EXT: i32 = -3;
pub const VK_EXT_debug_utils: u32 = 1;
pub const VK_EXT_DEBUG_UTILS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DEBUG_UTILS_EXTENSION_NAME: &[u8; 19usize] = b"VK_EXT_debug_utils\0";
pub const VK_EXT_sampler_filter_minmax: u32 = 1;
pub const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_EXT_sampler_filter_minmax\0";
pub const VK_AMD_gpu_shader_int16: u32 = 1;
pub const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION: u32 = 2;
pub const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME: &[u8; 24usize] = b"VK_AMD_gpu_shader_int16\0";
pub const VK_AMD_mixed_attachment_samples: u32 = 1;
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION: u32 = 1;
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_AMD_mixed_attachment_samples\0";
pub const VK_AMD_shader_fragment_mask: u32 = 1;
pub const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_AMD_shader_fragment_mask\0";
pub const VK_EXT_inline_uniform_block: u32 = 1;
pub const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_inline_uniform_block\0";
pub const VK_EXT_shader_stencil_export: u32 = 1;
pub const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_EXT_shader_stencil_export\0";
pub const VK_EXT_sample_locations: u32 = 1;
pub const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_sample_locations\0";
pub const VK_EXT_blend_operation_advanced: u32 = 1;
pub const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION: u32 = 2;
pub const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_EXT_blend_operation_advanced\0";
pub const VK_NV_fragment_coverage_to_color: u32 = 1;
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_NV_fragment_coverage_to_color\0";
pub const VK_NV_framebuffer_mixed_samples: u32 = 1;
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_NV_framebuffer_mixed_samples\0";
pub const VK_NV_fill_rectangle: u32 = 1;
pub const VK_NV_FILL_RECTANGLE_SPEC_VERSION: u32 = 1;
pub const VK_NV_FILL_RECTANGLE_EXTENSION_NAME: &[u8; 21usize] = b"VK_NV_fill_rectangle\0";
pub const VK_NV_shader_sm_builtins: u32 = 1;
pub const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION: u32 = 1;
pub const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME: &[u8; 25usize] = b"VK_NV_shader_sm_builtins\0";
pub const VK_EXT_post_depth_coverage: u32 = 1;
pub const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_post_depth_coverage\0";
pub const VK_EXT_image_drm_format_modifier: u32 = 1;
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION: u32 = 2;
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_EXT_image_drm_format_modifier\0";
pub const VK_EXT_validation_cache: u32 = 1;
pub const VK_EXT_VALIDATION_CACHE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_validation_cache\0";
pub const VK_EXT_descriptor_indexing: u32 = 1;
pub const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_descriptor_indexing\0";
pub const VK_EXT_shader_viewport_index_layer: u32 = 1;
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME: &[u8; 35usize] =
    b"VK_EXT_shader_viewport_index_layer\0";
pub const VK_NV_shading_rate_image: u32 = 1;
pub const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION: u32 = 3;
pub const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME: &[u8; 25usize] = b"VK_NV_shading_rate_image\0";
pub const VK_NV_ray_tracing: u32 = 1;
pub const VK_NV_RAY_TRACING_SPEC_VERSION: u32 = 3;
pub const VK_NV_RAY_TRACING_EXTENSION_NAME: &[u8; 18usize] = b"VK_NV_ray_tracing\0";
pub const VK_SHADER_UNUSED_KHR: i32 = -1;
pub const VK_SHADER_UNUSED_NV: i32 = -1;
pub const VK_NV_representative_fragment_test: u32 = 1;
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION: u32 = 2;
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME: &[u8; 35usize] =
    b"VK_NV_representative_fragment_test\0";
pub const VK_EXT_filter_cubic: u32 = 1;
pub const VK_EXT_FILTER_CUBIC_SPEC_VERSION: u32 = 3;
pub const VK_EXT_FILTER_CUBIC_EXTENSION_NAME: &[u8; 20usize] = b"VK_EXT_filter_cubic\0";
pub const VK_QCOM_render_pass_shader_resolve: u32 = 1;
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION: u32 = 4;
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME: &[u8; 35usize] =
    b"VK_QCOM_render_pass_shader_resolve\0";
pub const VK_EXT_global_priority: u32 = 1;
pub const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION: u32 = 2;
pub const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME: &[u8; 23usize] = b"VK_EXT_global_priority\0";
pub const VK_EXT_external_memory_host: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_external_memory_host\0";
pub const VK_AMD_buffer_marker: u32 = 1;
pub const VK_AMD_BUFFER_MARKER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_BUFFER_MARKER_EXTENSION_NAME: &[u8; 21usize] = b"VK_AMD_buffer_marker\0";
pub const VK_AMD_pipeline_compiler_control: u32 = 1;
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_AMD_pipeline_compiler_control\0";
pub const VK_EXT_calibrated_timestamps: u32 = 1;
pub const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_EXT_calibrated_timestamps\0";
pub const VK_AMD_shader_core_properties: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION: u32 = 2;
pub const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_AMD_shader_core_properties\0";
pub const VK_AMD_memory_overallocation_behavior: u32 = 1;
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION: u32 = 1;
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME: &[u8; 38usize] =
    b"VK_AMD_memory_overallocation_behavior\0";
pub const VK_EXT_vertex_attribute_divisor: u32 = 1;
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: u32 = 3;
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_EXT_vertex_attribute_divisor\0";
pub const VK_EXT_pipeline_creation_feedback: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME: &[u8; 34usize] =
    b"VK_EXT_pipeline_creation_feedback\0";
pub const VK_NV_shader_subgroup_partitioned: u32 = 1;
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION: u32 = 1;
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME: &[u8; 34usize] =
    b"VK_NV_shader_subgroup_partitioned\0";
pub const VK_NV_compute_shader_derivatives: u32 = 1;
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: u32 = 1;
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_NV_compute_shader_derivatives\0";
pub const VK_NV_mesh_shader: u32 = 1;
pub const VK_NV_MESH_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_NV_MESH_SHADER_EXTENSION_NAME: &[u8; 18usize] = b"VK_NV_mesh_shader\0";
pub const VK_NV_fragment_shader_barycentric: u32 = 1;
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: &[u8; 34usize] =
    b"VK_NV_fragment_shader_barycentric\0";
pub const VK_NV_shader_image_footprint: u32 = 1;
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION: u32 = 2;
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_NV_shader_image_footprint\0";
pub const VK_NV_scissor_exclusive: u32 = 1;
pub const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION: u32 = 2;
pub const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME: &[u8; 24usize] = b"VK_NV_scissor_exclusive\0";
pub const VK_NV_device_diagnostic_checkpoints: u32 = 1;
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION: u32 = 2;
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME: &[u8; 36usize] =
    b"VK_NV_device_diagnostic_checkpoints\0";
pub const VK_INTEL_shader_integer_functions2: u32 = 1;
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION: u32 = 1;
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME: &[u8; 35usize] =
    b"VK_INTEL_shader_integer_functions2\0";
pub const VK_INTEL_performance_query: u32 = 1;
pub const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION: u32 = 2;
pub const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_INTEL_performance_query\0";
pub const VK_EXT_pci_bus_info: u32 = 1;
pub const VK_EXT_PCI_BUS_INFO_SPEC_VERSION: u32 = 2;
pub const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME: &[u8; 20usize] = b"VK_EXT_pci_bus_info\0";
pub const VK_AMD_display_native_hdr: u32 = 1;
pub const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION: u32 = 1;
pub const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME: &[u8; 26usize] = b"VK_AMD_display_native_hdr\0";
pub const VK_EXT_fragment_density_map: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION: u32 = 2;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_fragment_density_map\0";
pub const VK_EXT_scalar_block_layout: u32 = 1;
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_scalar_block_layout\0";
pub const VK_GOOGLE_hlsl_functionality1: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_GOOGLE_hlsl_functionality1\0";
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_GOOGLE_hlsl_functionality1\0";
pub const VK_GOOGLE_decorate_string: u32 = 1;
pub const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME: &[u8; 26usize] = b"VK_GOOGLE_decorate_string\0";
pub const VK_EXT_subgroup_size_control: u32 = 1;
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_EXT_subgroup_size_control\0";
pub const VK_AMD_shader_core_properties2: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME: &[u8; 31usize] =
    b"VK_AMD_shader_core_properties2\0";
pub const VK_AMD_device_coherent_memory: u32 = 1;
pub const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_AMD_device_coherent_memory\0";
pub const VK_EXT_shader_image_atomic_int64: u32 = 1;
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_EXT_shader_image_atomic_int64\0";
pub const VK_EXT_memory_budget: u32 = 1;
pub const VK_EXT_MEMORY_BUDGET_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME: &[u8; 21usize] = b"VK_EXT_memory_budget\0";
pub const VK_EXT_memory_priority: u32 = 1;
pub const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME: &[u8; 23usize] = b"VK_EXT_memory_priority\0";
pub const VK_NV_dedicated_allocation_image_aliasing: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME: &[u8; 42usize] =
    b"VK_NV_dedicated_allocation_image_aliasing\0";
pub const VK_EXT_buffer_device_address: u32 = 1;
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_EXT_buffer_device_address\0";
pub const VK_EXT_tooling_info: u32 = 1;
pub const VK_EXT_TOOLING_INFO_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TOOLING_INFO_EXTENSION_NAME: &[u8; 20usize] = b"VK_EXT_tooling_info\0";
pub const VK_EXT_separate_stencil_usage: u32 = 1;
pub const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_EXT_separate_stencil_usage\0";
pub const VK_EXT_validation_features: u32 = 1;
pub const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION: u32 = 5;
pub const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_validation_features\0";
pub const VK_NV_cooperative_matrix: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME: &[u8; 25usize] = b"VK_NV_cooperative_matrix\0";
pub const VK_NV_coverage_reduction_mode: u32 = 1;
pub const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION: u32 = 1;
pub const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_NV_coverage_reduction_mode\0";
pub const VK_EXT_fragment_shader_interlock: u32 = 1;
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_EXT_fragment_shader_interlock\0";
pub const VK_EXT_ycbcr_image_arrays: u32 = 1;
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME: &[u8; 26usize] = b"VK_EXT_ycbcr_image_arrays\0";
pub const VK_EXT_provoking_vertex: u32 = 1;
pub const VK_EXT_PROVOKING_VERTEX_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_provoking_vertex\0";
pub const VK_EXT_headless_surface: u32 = 1;
pub const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_headless_surface\0";
pub const VK_EXT_line_rasterization: u32 = 1;
pub const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME: &[u8; 26usize] = b"VK_EXT_line_rasterization\0";
pub const VK_EXT_shader_atomic_float: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_shader_atomic_float\0";
pub const VK_EXT_host_query_reset: u32 = 1;
pub const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION: u32 = 1;
pub const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_host_query_reset\0";
pub const VK_EXT_index_type_uint8: u32 = 1;
pub const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION: u32 = 1;
pub const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_index_type_uint8\0";
pub const VK_EXT_extended_dynamic_state: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_EXT_extended_dynamic_state\0";
pub const VK_EXT_shader_atomic_float2: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_shader_atomic_float2\0";
pub const VK_EXT_surface_maintenance1: u32 = 1;
pub const VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_surface_maintenance1\0";
pub const VK_EXT_swapchain_maintenance1: u32 = 1;
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_EXT_swapchain_maintenance1\0";
pub const VK_EXT_shader_demote_to_helper_invocation: u32 = 1;
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME: &[u8; 42usize] =
    b"VK_EXT_shader_demote_to_helper_invocation\0";
pub const VK_NV_device_generated_commands: u32 = 1;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: u32 = 3;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_NV_device_generated_commands\0";
pub const VK_NV_inherited_viewport_scissor: u32 = 1;
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION: u32 = 1;
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_NV_inherited_viewport_scissor\0";
pub const VK_EXT_texel_buffer_alignment: u32 = 1;
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_EXT_texel_buffer_alignment\0";
pub const VK_QCOM_render_pass_transform: u32 = 1;
pub const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION: u32 = 3;
pub const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_QCOM_render_pass_transform\0";
pub const VK_EXT_device_memory_report: u32 = 1;
pub const VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_device_memory_report\0";
pub const VK_EXT_acquire_drm_display: u32 = 1;
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_acquire_drm_display\0";
pub const VK_EXT_robustness2: u32 = 1;
pub const VK_EXT_ROBUSTNESS_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME: &[u8; 19usize] = b"VK_EXT_robustness2\0";
pub const VK_EXT_custom_border_color: u32 = 1;
pub const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION: u32 = 12;
pub const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_custom_border_color\0";
pub const VK_GOOGLE_user_type: u32 = 1;
pub const VK_GOOGLE_USER_TYPE_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_USER_TYPE_EXTENSION_NAME: &[u8; 20usize] = b"VK_GOOGLE_user_type\0";
pub const VK_NV_present_barrier: u32 = 1;
pub const VK_NV_PRESENT_BARRIER_SPEC_VERSION: u32 = 1;
pub const VK_NV_PRESENT_BARRIER_EXTENSION_NAME: &[u8; 22usize] = b"VK_NV_present_barrier\0";
pub const VK_EXT_private_data: u32 = 1;
pub const VK_EXT_PRIVATE_DATA_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRIVATE_DATA_EXTENSION_NAME: &[u8; 20usize] = b"VK_EXT_private_data\0";
pub const VK_EXT_pipeline_creation_cache_control: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION: u32 = 3;
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME: &[u8; 39usize] =
    b"VK_EXT_pipeline_creation_cache_control\0";
pub const VK_NV_device_diagnostics_config: u32 = 1;
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION: u32 = 2;
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_NV_device_diagnostics_config\0";
pub const VK_QCOM_render_pass_store_ops: u32 = 1;
pub const VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION: u32 = 2;
pub const VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_QCOM_render_pass_store_ops\0";
pub const VK_NV_low_latency: u32 = 1;
pub const VK_NV_LOW_LATENCY_SPEC_VERSION: u32 = 1;
pub const VK_NV_LOW_LATENCY_EXTENSION_NAME: &[u8; 18usize] = b"VK_NV_low_latency\0";
pub const VK_EXT_descriptor_buffer: u32 = 1;
pub const VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME: &[u8; 25usize] = b"VK_EXT_descriptor_buffer\0";
pub const VK_EXT_graphics_pipeline_library: u32 = 1;
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_EXT_graphics_pipeline_library\0";
pub const VK_AMD_shader_early_and_late_fragment_tests: u32 = 1;
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME: &[u8; 44usize] =
    b"VK_AMD_shader_early_and_late_fragment_tests\0";
pub const VK_NV_fragment_shading_rate_enums: u32 = 1;
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME: &[u8; 34usize] =
    b"VK_NV_fragment_shading_rate_enums\0";
pub const VK_NV_ray_tracing_motion_blur: u32 = 1;
pub const VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_NV_ray_tracing_motion_blur\0";
pub const VK_EXT_ycbcr_2plane_444_formats: u32 = 1;
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_EXT_ycbcr_2plane_444_formats\0";
pub const VK_EXT_fragment_density_map2: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_EXT_fragment_density_map2\0";
pub const VK_QCOM_rotated_copy_commands: u32 = 1;
pub const VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_QCOM_rotated_copy_commands\0";
pub const VK_EXT_image_robustness: u32 = 1;
pub const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_image_robustness\0";
pub const VK_EXT_image_compression_control: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_EXT_image_compression_control\0";
pub const VK_EXT_attachment_feedback_loop_layout: u32 = 1;
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION: u32 = 2;
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME: &[u8; 39usize] =
    b"VK_EXT_attachment_feedback_loop_layout\0";
pub const VK_EXT_4444_formats: u32 = 1;
pub const VK_EXT_4444_FORMATS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_4444_FORMATS_EXTENSION_NAME: &[u8; 20usize] = b"VK_EXT_4444_formats\0";
pub const VK_EXT_device_fault: u32 = 1;
pub const VK_EXT_DEVICE_FAULT_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DEVICE_FAULT_EXTENSION_NAME: &[u8; 20usize] = b"VK_EXT_device_fault\0";
pub const VK_ARM_rasterization_order_attachment_access: u32 = 1;
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION: u32 = 1;
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME: &[u8; 45usize] =
    b"VK_ARM_rasterization_order_attachment_access\0";
pub const VK_EXT_rgba10x6_formats: u32 = 1;
pub const VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_rgba10x6_formats\0";
pub const VK_VALVE_mutable_descriptor_type: u32 = 1;
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION: u32 = 1;
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_VALVE_mutable_descriptor_type\0";
pub const VK_EXT_vertex_input_dynamic_state: u32 = 1;
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION: u32 = 2;
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME: &[u8; 34usize] =
    b"VK_EXT_vertex_input_dynamic_state\0";
pub const VK_EXT_physical_device_drm: u32 = 1;
pub const VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_physical_device_drm\0";
pub const VK_EXT_device_address_binding_report: u32 = 1;
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME: &[u8; 37usize] =
    b"VK_EXT_device_address_binding_report\0";
pub const VK_EXT_depth_clip_control: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME: &[u8; 26usize] = b"VK_EXT_depth_clip_control\0";
pub const VK_EXT_primitive_topology_list_restart: u32 = 1;
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME: &[u8; 39usize] =
    b"VK_EXT_primitive_topology_list_restart\0";
pub const VK_HUAWEI_subpass_shading: u32 = 1;
pub const VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION: u32 = 2;
pub const VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME: &[u8; 26usize] = b"VK_HUAWEI_subpass_shading\0";
pub const VK_HUAWEI_invocation_mask: u32 = 1;
pub const VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION: u32 = 1;
pub const VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME: &[u8; 26usize] = b"VK_HUAWEI_invocation_mask\0";
pub const VK_NV_external_memory_rdma: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_NV_external_memory_rdma\0";
pub const VK_EXT_pipeline_properties: u32 = 1;
pub const VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_pipeline_properties\0";
pub const VK_EXT_multisampled_render_to_single_sampled: u32 = 1;
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME: &[u8; 45usize] =
    b"VK_EXT_multisampled_render_to_single_sampled\0";
pub const VK_EXT_extended_dynamic_state2: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME: &[u8; 31usize] =
    b"VK_EXT_extended_dynamic_state2\0";
pub const VK_EXT_color_write_enable: u32 = 1;
pub const VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME: &[u8; 26usize] = b"VK_EXT_color_write_enable\0";
pub const VK_EXT_primitives_generated_query: u32 = 1;
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME: &[u8; 34usize] =
    b"VK_EXT_primitives_generated_query\0";
pub const VK_EXT_global_priority_query: u32 = 1;
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_EXT_global_priority_query\0";
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_EXT: u32 = 16;
pub const VK_EXT_image_view_min_lod: u32 = 1;
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME: &[u8; 26usize] = b"VK_EXT_image_view_min_lod\0";
pub const VK_EXT_multi_draw: u32 = 1;
pub const VK_EXT_MULTI_DRAW_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MULTI_DRAW_EXTENSION_NAME: &[u8; 18usize] = b"VK_EXT_multi_draw\0";
pub const VK_EXT_image_2d_view_of_3d: u32 = 1;
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_EXT_image_2d_view_of_3d\0";
pub const VK_EXT_shader_tile_image: u32 = 1;
pub const VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME: &[u8; 25usize] = b"VK_EXT_shader_tile_image\0";
pub const VK_EXT_opacity_micromap: u32 = 1;
pub const VK_EXT_OPACITY_MICROMAP_SPEC_VERSION: u32 = 2;
pub const VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_opacity_micromap\0";
pub const VK_EXT_load_store_op_none: u32 = 1;
pub const VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME: &[u8; 26usize] = b"VK_EXT_load_store_op_none\0";
pub const VK_HUAWEI_cluster_culling_shader: u32 = 1;
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION: u32 = 2;
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_HUAWEI_cluster_culling_shader\0";
pub const VK_EXT_border_color_swizzle: u32 = 1;
pub const VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_border_color_swizzle\0";
pub const VK_EXT_pageable_device_local_memory: u32 = 1;
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME: &[u8; 36usize] =
    b"VK_EXT_pageable_device_local_memory\0";
pub const VK_ARM_shader_core_properties: u32 = 1;
pub const VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_ARM_shader_core_properties\0";
pub const VK_EXT_image_sliced_view_of_3d: u32 = 1;
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME: &[u8; 31usize] =
    b"VK_EXT_image_sliced_view_of_3d\0";
pub const VK_REMAINING_3D_SLICES_EXT: i32 = -1;
pub const VK_VALVE_descriptor_set_host_mapping: u32 = 1;
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION: u32 = 1;
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME: &[u8; 37usize] =
    b"VK_VALVE_descriptor_set_host_mapping\0";
pub const VK_EXT_depth_clamp_zero_one: u32 = 1;
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_EXT_depth_clamp_zero_one\0";
pub const VK_EXT_non_seamless_cube_map: u32 = 1;
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION: u32 = 1;
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME: &[u8; 29usize] =
    b"VK_EXT_non_seamless_cube_map\0";
pub const VK_QCOM_fragment_density_map_offset: u32 = 1;
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME: &[u8; 36usize] =
    b"VK_QCOM_fragment_density_map_offset\0";
pub const VK_NV_copy_memory_indirect: u32 = 1;
pub const VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION: u32 = 1;
pub const VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_NV_copy_memory_indirect\0";
pub const VK_NV_memory_decompression: u32 = 1;
pub const VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION: u32 = 1;
pub const VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME: &[u8; 27usize] =
    b"VK_NV_memory_decompression\0";
pub const VK_NV_linear_color_attachment: u32 = 1;
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION: u32 = 1;
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_NV_linear_color_attachment\0";
pub const VK_GOOGLE_surfaceless_query: u32 = 1;
pub const VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION: u32 = 2;
pub const VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_GOOGLE_surfaceless_query\0";
pub const VK_EXT_image_compression_control_swapchain: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME: &[u8; 43usize] =
    b"VK_EXT_image_compression_control_swapchain\0";
pub const VK_QCOM_image_processing: u32 = 1;
pub const VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME: &[u8; 25usize] = b"VK_QCOM_image_processing\0";
pub const VK_EXT_extended_dynamic_state3: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION: u32 = 2;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME: &[u8; 31usize] =
    b"VK_EXT_extended_dynamic_state3\0";
pub const VK_EXT_subpass_merge_feedback: u32 = 1;
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_EXT_subpass_merge_feedback\0";
pub const VK_LUNARG_direct_driver_loading: u32 = 1;
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION: u32 = 1;
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_LUNARG_direct_driver_loading\0";
pub const VK_EXT_shader_module_identifier: u32 = 1;
pub const VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT: u32 = 32;
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME: &[u8; 32usize] =
    b"VK_EXT_shader_module_identifier\0";
pub const VK_EXT_rasterization_order_attachment_access: u32 = 1;
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME: &[u8; 45usize] =
    b"VK_EXT_rasterization_order_attachment_access\0";
pub const VK_NV_optical_flow: u32 = 1;
pub const VK_NV_OPTICAL_FLOW_SPEC_VERSION: u32 = 1;
pub const VK_NV_OPTICAL_FLOW_EXTENSION_NAME: &[u8; 19usize] = b"VK_NV_optical_flow\0";
pub const VK_EXT_legacy_dithering: u32 = 1;
pub const VK_EXT_LEGACY_DITHERING_SPEC_VERSION: u32 = 1;
pub const VK_EXT_LEGACY_DITHERING_EXTENSION_NAME: &[u8; 24usize] = b"VK_EXT_legacy_dithering\0";
pub const VK_EXT_pipeline_protected_access: u32 = 1;
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME: &[u8; 33usize] =
    b"VK_EXT_pipeline_protected_access\0";
pub const VK_EXT_shader_object: u32 = 1;
pub const VK_EXT_SHADER_OBJECT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_OBJECT_EXTENSION_NAME: &[u8; 21usize] = b"VK_EXT_shader_object\0";
pub const VK_QCOM_tile_properties: u32 = 1;
pub const VK_QCOM_TILE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME: &[u8; 24usize] = b"VK_QCOM_tile_properties\0";
pub const VK_SEC_amigo_profiling: u32 = 1;
pub const VK_SEC_AMIGO_PROFILING_SPEC_VERSION: u32 = 1;
pub const VK_SEC_AMIGO_PROFILING_EXTENSION_NAME: &[u8; 23usize] = b"VK_SEC_amigo_profiling\0";
pub const VK_QCOM_multiview_per_view_viewports: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME: &[u8; 37usize] =
    b"VK_QCOM_multiview_per_view_viewports\0";
pub const VK_NV_ray_tracing_invocation_reorder: u32 = 1;
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME: &[u8; 37usize] =
    b"VK_NV_ray_tracing_invocation_reorder\0";
pub const VK_EXT_mutable_descriptor_type: u32 = 1;
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME: &[u8; 31usize] =
    b"VK_EXT_mutable_descriptor_type\0";
pub const VK_ARM_shader_core_builtins: u32 = 1;
pub const VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION: u32 = 2;
pub const VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_ARM_shader_core_builtins\0";
pub const VK_EXT_pipeline_library_group_handles: u32 = 1;
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME: &[u8; 38usize] =
    b"VK_EXT_pipeline_library_group_handles\0";
pub const VK_QCOM_multiview_per_view_render_areas: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME: &[u8; 40usize] =
    b"VK_QCOM_multiview_per_view_render_areas\0";
pub const VK_KHR_acceleration_structure: u32 = 1;
pub const VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION: u32 = 13;
pub const VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME: &[u8; 30usize] =
    b"VK_KHR_acceleration_structure\0";
pub const VK_KHR_ray_tracing_pipeline: u32 = 1;
pub const VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME: &[u8; 28usize] =
    b"VK_KHR_ray_tracing_pipeline\0";
pub const VK_KHR_ray_query: u32 = 1;
pub const VK_KHR_RAY_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_QUERY_EXTENSION_NAME: &[u8; 17usize] = b"VK_KHR_ray_query\0";
pub const VK_EXT_mesh_shader: u32 = 1;
pub const VK_EXT_MESH_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MESH_SHADER_EXTENSION_NAME: &[u8; 19usize] = b"VK_EXT_mesh_shader\0";
pub const MAX_NUM_UNKNOWN_EXTS: u32 = 250;
pub const CURRENT_LOADER_LAYER_INTERFACE_VERSION: u32 = 2;
pub const MIN_SUPPORTED_LOADER_LAYER_INTERFACE_VERSION: u32 = 1;
pub const VK_CURRENT_CHAIN_VERSION: u32 = 1;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type VkBool32 = u32;
pub type VkDeviceAddress = u64;
pub type VkDeviceSize = u64;
pub type VkFlags = u32;
pub type VkSampleMask = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBuffer_T {
    _unused: [u8; 0],
}
pub type VkBuffer = *mut VkBuffer_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImage_T {
    _unused: [u8; 0],
}
pub type VkImage = *mut VkImage_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInstance_T {
    _unused: [u8; 0],
}
pub type VkInstance = *mut VkInstance_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice_T {
    _unused: [u8; 0],
}
pub type VkPhysicalDevice = *mut VkPhysicalDevice_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevice_T {
    _unused: [u8; 0],
}
pub type VkDevice = *mut VkDevice_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueue_T {
    _unused: [u8; 0],
}
pub type VkQueue = *mut VkQueue_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSemaphore_T {
    _unused: [u8; 0],
}
pub type VkSemaphore = *mut VkSemaphore_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandBuffer_T {
    _unused: [u8; 0],
}
pub type VkCommandBuffer = *mut VkCommandBuffer_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFence_T {
    _unused: [u8; 0],
}
pub type VkFence = *mut VkFence_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeviceMemory_T {
    _unused: [u8; 0],
}
pub type VkDeviceMemory = *mut VkDeviceMemory_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkEvent_T {
    _unused: [u8; 0],
}
pub type VkEvent = *mut VkEvent_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueryPool_T {
    _unused: [u8; 0],
}
pub type VkQueryPool = *mut VkQueryPool_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkBufferView_T {
    _unused: [u8; 0],
}
pub type VkBufferView = *mut VkBufferView_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkImageView_T {
    _unused: [u8; 0],
}
pub type VkImageView = *mut VkImageView_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkShaderModule_T {
    _unused: [u8; 0],
}
pub type VkShaderModule = *mut VkShaderModule_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineCache_T {
    _unused: [u8; 0],
}
pub type VkPipelineCache = *mut VkPipelineCache_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipelineLayout_T {
    _unused: [u8; 0],
}
pub type VkPipelineLayout = *mut VkPipelineLayout_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPipeline_T {
    _unused: [u8; 0],
}
pub type VkPipeline = *mut VkPipeline_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkRenderPass_T {
    _unused: [u8; 0],
}
pub type VkRenderPass = *mut VkRenderPass_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSetLayout_T {
    _unused: [u8; 0],
}
pub type VkDescriptorSetLayout = *mut VkDescriptorSetLayout_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSampler_T {
    _unused: [u8; 0],
}
pub type VkSampler = *mut VkSampler_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorSet_T {
    _unused: [u8; 0],
}
pub type VkDescriptorSet = *mut VkDescriptorSet_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorPool_T {
    _unused: [u8; 0],
}
pub type VkDescriptorPool = *mut VkDescriptorPool_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkFramebuffer_T {
    _unused: [u8; 0],
}
pub type VkFramebuffer = *mut VkFramebuffer_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCommandPool_T {
    _unused: [u8; 0],
}
pub type VkCommandPool = *mut VkCommandPool_T;
impl VkResult {
    pub const VK_ERROR_OUT_OF_POOL_MEMORY_KHR: VkResult = VkResult::VK_ERROR_OUT_OF_POOL_MEMORY;
}
impl VkResult {
    pub const VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: VkResult =
        VkResult::VK_ERROR_INVALID_EXTERNAL_HANDLE;
}
impl VkResult {
    pub const VK_ERROR_FRAGMENTATION_EXT: VkResult = VkResult::VK_ERROR_FRAGMENTATION;
}
impl VkResult {
    pub const VK_ERROR_NOT_PERMITTED_EXT: VkResult = VkResult::VK_ERROR_NOT_PERMITTED_KHR;
}
impl VkResult {
    pub const VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: VkResult =
        VkResult::VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
}
impl VkResult {
    pub const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: VkResult =
        VkResult::VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS;
}
impl VkResult {
    pub const VK_PIPELINE_COMPILE_REQUIRED_EXT: VkResult = VkResult::VK_PIPELINE_COMPILE_REQUIRED;
}
impl VkResult {
    pub const VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT: VkResult =
        VkResult::VK_PIPELINE_COMPILE_REQUIRED;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkResult {
    VK_SUCCESS = 0,
    VK_NOT_READY = 1,
    VK_TIMEOUT = 2,
    VK_EVENT_SET = 3,
    VK_EVENT_RESET = 4,
    VK_INCOMPLETE = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    VK_ERROR_INITIALIZATION_FAILED = -3,
    VK_ERROR_DEVICE_LOST = -4,
    VK_ERROR_MEMORY_MAP_FAILED = -5,
    VK_ERROR_LAYER_NOT_PRESENT = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
    VK_ERROR_FEATURE_NOT_PRESENT = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
    VK_ERROR_TOO_MANY_OBJECTS = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
    VK_ERROR_FRAGMENTED_POOL = -12,
    VK_ERROR_UNKNOWN = -13,
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
    VK_ERROR_FRAGMENTATION = -1000161000,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
    VK_PIPELINE_COMPILE_REQUIRED = 1000297000,
    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    VK_SUBOPTIMAL_KHR = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
    VK_ERROR_INVALID_SHADER_NV = -1000012000,
    VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR = -1000023000,
    VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR = -1000023001,
    VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR = -1000023002,
    VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR = -1000023003,
    VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR = -1000023004,
    VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR = -1000023005,
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
    VK_ERROR_NOT_PERMITTED_KHR = -1000174001,
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
    VK_THREAD_IDLE_KHR = 1000268000,
    VK_THREAD_DONE_KHR = 1000268001,
    VK_OPERATION_DEFERRED_KHR = 1000268002,
    VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
    VK_ERROR_COMPRESSION_EXHAUSTED_EXT = -1000338000,
    VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT = 1000482000,
    VK_RESULT_MAX_ENUM = 2147483647,
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_RENDERING_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_RENDERING_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_END_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT : VkStructureType = VkStructureType :: VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES ;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_MEMORY_BARRIER_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEPENDENCY_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SUBMIT_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR : VkStructureType = VkStructureType :: VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES ;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BUFFER_COPY_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_COPY_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_BLIT_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM : VkStructureType = VkStructureType :: VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT ;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT:
        VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS;
}
impl VkStructureType {
    pub const VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: VkStructureType =
        VkStructureType::VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkStructureType {
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000,
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001,
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002,
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003,
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004,
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000,
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000,
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001,
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003,
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004,
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005,
    VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006,
    VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007,
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008,
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009,
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000,
    VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000,
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001,
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001,
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002,
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
    VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR = 1000023000,
    VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR = 1000023001,
    VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR = 1000023002,
    VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = 1000023003,
    VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR = 1000023004,
    VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR = 1000023005,
    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000023006,
    VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR = 1000023007,
    VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR = 1000023008,
    VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR = 1000023009,
    VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR = 1000023010,
    VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR = 1000023011,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR = 1000023012,
    VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR = 1000023013,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR = 1000023014,
    VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR = 1000023015,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR = 1000023016,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR = 1000024000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR = 1000024001,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR = 1000024002,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
    VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000,
    VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001,
    VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR = 1000040000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR = 1000040001,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR = 1000040003,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000040004,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR = 1000040005,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR = 1000040006,
    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006,
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007,
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008,
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009,
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
    VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT = 1000068000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT = 1000068001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT = 1000068002,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR = 1000187000,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR = 1000187001,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR = 1000187002,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR = 1000187003,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR = 1000187004,
    VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR = 1000187005,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
    VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR = 1000271000,
    VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR = 1000271001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000,
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT = 1000274000,
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT = 1000274001,
    VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT = 1000274002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT = 1000275000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT = 1000275001,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT = 1000275002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT = 1000275003,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT = 1000275004,
    VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT = 1000275005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV = 1000292000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV = 1000292001,
    VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV = 1000292002,
    VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
    VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV = 1000310000,
    VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT = 1000311000,
    VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT = 1000311001,
    VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT = 1000311002,
    VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT = 1000311003,
    VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT = 1000311004,
    VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT = 1000311005,
    VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT = 1000311006,
    VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT = 1000311007,
    VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT = 1000311008,
    VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT = 1000311009,
    VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311010,
    VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT = 1000311011,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT = 1000316000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT = 1000316001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT = 1000316002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT = 1000316003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT = 1000316004,
    VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316005,
    VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316006,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316007,
    VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316008,
    VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT = 1000316010,
    VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT = 1000316011,
    VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT = 1000316012,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT = 1000316009,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD =
        1000321000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR = 1000203000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR = 1000322000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR =
        1000323000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT = 1000328000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT = 1000328001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT = 1000338000,
    VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT = 1000338001,
    VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT = 1000338002,
    VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT = 1000338003,
    VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT = 1000338004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT = 1000339000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT = 1000341000,
    VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT = 1000341001,
    VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT = 1000341002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000,
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000,
    VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001,
    VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT = 1000354000,
    VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT = 1000354001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000,
    VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001,
    VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003,
    VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005,
    VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007,
    VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009,
    VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000,
    VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001,
    VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT = 1000372000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT = 1000372001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT =
        1000376000,
    VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT = 1000376001,
    VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT = 1000376002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000,
    VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR = 1000386000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT = 1000395000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT = 1000395001,
    VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT = 1000396000,
    VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT = 1000396001,
    VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT = 1000396002,
    VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT = 1000396003,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT = 1000396004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT = 1000396005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT = 1000396006,
    VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT = 1000396007,
    VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT = 1000396008,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT = 1000396009,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI = 1000404000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI = 1000404001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000,
    VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM = 1000415000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT = 1000418000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT = 1000418001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT = 1000421000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT = 1000422000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001,
    VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV = 1000426000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV = 1000426001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV = 1000427000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV = 1000427001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT = 1000437000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM = 1000440000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM = 1000440001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM = 1000440002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT = 1000455000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT = 1000455001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT = 1000458000,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT = 1000458001,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT = 1000458002,
    VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT = 1000458003,
    VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG = 1000459000,
    VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG = 1000459001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT = 1000462000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT = 1000462001,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT = 1000462002,
    VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT = 1000462003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT =
        1000342000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV = 1000464000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV = 1000464001,
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV = 1000464002,
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV = 1000464003,
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV = 1000464004,
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV = 1000464005,
    VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV = 1000464010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT = 1000465000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT = 1000466000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT = 1000482000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT = 1000482001,
    VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT = 1000482002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM = 1000484000,
    VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM = 1000484001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC = 1000485000,
    VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC = 1000485001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM = 1000488000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV = 1000490000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV = 1000490001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT = 1000351000,
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT = 1000351002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM = 1000497000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM = 1000497001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT = 1000498000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM = 1000510000,
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM = 1000510001,
    VK_STRUCTURE_TYPE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineCacheHeaderVersion {
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647,
}
impl VkImageLayout {
    pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR: VkImageLayout =
        VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL;
}
impl VkImageLayout {
    pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR: VkImageLayout =
        VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL;
}
impl VkImageLayout {
    pub const VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: VkImageLayout =
        VkImageLayout::VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR;
}
impl VkImageLayout {
    pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: VkImageLayout =
        VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
}
impl VkImageLayout {
    pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: VkImageLayout =
        VkImageLayout::VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL;
}
impl VkImageLayout {
    pub const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: VkImageLayout =
        VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL;
}
impl VkImageLayout {
    pub const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: VkImageLayout =
        VkImageLayout::VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL;
}
impl VkImageLayout {
    pub const VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR: VkImageLayout =
        VkImageLayout::VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL;
}
impl VkImageLayout {
    pub const VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR: VkImageLayout =
        VkImageLayout::VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkImageLayout {
    VK_IMAGE_LAYOUT_UNDEFINED = 0,
    VK_IMAGE_LAYOUT_GENERAL = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000,
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,
    VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR = 1000024000,
    VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR = 1000024001,
    VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR = 1000024002,
    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003,
    VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT = 1000339000,
    VK_IMAGE_LAYOUT_MAX_ENUM = 2147483647,
}
impl VkObjectType {
    pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: VkObjectType =
        VkObjectType::VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE;
}
impl VkObjectType {
    pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: VkObjectType =
        VkObjectType::VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION;
}
impl VkObjectType {
    pub const VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: VkObjectType =
        VkObjectType::VK_OBJECT_TYPE_PRIVATE_DATA_SLOT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkObjectType {
    VK_OBJECT_TYPE_UNKNOWN = 0,
    VK_OBJECT_TYPE_INSTANCE = 1,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
    VK_OBJECT_TYPE_DEVICE = 3,
    VK_OBJECT_TYPE_QUEUE = 4,
    VK_OBJECT_TYPE_SEMAPHORE = 5,
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
    VK_OBJECT_TYPE_FENCE = 7,
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
    VK_OBJECT_TYPE_BUFFER = 9,
    VK_OBJECT_TYPE_IMAGE = 10,
    VK_OBJECT_TYPE_EVENT = 11,
    VK_OBJECT_TYPE_QUERY_POOL = 12,
    VK_OBJECT_TYPE_BUFFER_VIEW = 13,
    VK_OBJECT_TYPE_IMAGE_VIEW = 14,
    VK_OBJECT_TYPE_SHADER_MODULE = 15,
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
    VK_OBJECT_TYPE_RENDER_PASS = 18,
    VK_OBJECT_TYPE_PIPELINE = 19,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
    VK_OBJECT_TYPE_SAMPLER = 21,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
    VK_OBJECT_TYPE_FRAMEBUFFER = 24,
    VK_OBJECT_TYPE_COMMAND_POOL = 25,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000,
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,
    VK_OBJECT_TYPE_VIDEO_SESSION_KHR = 1000023000,
    VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR = 1000023001,
    VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000,
    VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001,
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
    VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000,
    VK_OBJECT_TYPE_MICROMAP_EXT = 1000396000,
    VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV = 1000464000,
    VK_OBJECT_TYPE_SHADER_EXT = 1000482000,
    VK_OBJECT_TYPE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVendorId {
    VK_VENDOR_ID_VIV = 65537,
    VK_VENDOR_ID_VSI = 65538,
    VK_VENDOR_ID_KAZAN = 65539,
    VK_VENDOR_ID_CODEPLAY = 65540,
    VK_VENDOR_ID_MESA = 65541,
    VK_VENDOR_ID_POCL = 65542,
    VK_VENDOR_ID_MOBILEYE = 65543,
    VK_VENDOR_ID_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSystemAllocationScope {
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkInternalAllocationType {
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647,
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: VkFormat =
        VkFormat::VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK;
}
impl VkFormat {
    pub const VK_FORMAT_G8B8G8R8_422_UNORM_KHR: VkFormat = VkFormat::VK_FORMAT_G8B8G8R8_422_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_B8G8R8G8_422_UNORM_KHR: VkFormat = VkFormat::VK_FORMAT_B8G8R8G8_422_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G8_B8R8_2PLANE_420_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G8_B8R8_2PLANE_422_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_R10X6_UNORM_PACK16_KHR: VkFormat = VkFormat::VK_FORMAT_R10X6_UNORM_PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_R10X6G10X6_UNORM_2PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_R12X4_UNORM_PACK16_KHR: VkFormat = VkFormat::VK_FORMAT_R12X4_UNORM_PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_R12X4G12X4_UNORM_2PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: VkFormat =
        VkFormat::VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G16B16G16R16_422_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G16B16G16R16_422_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_B16G16R16G16_422_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_B16G16R16G16_422_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G16_B16R16_2PLANE_420_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G16_B16R16_2PLANE_422_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: VkFormat =
        VkFormat::VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT: VkFormat =
        VkFormat::VK_FORMAT_G8_B8R8_2PLANE_444_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT: VkFormat =
        VkFormat::VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT: VkFormat =
        VkFormat::VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT: VkFormat =
        VkFormat::VK_FORMAT_G16_B16R16_2PLANE_444_UNORM;
}
impl VkFormat {
    pub const VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT: VkFormat =
        VkFormat::VK_FORMAT_A4R4G4B4_UNORM_PACK16;
}
impl VkFormat {
    pub const VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT: VkFormat =
        VkFormat::VK_FORMAT_A4B4G4R4_UNORM_PACK16;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkFormat {
    VK_FORMAT_UNDEFINED = 0,
    VK_FORMAT_R4G4_UNORM_PACK8 = 1,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
    VK_FORMAT_R8_UNORM = 9,
    VK_FORMAT_R8_SNORM = 10,
    VK_FORMAT_R8_USCALED = 11,
    VK_FORMAT_R8_SSCALED = 12,
    VK_FORMAT_R8_UINT = 13,
    VK_FORMAT_R8_SINT = 14,
    VK_FORMAT_R8_SRGB = 15,
    VK_FORMAT_R8G8_UNORM = 16,
    VK_FORMAT_R8G8_SNORM = 17,
    VK_FORMAT_R8G8_USCALED = 18,
    VK_FORMAT_R8G8_SSCALED = 19,
    VK_FORMAT_R8G8_UINT = 20,
    VK_FORMAT_R8G8_SINT = 21,
    VK_FORMAT_R8G8_SRGB = 22,
    VK_FORMAT_R8G8B8_UNORM = 23,
    VK_FORMAT_R8G8B8_SNORM = 24,
    VK_FORMAT_R8G8B8_USCALED = 25,
    VK_FORMAT_R8G8B8_SSCALED = 26,
    VK_FORMAT_R8G8B8_UINT = 27,
    VK_FORMAT_R8G8B8_SINT = 28,
    VK_FORMAT_R8G8B8_SRGB = 29,
    VK_FORMAT_B8G8R8_UNORM = 30,
    VK_FORMAT_B8G8R8_SNORM = 31,
    VK_FORMAT_B8G8R8_USCALED = 32,
    VK_FORMAT_B8G8R8_SSCALED = 33,
    VK_FORMAT_B8G8R8_UINT = 34,
    VK_FORMAT_B8G8R8_SINT = 35,
    VK_FORMAT_B8G8R8_SRGB = 36,
    VK_FORMAT_R8G8B8A8_UNORM = 37,
    VK_FORMAT_R8G8B8A8_SNORM = 38,
    VK_FORMAT_R8G8B8A8_USCALED = 39,
    VK_FORMAT_R8G8B8A8_SSCALED = 40,
    VK_FORMAT_R8G8B8A8_UINT = 41,
    VK_FORMAT_R8G8B8A8_SINT = 42,
    VK_FORMAT_R8G8B8A8_SRGB = 43,
    VK_FORMAT_B8G8R8A8_UNORM = 44,
    VK_FORMAT_B8G8R8A8_SNORM = 45,
    VK_FORMAT_B8G8R8A8_USCALED = 46,
    VK_FORMAT_B8G8R8A8_SSCALED = 47,
    VK_FORMAT_B8G8R8A8_UINT = 48,
    VK_FORMAT_B8G8R8A8_SINT = 49,
    VK_FORMAT_B8G8R8A8_SRGB = 50,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
    VK_FORMAT_R16_UNORM = 70,
    VK_FORMAT_R16_SNORM = 71,
    VK_FORMAT_R16_USCALED = 72,
    VK_FORMAT_R16_SSCALED = 73,
    VK_FORMAT_R16_UINT = 74,
    VK_FORMAT_R16_SINT = 75,
    VK_FORMAT_R16_SFLOAT = 76,
    VK_FORMAT_R16G16_UNORM = 77,
    VK_FORMAT_R16G16_SNORM = 78,
    VK_FORMAT_R16G16_USCALED = 79,
    VK_FORMAT_R16G16_SSCALED = 80,
    VK_FORMAT_R16G16_UINT = 81,
    VK_FORMAT_R16G16_SINT = 82,
    VK_FORMAT_R16G16_SFLOAT = 83,
    VK_FORMAT_R16G16B16_UNORM = 84,
    VK_FORMAT_R16G16B16_SNORM = 85,
    VK_FORMAT_R16G16B16_USCALED = 86,
    VK_FORMAT_R16G16B16_SSCALED = 87,
    VK_FORMAT_R16G16B16_UINT = 88,
    VK_FORMAT_R16G16B16_SINT = 89,
    VK_FORMAT_R16G16B16_SFLOAT = 90,
    VK_FORMAT_R16G16B16A16_UNORM = 91,
    VK_FORMAT_R16G16B16A16_SNORM = 92,
    VK_FORMAT_R16G16B16A16_USCALED = 93,
    VK_FORMAT_R16G16B16A16_SSCALED = 94,
    VK_FORMAT_R16G16B16A16_UINT = 95,
    VK_FORMAT_R16G16B16A16_SINT = 96,
    VK_FORMAT_R16G16B16A16_SFLOAT = 97,
    VK_FORMAT_R32_UINT = 98,
    VK_FORMAT_R32_SINT = 99,
    VK_FORMAT_R32_SFLOAT = 100,
    VK_FORMAT_R32G32_UINT = 101,
    VK_FORMAT_R32G32_SINT = 102,
    VK_FORMAT_R32G32_SFLOAT = 103,
    VK_FORMAT_R32G32B32_UINT = 104,
    VK_FORMAT_R32G32B32_SINT = 105,
    VK_FORMAT_R32G32B32_SFLOAT = 106,
    VK_FORMAT_R32G32B32A32_UINT = 107,
    VK_FORMAT_R32G32B32A32_SINT = 108,
    VK_FORMAT_R32G32B32A32_SFLOAT = 109,
    VK_FORMAT_R64_UINT = 110,
    VK_FORMAT_R64_SINT = 111,
    VK_FORMAT_R64_SFLOAT = 112,
    VK_FORMAT_R64G64_UINT = 113,
    VK_FORMAT_R64G64_SINT = 114,
    VK_FORMAT_R64G64_SFLOAT = 115,
    VK_FORMAT_R64G64B64_UINT = 116,
    VK_FORMAT_R64G64B64_SINT = 117,
    VK_FORMAT_R64G64B64_SFLOAT = 118,
    VK_FORMAT_R64G64B64A64_UINT = 119,
    VK_FORMAT_R64G64B64A64_SINT = 120,
    VK_FORMAT_R64G64B64A64_SFLOAT = 121,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
    VK_FORMAT_D16_UNORM = 124,
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
    VK_FORMAT_D32_SFLOAT = 126,
    VK_FORMAT_S8_UINT = 127,
    VK_FORMAT_D16_UNORM_S8_UINT = 128,
    VK_FORMAT_D24_UNORM_S8_UINT = 129,
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
    VK_FORMAT_BC2_UNORM_BLOCK = 135,
    VK_FORMAT_BC2_SRGB_BLOCK = 136,
    VK_FORMAT_BC3_UNORM_BLOCK = 137,
    VK_FORMAT_BC3_SRGB_BLOCK = 138,
    VK_FORMAT_BC4_UNORM_BLOCK = 139,
    VK_FORMAT_BC4_SNORM_BLOCK = 140,
    VK_FORMAT_BC5_UNORM_BLOCK = 141,
    VK_FORMAT_BC5_SNORM_BLOCK = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
    VK_FORMAT_BC7_UNORM_BLOCK = 145,
    VK_FORMAT_BC7_SRGB_BLOCK = 146,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002,
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003,
    VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000,
    VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001,
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000,
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001,
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002,
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003,
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004,
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005,
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006,
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007,
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008,
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009,
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010,
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011,
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012,
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    VK_FORMAT_R16G16_S10_5_NV = 1000464000,
    VK_FORMAT_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkImageTiling {
    VK_IMAGE_TILING_OPTIMAL = 0,
    VK_IMAGE_TILING_LINEAR = 1,
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
    VK_IMAGE_TILING_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkImageType {
    VK_IMAGE_TYPE_1D = 0,
    VK_IMAGE_TYPE_2D = 1,
    VK_IMAGE_TYPE_3D = 2,
    VK_IMAGE_TYPE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPhysicalDeviceType {
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkQueryType {
    VK_QUERY_TYPE_OCCLUSION = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
    VK_QUERY_TYPE_TIMESTAMP = 2,
    VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR = 1000023000,
    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,
    VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT = 1000328000,
    VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR = 1000386000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR = 1000386001,
    VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT = 1000396000,
    VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT = 1000396001,
    VK_QUERY_TYPE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSharingMode {
    VK_SHARING_MODE_EXCLUSIVE = 0,
    VK_SHARING_MODE_CONCURRENT = 1,
    VK_SHARING_MODE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkComponentSwizzle {
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO = 1,
    VK_COMPONENT_SWIZZLE_ONE = 2,
    VK_COMPONENT_SWIZZLE_R = 3,
    VK_COMPONENT_SWIZZLE_G = 4,
    VK_COMPONENT_SWIZZLE_B = 5,
    VK_COMPONENT_SWIZZLE_A = 6,
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkImageViewType {
    VK_IMAGE_VIEW_TYPE_1D = 0,
    VK_IMAGE_VIEW_TYPE_2D = 1,
    VK_IMAGE_VIEW_TYPE_3D = 2,
    VK_IMAGE_VIEW_TYPE_CUBE = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkBlendFactor {
    VK_BLEND_FACTOR_ZERO = 0,
    VK_BLEND_FACTOR_ONE = 1,
    VK_BLEND_FACTOR_SRC_COLOR = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    VK_BLEND_FACTOR_DST_COLOR = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    VK_BLEND_FACTOR_SRC_ALPHA = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    VK_BLEND_FACTOR_DST_ALPHA = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    VK_BLEND_FACTOR_SRC1_COLOR = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
    VK_BLEND_FACTOR_SRC1_ALPHA = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
    VK_BLEND_FACTOR_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkBlendOp {
    VK_BLEND_OP_ADD = 0,
    VK_BLEND_OP_SUBTRACT = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
    VK_BLEND_OP_MIN = 3,
    VK_BLEND_OP_MAX = 4,
    VK_BLEND_OP_ZERO_EXT = 1000148000,
    VK_BLEND_OP_SRC_EXT = 1000148001,
    VK_BLEND_OP_DST_EXT = 1000148002,
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
    VK_BLEND_OP_DST_OVER_EXT = 1000148004,
    VK_BLEND_OP_SRC_IN_EXT = 1000148005,
    VK_BLEND_OP_DST_IN_EXT = 1000148006,
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
    VK_BLEND_OP_DST_OUT_EXT = 1000148008,
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
    VK_BLEND_OP_XOR_EXT = 1000148011,
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
    VK_BLEND_OP_SCREEN_EXT = 1000148013,
    VK_BLEND_OP_OVERLAY_EXT = 1000148014,
    VK_BLEND_OP_DARKEN_EXT = 1000148015,
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
    VK_BLEND_OP_COLORBURN_EXT = 1000148018,
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
    VK_BLEND_OP_INVERT_EXT = 1000148023,
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
    VK_BLEND_OP_HARDMIX_EXT = 1000148030,
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
    VK_BLEND_OP_PLUS_EXT = 1000148035,
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
    VK_BLEND_OP_MINUS_EXT = 1000148039,
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
    VK_BLEND_OP_CONTRAST_EXT = 1000148041,
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
    VK_BLEND_OP_RED_EXT = 1000148043,
    VK_BLEND_OP_GREEN_EXT = 1000148044,
    VK_BLEND_OP_BLUE_EXT = 1000148045,
    VK_BLEND_OP_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCompareOp {
    VK_COMPARE_OP_NEVER = 0,
    VK_COMPARE_OP_LESS = 1,
    VK_COMPARE_OP_EQUAL = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
    VK_COMPARE_OP_GREATER = 4,
    VK_COMPARE_OP_NOT_EQUAL = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS = 7,
    VK_COMPARE_OP_MAX_ENUM = 2147483647,
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_CULL_MODE_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_CULL_MODE;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_FRONT_FACE_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_FRONT_FACE;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_DEPTH_COMPARE_OP;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_STENCIL_OP_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_STENCIL_OP;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE;
}
impl VkDynamicState {
    pub const VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT: VkDynamicState =
        VkDynamicState::VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDynamicState {
    VK_DYNAMIC_STATE_VIEWPORT = 0,
    VK_DYNAMIC_STATE_SCISSOR = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
    VK_DYNAMIC_STATE_CULL_MODE = 1000267000,
    VK_DYNAMIC_STATE_FRONT_FACE = 1000267001,
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002,
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003,
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004,
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005,
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006,
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007,
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009,
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010,
    VK_DYNAMIC_STATE_STENCIL_OP = 1000267011,
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001,
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002,
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT = 1000099001,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT = 1000099002,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV = 1000205000,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
    VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000,
    VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000,
    VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003,
    VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000,
    VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT = 1000455002,
    VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT = 1000455003,
    VK_DYNAMIC_STATE_POLYGON_MODE_EXT = 1000455004,
    VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT = 1000455005,
    VK_DYNAMIC_STATE_SAMPLE_MASK_EXT = 1000455006,
    VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT = 1000455007,
    VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT = 1000455008,
    VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT = 1000455009,
    VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT = 1000455010,
    VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT = 1000455011,
    VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT = 1000455012,
    VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT = 1000455013,
    VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT = 1000455014,
    VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = 1000455015,
    VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT = 1000455016,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT = 1000455017,
    VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT = 1000455018,
    VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT = 1000455019,
    VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT = 1000455020,
    VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT = 1000455021,
    VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = 1000455022,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV = 1000455023,
    VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV = 1000455024,
    VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV = 1000455025,
    VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV = 1000455026,
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV = 1000455027,
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV = 1000455028,
    VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV = 1000455029,
    VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV = 1000455030,
    VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = 1000455031,
    VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV = 1000455032,
    VK_DYNAMIC_STATE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkFrontFace {
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE = 1,
    VK_FRONT_FACE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVertexInputRate {
    VK_VERTEX_INPUT_RATE_VERTEX = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPrimitiveTopology {
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPolygonMode {
    VK_POLYGON_MODE_FILL = 0,
    VK_POLYGON_MODE_LINE = 1,
    VK_POLYGON_MODE_POINT = 2,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
    VK_POLYGON_MODE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkStencilOp {
    VK_STENCIL_OP_KEEP = 0,
    VK_STENCIL_OP_ZERO = 1,
    VK_STENCIL_OP_REPLACE = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
    VK_STENCIL_OP_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkLogicOp {
    VK_LOGIC_OP_CLEAR = 0,
    VK_LOGIC_OP_AND = 1,
    VK_LOGIC_OP_AND_REVERSE = 2,
    VK_LOGIC_OP_COPY = 3,
    VK_LOGIC_OP_AND_INVERTED = 4,
    VK_LOGIC_OP_NO_OP = 5,
    VK_LOGIC_OP_XOR = 6,
    VK_LOGIC_OP_OR = 7,
    VK_LOGIC_OP_NOR = 8,
    VK_LOGIC_OP_EQUIVALENT = 9,
    VK_LOGIC_OP_INVERT = 10,
    VK_LOGIC_OP_OR_REVERSE = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED = 13,
    VK_LOGIC_OP_NAND = 14,
    VK_LOGIC_OP_SET = 15,
    VK_LOGIC_OP_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkBorderColor {
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
    VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
    VK_BORDER_COLOR_MAX_ENUM = 2147483647,
}
impl VkFilter {
    pub const VK_FILTER_CUBIC_IMG: VkFilter = VkFilter::VK_FILTER_CUBIC_EXT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkFilter {
    VK_FILTER_NEAREST = 0,
    VK_FILTER_LINEAR = 1,
    VK_FILTER_CUBIC_EXT = 1000015000,
    VK_FILTER_MAX_ENUM = 2147483647,
}
impl VkSamplerAddressMode {
    pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR: VkSamplerAddressMode =
        VkSamplerAddressMode::VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSamplerAddressMode {
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSamplerMipmapMode {
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647,
}
impl VkDescriptorType {
    pub const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: VkDescriptorType =
        VkDescriptorType::VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK;
}
impl VkDescriptorType {
    pub const VK_DESCRIPTOR_TYPE_MUTABLE_VALVE: VkDescriptorType =
        VkDescriptorType::VK_DESCRIPTOR_TYPE_MUTABLE_EXT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDescriptorType {
    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM = 1000440000,
    VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM = 1000440001,
    VK_DESCRIPTOR_TYPE_MUTABLE_EXT = 1000351000,
    VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAttachmentLoadOp {
    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000,
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647,
}
impl VkAttachmentStoreOp {
    pub const VK_ATTACHMENT_STORE_OP_NONE_KHR: VkAttachmentStoreOp =
        VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_NONE;
}
impl VkAttachmentStoreOp {
    pub const VK_ATTACHMENT_STORE_OP_NONE_QCOM: VkAttachmentStoreOp =
        VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_NONE;
}
impl VkAttachmentStoreOp {
    pub const VK_ATTACHMENT_STORE_OP_NONE_EXT: VkAttachmentStoreOp =
        VkAttachmentStoreOp::VK_ATTACHMENT_STORE_OP_NONE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAttachmentStoreOp {
    VK_ATTACHMENT_STORE_OP_STORE = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
    VK_ATTACHMENT_STORE_OP_NONE = 1000301000,
    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647,
}
impl VkPipelineBindPoint {
    pub const VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: VkPipelineBindPoint =
        VkPipelineBindPoint::VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineBindPoint {
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE = 1,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
    VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003,
    VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCommandBufferLevel {
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647,
}
impl VkIndexType {
    pub const VK_INDEX_TYPE_NONE_NV: VkIndexType = VkIndexType::VK_INDEX_TYPE_NONE_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkIndexType {
    VK_INDEX_TYPE_UINT16 = 0,
    VK_INDEX_TYPE_UINT32 = 1,
    VK_INDEX_TYPE_NONE_KHR = 1000165000,
    VK_INDEX_TYPE_UINT8_EXT = 1000265000,
    VK_INDEX_TYPE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSubpassContents {
    VK_SUBPASS_CONTENTS_INLINE = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647,
}
impl VkAccessFlagBits {
    pub const VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits =
        VkAccessFlagBits::VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR;
}
impl VkAccessFlagBits {
    pub const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits =
        VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR;
}
impl VkAccessFlagBits {
    pub const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits =
        VkAccessFlagBits::VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR;
}
impl VkAccessFlagBits {
    pub const VK_ACCESS_NONE_KHR: VkAccessFlagBits = VkAccessFlagBits::VK_ACCESS_NONE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAccessFlagBits {
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1,
    VK_ACCESS_INDEX_READ_BIT = 2,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4,
    VK_ACCESS_UNIFORM_READ_BIT = 8,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16,
    VK_ACCESS_SHADER_READ_BIT = 32,
    VK_ACCESS_SHADER_WRITE_BIT = 64,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024,
    VK_ACCESS_TRANSFER_READ_BIT = 2048,
    VK_ACCESS_TRANSFER_WRITE_BIT = 4096,
    VK_ACCESS_HOST_READ_BIT = 8192,
    VK_ACCESS_HOST_WRITE_BIT = 16384,
    VK_ACCESS_MEMORY_READ_BIT = 32768,
    VK_ACCESS_MEMORY_WRITE_BIT = 65536,
    VK_ACCESS_NONE = 0,
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728,
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304,
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216,
    VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608,
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072,
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144,
    VK_ACCESS_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkAccessFlags = VkFlags;
impl VkImageAspectFlagBits {
    pub const VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: VkImageAspectFlagBits =
        VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_0_BIT;
}
impl VkImageAspectFlagBits {
    pub const VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: VkImageAspectFlagBits =
        VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_1_BIT;
}
impl VkImageAspectFlagBits {
    pub const VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: VkImageAspectFlagBits =
        VkImageAspectFlagBits::VK_IMAGE_ASPECT_PLANE_2_BIT;
}
impl VkImageAspectFlagBits {
    pub const VK_IMAGE_ASPECT_NONE_KHR: VkImageAspectFlagBits =
        VkImageAspectFlagBits::VK_IMAGE_ASPECT_NONE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkImageAspectFlagBits {
    VK_IMAGE_ASPECT_COLOR_BIT = 1,
    VK_IMAGE_ASPECT_DEPTH_BIT = 2,
    VK_IMAGE_ASPECT_STENCIL_BIT = 4,
    VK_IMAGE_ASPECT_METADATA_BIT = 8,
    VK_IMAGE_ASPECT_PLANE_0_BIT = 16,
    VK_IMAGE_ASPECT_PLANE_1_BIT = 32,
    VK_IMAGE_ASPECT_PLANE_2_BIT = 64,
    VK_IMAGE_ASPECT_NONE = 0,
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128,
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256,
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512,
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024,
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkImageAspectFlags = VkFlags;
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG: VkFormatFeatureFlagBits =
        VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT;
}
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits =
        VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_SRC_BIT;
}
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits =
        VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_TRANSFER_DST_BIT;
}
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT: VkFormatFeatureFlagBits =
        VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT;
}
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits =
        VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT;
}
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR:
        VkFormatFeatureFlagBits =
        VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT;
}
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR : VkFormatFeatureFlagBits = VkFormatFeatureFlagBits :: VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT ;
}
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR : VkFormatFeatureFlagBits = VkFormatFeatureFlagBits :: VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT ;
}
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR : VkFormatFeatureFlagBits = VkFormatFeatureFlagBits :: VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT ;
}
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits =
        VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_DISJOINT_BIT;
}
impl VkFormatFeatureFlagBits {
    pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits =
        VkFormatFeatureFlagBits::VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkFormatFeatureFlagBits {
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024,
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT =
        2097152,
    VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536,
    VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR = 33554432,
    VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR = 67108864,
    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = 8192,
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216,
    VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824,
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkFormatFeatureFlags = VkFlags;
impl VkImageCreateFlagBits {
    pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: VkImageCreateFlagBits =
        VkImageCreateFlagBits::VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT;
}
impl VkImageCreateFlagBits {
    pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: VkImageCreateFlagBits =
        VkImageCreateFlagBits::VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT;
}
impl VkImageCreateFlagBits {
    pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR: VkImageCreateFlagBits =
        VkImageCreateFlagBits::VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT;
}
impl VkImageCreateFlagBits {
    pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: VkImageCreateFlagBits =
        VkImageCreateFlagBits::VK_IMAGE_CREATE_EXTENDED_USAGE_BIT;
}
impl VkImageCreateFlagBits {
    pub const VK_IMAGE_CREATE_DISJOINT_BIT_KHR: VkImageCreateFlagBits =
        VkImageCreateFlagBits::VK_IMAGE_CREATE_DISJOINT_BIT;
}
impl VkImageCreateFlagBits {
    pub const VK_IMAGE_CREATE_ALIAS_BIT_KHR: VkImageCreateFlagBits =
        VkImageCreateFlagBits::VK_IMAGE_CREATE_ALIAS_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkImageCreateFlagBits {
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16,
    VK_IMAGE_CREATE_ALIAS_BIT = 1024,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256,
    VK_IMAGE_CREATE_PROTECTED_BIT = 2048,
    VK_IMAGE_CREATE_DISJOINT_BIT = 512,
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096,
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384,
    VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 65536,
    VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT = 262144,
    VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 131072,
    VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768,
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkImageCreateFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSampleCountFlagBits {
    VK_SAMPLE_COUNT_1_BIT = 1,
    VK_SAMPLE_COUNT_2_BIT = 2,
    VK_SAMPLE_COUNT_4_BIT = 4,
    VK_SAMPLE_COUNT_8_BIT = 8,
    VK_SAMPLE_COUNT_16_BIT = 16,
    VK_SAMPLE_COUNT_32_BIT = 32,
    VK_SAMPLE_COUNT_64_BIT = 64,
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkSampleCountFlags = VkFlags;
impl VkImageUsageFlagBits {
    pub const VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: VkImageUsageFlagBits =
        VkImageUsageFlagBits::VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkImageUsageFlagBits {
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
    VK_IMAGE_USAGE_SAMPLED_BIT = 4,
    VK_IMAGE_USAGE_STORAGE_BIT = 8,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
    VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR = 1024,
    VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 2048,
    VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR = 4096,
    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512,
    VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256,
    VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 524288,
    VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 262144,
    VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM = 1048576,
    VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM = 2097152,
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkImageUsageFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkInstanceCreateFlagBits {
    VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 1,
    VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkInstanceCreateFlags = VkFlags;
impl VkMemoryHeapFlagBits {
    pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: VkMemoryHeapFlagBits =
        VkMemoryHeapFlagBits::VK_MEMORY_HEAP_MULTI_INSTANCE_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkMemoryHeapFlagBits {
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2,
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkMemoryHeapFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkMemoryPropertyFlagBits {
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16,
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 32,
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64,
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128,
    VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256,
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkMemoryPropertyFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkQueueFlagBits {
    VK_QUEUE_GRAPHICS_BIT = 1,
    VK_QUEUE_COMPUTE_BIT = 2,
    VK_QUEUE_TRANSFER_BIT = 4,
    VK_QUEUE_SPARSE_BINDING_BIT = 8,
    VK_QUEUE_PROTECTED_BIT = 16,
    VK_QUEUE_VIDEO_DECODE_BIT_KHR = 32,
    VK_QUEUE_OPTICAL_FLOW_BIT_NV = 256,
    VK_QUEUE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkQueueFlags = VkFlags;
pub type VkDeviceCreateFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDeviceQueueCreateFlagBits {
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1,
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkDeviceQueueCreateFlags = VkFlags;
impl VkPipelineStageFlagBits {
    pub const VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits =
        VkPipelineStageFlagBits::VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
}
impl VkPipelineStageFlagBits {
    pub const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits =
        VkPipelineStageFlagBits::VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR;
}
impl VkPipelineStageFlagBits {
    pub const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits =
        VkPipelineStageFlagBits::VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR;
}
impl VkPipelineStageFlagBits {
    pub const VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits =
        VkPipelineStageFlagBits::VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT;
}
impl VkPipelineStageFlagBits {
    pub const VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits =
        VkPipelineStageFlagBits::VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT;
}
impl VkPipelineStageFlagBits {
    pub const VK_PIPELINE_STAGE_NONE_KHR: VkPipelineStageFlagBits =
        VkPipelineStageFlagBits::VK_PIPELINE_STAGE_NONE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineStageFlagBits {
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048,
    VK_PIPELINE_STAGE_TRANSFER_BIT = 4096,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192,
    VK_PIPELINE_STAGE_HOST_BIT = 16384,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536,
    VK_PIPELINE_STAGE_NONE = 0,
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216,
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152,
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608,
    VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304,
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072,
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT = 524288,
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT = 1048576,
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkPipelineStageFlags = VkFlags;
pub type VkMemoryMapFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSparseMemoryBindFlagBits {
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1,
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkSparseMemoryBindFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSparseImageFormatFlagBits {
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4,
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkSparseImageFormatFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkFenceCreateFlagBits {
    VK_FENCE_CREATE_SIGNALED_BIT = 1,
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkFenceCreateFlags = VkFlags;
pub type VkSemaphoreCreateFlags = VkFlags;
impl VkEventCreateFlagBits {
    pub const VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR: VkEventCreateFlagBits =
        VkEventCreateFlagBits::VK_EVENT_CREATE_DEVICE_ONLY_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkEventCreateFlagBits {
    VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1,
    VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkEventCreateFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkQueryPipelineStatisticFlagBits {
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024,
    VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT = 2048,
    VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT = 4096,
    VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI = 8192,
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkQueryPipelineStatisticFlags = VkFlags;
pub type VkQueryPoolCreateFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkQueryResultFlagBits {
    VK_QUERY_RESULT_64_BIT = 1,
    VK_QUERY_RESULT_WAIT_BIT = 2,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4,
    VK_QUERY_RESULT_PARTIAL_BIT = 8,
    VK_QUERY_RESULT_WITH_STATUS_BIT_KHR = 16,
    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkQueryResultFlags = VkFlags;
impl VkBufferCreateFlagBits {
    pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: VkBufferCreateFlagBits =
        VkBufferCreateFlagBits::VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
}
impl VkBufferCreateFlagBits {
    pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: VkBufferCreateFlagBits =
        VkBufferCreateFlagBits::VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkBufferCreateFlagBits {
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4,
    VK_BUFFER_CREATE_PROTECTED_BIT = 8,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16,
    VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 32,
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkBufferCreateFlags = VkFlags;
impl VkBufferUsageFlagBits {
    pub const VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits =
        VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR;
}
impl VkBufferUsageFlagBits {
    pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT: VkBufferUsageFlagBits =
        VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
}
impl VkBufferUsageFlagBits {
    pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR: VkBufferUsageFlagBits =
        VkBufferUsageFlagBits::VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkBufferUsageFlagBits {
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072,
    VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192,
    VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096,
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512,
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288,
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576,
    VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024,
    VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152,
    VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304,
    VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864,
    VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608,
    VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216,
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkBufferUsageFlags = VkFlags;
pub type VkBufferViewCreateFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkImageViewCreateFlagBits {
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1,
    VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4,
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2,
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkImageViewCreateFlags = VkFlags;
pub type VkShaderModuleCreateFlags = VkFlags;
impl VkPipelineCacheCreateFlagBits {
    pub const VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT:
        VkPipelineCacheCreateFlagBits =
        VkPipelineCacheCreateFlagBits::VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineCacheCreateFlagBits {
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1,
    VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkPipelineCacheCreateFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkColorComponentFlagBits {
    VK_COLOR_COMPONENT_R_BIT = 1,
    VK_COLOR_COMPONENT_G_BIT = 2,
    VK_COLOR_COMPONENT_B_BIT = 4,
    VK_COLOR_COMPONENT_A_BIT = 8,
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkColorComponentFlags = VkFlags;
impl VkPipelineCreateFlagBits {
    pub const VK_PIPELINE_CREATE_DISPATCH_BASE: VkPipelineCreateFlagBits =
        VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISPATCH_BASE_BIT;
}
impl VkPipelineCreateFlagBits {
    pub const VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR : VkPipelineCreateFlagBits = VkPipelineCreateFlagBits :: VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR ;
}
impl VkPipelineCreateFlagBits {
    pub const VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT : VkPipelineCreateFlagBits = VkPipelineCreateFlagBits :: VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT ;
}
impl VkPipelineCreateFlagBits {
    pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: VkPipelineCreateFlagBits =
        VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT;
}
impl VkPipelineCreateFlagBits {
    pub const VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: VkPipelineCreateFlagBits =
        VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_DISPATCH_BASE_BIT;
}
impl VkPipelineCreateFlagBits {
    pub const VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT:
        VkPipelineCreateFlagBits =
        VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT;
}
impl VkPipelineCreateFlagBits {
    pub const VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT: VkPipelineCreateFlagBits =
        VkPipelineCreateFlagBits::VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineCreateFlagBits {
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8,
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16,
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256,
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512,
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152,
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192,
    VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288,
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32,
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64,
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128,
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144,
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048,
    VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 536870912,
    VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608,
    VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024,
    VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576,
    VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432,
    VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864,
    VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216,
    VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = 134217728,
    VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824,
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkPipelineCreateFlags = VkFlags;
impl VkPipelineShaderStageCreateFlagBits {
    pub const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT : VkPipelineShaderStageCreateFlagBits = VkPipelineShaderStageCreateFlagBits :: VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT ;
}
impl VkPipelineShaderStageCreateFlagBits {
    pub const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT : VkPipelineShaderStageCreateFlagBits = VkPipelineShaderStageCreateFlagBits :: VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT ;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineShaderStageCreateFlagBits {
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1,
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2,
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkPipelineShaderStageCreateFlags = VkFlags;
impl VkShaderStageFlagBits {
    pub const VK_SHADER_STAGE_RAYGEN_BIT_NV: VkShaderStageFlagBits =
        VkShaderStageFlagBits::VK_SHADER_STAGE_RAYGEN_BIT_KHR;
}
impl VkShaderStageFlagBits {
    pub const VK_SHADER_STAGE_ANY_HIT_BIT_NV: VkShaderStageFlagBits =
        VkShaderStageFlagBits::VK_SHADER_STAGE_ANY_HIT_BIT_KHR;
}
impl VkShaderStageFlagBits {
    pub const VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: VkShaderStageFlagBits =
        VkShaderStageFlagBits::VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR;
}
impl VkShaderStageFlagBits {
    pub const VK_SHADER_STAGE_MISS_BIT_NV: VkShaderStageFlagBits =
        VkShaderStageFlagBits::VK_SHADER_STAGE_MISS_BIT_KHR;
}
impl VkShaderStageFlagBits {
    pub const VK_SHADER_STAGE_INTERSECTION_BIT_NV: VkShaderStageFlagBits =
        VkShaderStageFlagBits::VK_SHADER_STAGE_INTERSECTION_BIT_KHR;
}
impl VkShaderStageFlagBits {
    pub const VK_SHADER_STAGE_CALLABLE_BIT_NV: VkShaderStageFlagBits =
        VkShaderStageFlagBits::VK_SHADER_STAGE_CALLABLE_BIT_KHR;
}
impl VkShaderStageFlagBits {
    pub const VK_SHADER_STAGE_TASK_BIT_NV: VkShaderStageFlagBits =
        VkShaderStageFlagBits::VK_SHADER_STAGE_TASK_BIT_EXT;
}
impl VkShaderStageFlagBits {
    pub const VK_SHADER_STAGE_MESH_BIT_NV: VkShaderStageFlagBits =
        VkShaderStageFlagBits::VK_SHADER_STAGE_MESH_BIT_EXT;
}
impl VkShaderStageFlagBits {
    pub const VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM: VkShaderStageFlagBits =
        VkShaderStageFlagBits::VK_SHADER_STAGE_ALL;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkShaderStageFlagBits {
    VK_SHADER_STAGE_VERTEX_BIT = 1,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4,
    VK_SHADER_STAGE_GEOMETRY_BIT = 8,
    VK_SHADER_STAGE_FRAGMENT_BIT = 16,
    VK_SHADER_STAGE_COMPUTE_BIT = 32,
    VK_SHADER_STAGE_ALL_GRAPHICS = 31,
    VK_SHADER_STAGE_ALL = 2147483647,
    VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256,
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024,
    VK_SHADER_STAGE_MISS_BIT_KHR = 2048,
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096,
    VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192,
    VK_SHADER_STAGE_TASK_BIT_EXT = 64,
    VK_SHADER_STAGE_MESH_BIT_EXT = 128,
    VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384,
    VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 524288,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCullModeFlagBits {
    VK_CULL_MODE_NONE = 0,
    VK_CULL_MODE_FRONT_BIT = 1,
    VK_CULL_MODE_BACK_BIT = 2,
    VK_CULL_MODE_FRONT_AND_BACK = 3,
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkCullModeFlags = VkFlags;
pub type VkPipelineVertexInputStateCreateFlags = VkFlags;
pub type VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub type VkPipelineTessellationStateCreateFlags = VkFlags;
pub type VkPipelineViewportStateCreateFlags = VkFlags;
pub type VkPipelineRasterizationStateCreateFlags = VkFlags;
pub type VkPipelineMultisampleStateCreateFlags = VkFlags;
impl VkPipelineDepthStencilStateCreateFlagBits {
    pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM : VkPipelineDepthStencilStateCreateFlagBits = VkPipelineDepthStencilStateCreateFlagBits :: VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT ;
}
impl VkPipelineDepthStencilStateCreateFlagBits {
    pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM : VkPipelineDepthStencilStateCreateFlagBits = VkPipelineDepthStencilStateCreateFlagBits :: VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT ;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineDepthStencilStateCreateFlagBits {
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1,
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT =
        2,
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkPipelineDepthStencilStateCreateFlags = VkFlags;
impl VkPipelineColorBlendStateCreateFlagBits {
    pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM : VkPipelineColorBlendStateCreateFlagBits = VkPipelineColorBlendStateCreateFlagBits :: VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT ;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineColorBlendStateCreateFlagBits {
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1,
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkPipelineColorBlendStateCreateFlags = VkFlags;
pub type VkPipelineDynamicStateCreateFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineLayoutCreateFlagBits {
    VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2,
    VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkPipelineLayoutCreateFlags = VkFlags;
pub type VkShaderStageFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSamplerCreateFlagBits {
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1,
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2,
    VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8,
    VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4,
    VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 16,
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkSamplerCreateFlags = VkFlags;
impl VkDescriptorPoolCreateFlagBits {
    pub const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT: VkDescriptorPoolCreateFlagBits =
        VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT;
}
impl VkDescriptorPoolCreateFlagBits {
    pub const VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE: VkDescriptorPoolCreateFlagBits =
        VkDescriptorPoolCreateFlagBits::VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDescriptorPoolCreateFlagBits {
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2,
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 4,
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkDescriptorPoolCreateFlags = VkFlags;
pub type VkDescriptorPoolResetFlags = VkFlags;
impl VkDescriptorSetLayoutCreateFlagBits {
    pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT : VkDescriptorSetLayoutCreateFlagBits = VkDescriptorSetLayoutCreateFlagBits :: VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT ;
}
impl VkDescriptorSetLayoutCreateFlagBits {
    pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE:
        VkDescriptorSetLayoutCreateFlagBits =
        VkDescriptorSetLayoutCreateFlagBits::VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDescriptorSetLayoutCreateFlagBits {
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 16,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 4,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkDescriptorSetLayoutCreateFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAttachmentDescriptionFlagBits {
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1,
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkAttachmentDescriptionFlags = VkFlags;
impl VkDependencyFlagBits {
    pub const VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: VkDependencyFlagBits =
        VkDependencyFlagBits::VK_DEPENDENCY_VIEW_LOCAL_BIT;
}
impl VkDependencyFlagBits {
    pub const VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: VkDependencyFlagBits =
        VkDependencyFlagBits::VK_DEPENDENCY_DEVICE_GROUP_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDependencyFlagBits {
    VK_DEPENDENCY_BY_REGION_BIT = 1,
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 4,
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 2,
    VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 8,
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkDependencyFlags = VkFlags;
impl VkFramebufferCreateFlagBits {
    pub const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR: VkFramebufferCreateFlagBits =
        VkFramebufferCreateFlagBits::VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkFramebufferCreateFlagBits {
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1,
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkFramebufferCreateFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkRenderPassCreateFlagBits {
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2,
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkRenderPassCreateFlags = VkFlags;
impl VkSubpassDescriptionFlagBits {
    pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM : VkSubpassDescriptionFlagBits = VkSubpassDescriptionFlagBits :: VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT ;
}
impl VkSubpassDescriptionFlagBits {
    pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM : VkSubpassDescriptionFlagBits = VkSubpassDescriptionFlagBits :: VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT ;
}
impl VkSubpassDescriptionFlagBits {
    pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM : VkSubpassDescriptionFlagBits = VkSubpassDescriptionFlagBits :: VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT ;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSubpassDescriptionFlagBits {
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2,
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4,
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64,
    VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 128,
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkSubpassDescriptionFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCommandPoolCreateFlagBits {
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2,
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4,
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkCommandPoolCreateFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCommandPoolResetFlagBits {
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1,
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkCommandPoolResetFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCommandBufferUsageFlagBits {
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4,
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkCommandBufferUsageFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkQueryControlFlagBits {
    VK_QUERY_CONTROL_PRECISE_BIT = 1,
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkQueryControlFlags = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCommandBufferResetFlagBits {
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1,
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkCommandBufferResetFlags = VkFlags;
impl VkStencilFaceFlagBits {
    pub const VK_STENCIL_FRONT_AND_BACK: VkStencilFaceFlagBits =
        VkStencilFaceFlagBits::VK_STENCIL_FACE_FRONT_AND_BACK;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkStencilFaceFlagBits {
    VK_STENCIL_FACE_FRONT_BIT = 1,
    VK_STENCIL_FACE_BACK_BIT = 2,
    VK_STENCIL_FACE_FRONT_AND_BACK = 3,
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkStencilFaceFlags = VkFlags;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExtent2D {
    pub width: u32,
    pub height: u32,
}
#[test]
fn bindgen_test_layout_VkExtent2D() {
    const UNINIT: ::std::mem::MaybeUninit<VkExtent2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExtent2D>(),
        8usize,
        concat!("Size of: ", stringify!(VkExtent2D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExtent2D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkExtent2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent2D),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent2D),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExtent3D {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[test]
fn bindgen_test_layout_VkExtent3D() {
    const UNINIT: ::std::mem::MaybeUninit<VkExtent3D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExtent3D>(),
        12usize,
        concat!("Size of: ", stringify!(VkExtent3D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExtent3D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkExtent3D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent3D),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent3D),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtent3D),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkOffset2D {
    pub x: i32,
    pub y: i32,
}
#[test]
fn bindgen_test_layout_VkOffset2D() {
    const UNINIT: ::std::mem::MaybeUninit<VkOffset2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkOffset2D>(),
        8usize,
        concat!("Size of: ", stringify!(VkOffset2D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkOffset2D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkOffset2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOffset2D),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOffset2D),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkOffset3D {
    pub x: i32,
    pub y: i32,
    pub z: i32,
}
#[test]
fn bindgen_test_layout_VkOffset3D() {
    const UNINIT: ::std::mem::MaybeUninit<VkOffset3D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkOffset3D>(),
        12usize,
        concat!("Size of: ", stringify!(VkOffset3D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkOffset3D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkOffset3D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOffset3D),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOffset3D),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOffset3D),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRect2D {
    pub offset: VkOffset2D,
    pub extent: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkRect2D() {
    const UNINIT: ::std::mem::MaybeUninit<VkRect2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRect2D>(),
        16usize,
        concat!("Size of: ", stringify!(VkRect2D))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRect2D>(),
        4usize,
        concat!("Alignment of ", stringify!(VkRect2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRect2D),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRect2D),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBaseInStructure {
    pub sType: VkStructureType,
    pub pNext: *const VkBaseInStructure,
}
#[test]
fn bindgen_test_layout_VkBaseInStructure() {
    const UNINIT: ::std::mem::MaybeUninit<VkBaseInStructure> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBaseInStructure>(),
        16usize,
        concat!("Size of: ", stringify!(VkBaseInStructure))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBaseInStructure>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBaseInStructure))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBaseInStructure),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBaseInStructure),
            "::",
            stringify!(pNext)
        )
    );
}
impl Default for VkBaseInStructure {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBaseOutStructure {
    pub sType: VkStructureType,
    pub pNext: *mut VkBaseOutStructure,
}
#[test]
fn bindgen_test_layout_VkBaseOutStructure() {
    const UNINIT: ::std::mem::MaybeUninit<VkBaseOutStructure> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBaseOutStructure>(),
        16usize,
        concat!("Size of: ", stringify!(VkBaseOutStructure))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBaseOutStructure>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBaseOutStructure))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBaseOutStructure),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBaseOutStructure),
            "::",
            stringify!(pNext)
        )
    );
}
impl Default for VkBaseOutStructure {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBufferMemoryBarrier() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferMemoryBarrier> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferMemoryBarrier>(),
        56usize,
        concat!("Size of: ", stringify!(VkBufferMemoryBarrier))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferMemoryBarrier>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferMemoryBarrier))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAccessMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAccessMask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(dstAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcQueueFamilyIndex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(srcQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstQueueFamilyIndex) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(dstQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier),
            "::",
            stringify!(size)
        )
    );
}
impl Default for VkBufferMemoryBarrier {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDispatchIndirectCommand {
    pub x: u32,
    pub y: u32,
    pub z: u32,
}
#[test]
fn bindgen_test_layout_VkDispatchIndirectCommand() {
    const UNINIT: ::std::mem::MaybeUninit<VkDispatchIndirectCommand> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDispatchIndirectCommand>(),
        12usize,
        concat!("Size of: ", stringify!(VkDispatchIndirectCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDispatchIndirectCommand>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDispatchIndirectCommand))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDispatchIndirectCommand),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDispatchIndirectCommand),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDispatchIndirectCommand),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDrawIndexedIndirectCommand {
    pub indexCount: u32,
    pub instanceCount: u32,
    pub firstIndex: u32,
    pub vertexOffset: i32,
    pub firstInstance: u32,
}
#[test]
fn bindgen_test_layout_VkDrawIndexedIndirectCommand() {
    const UNINIT: ::std::mem::MaybeUninit<VkDrawIndexedIndirectCommand> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDrawIndexedIndirectCommand>(),
        20usize,
        concat!("Size of: ", stringify!(VkDrawIndexedIndirectCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrawIndexedIndirectCommand>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDrawIndexedIndirectCommand))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndexedIndirectCommand),
            "::",
            stringify!(indexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instanceCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndexedIndirectCommand),
            "::",
            stringify!(instanceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndexedIndirectCommand),
            "::",
            stringify!(firstIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexOffset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndexedIndirectCommand),
            "::",
            stringify!(vertexOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstInstance) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndexedIndirectCommand),
            "::",
            stringify!(firstInstance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDrawIndirectCommand {
    pub vertexCount: u32,
    pub instanceCount: u32,
    pub firstVertex: u32,
    pub firstInstance: u32,
}
#[test]
fn bindgen_test_layout_VkDrawIndirectCommand() {
    const UNINIT: ::std::mem::MaybeUninit<VkDrawIndirectCommand> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDrawIndirectCommand>(),
        16usize,
        concat!("Size of: ", stringify!(VkDrawIndirectCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrawIndirectCommand>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDrawIndirectCommand))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndirectCommand),
            "::",
            stringify!(vertexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instanceCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndirectCommand),
            "::",
            stringify!(instanceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstVertex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndirectCommand),
            "::",
            stringify!(firstVertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstInstance) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawIndirectCommand),
            "::",
            stringify!(firstInstance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageSubresourceRange {
    pub aspectMask: VkImageAspectFlags,
    pub baseMipLevel: u32,
    pub levelCount: u32,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[test]
fn bindgen_test_layout_VkImageSubresourceRange() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageSubresourceRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageSubresourceRange>(),
        20usize,
        concat!("Size of: ", stringify!(VkImageSubresourceRange))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSubresourceRange>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageSubresourceRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspectMask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceRange),
            "::",
            stringify!(aspectMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseMipLevel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceRange),
            "::",
            stringify!(baseMipLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).levelCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceRange),
            "::",
            stringify!(levelCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseArrayLayer) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceRange),
            "::",
            stringify!(baseArrayLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceRange),
            "::",
            stringify!(layerCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub oldLayout: VkImageLayout,
    pub newLayout: VkImageLayout,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub image: VkImage,
    pub subresourceRange: VkImageSubresourceRange,
}
#[test]
fn bindgen_test_layout_VkImageMemoryBarrier() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageMemoryBarrier> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageMemoryBarrier>(),
        72usize,
        concat!("Size of: ", stringify!(VkImageMemoryBarrier))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageMemoryBarrier>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageMemoryBarrier))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAccessMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAccessMask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(dstAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldLayout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(oldLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newLayout) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(newLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcQueueFamilyIndex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(srcQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstQueueFamilyIndex) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(dstQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subresourceRange) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier),
            "::",
            stringify!(subresourceRange)
        )
    );
}
impl Default for VkImageMemoryBarrier {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
}
#[test]
fn bindgen_test_layout_VkMemoryBarrier() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryBarrier> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryBarrier>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryBarrier))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryBarrier>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryBarrier))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAccessMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAccessMask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier),
            "::",
            stringify!(dstAccessMask)
        )
    );
}
impl Default for VkMemoryBarrier {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineCacheHeaderVersionOne {
    pub headerSize: u32,
    pub headerVersion: VkPipelineCacheHeaderVersion,
    pub vendorID: u32,
    pub deviceID: u32,
    pub pipelineCacheUUID: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_VkPipelineCacheHeaderVersionOne() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineCacheHeaderVersionOne> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCacheHeaderVersionOne>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelineCacheHeaderVersionOne))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCacheHeaderVersionOne>(),
        4usize,
        concat!("Alignment of ", stringify!(VkPipelineCacheHeaderVersionOne))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheHeaderVersionOne),
            "::",
            stringify!(headerSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerVersion) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheHeaderVersionOne),
            "::",
            stringify!(headerVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheHeaderVersionOne),
            "::",
            stringify!(vendorID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceID) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheHeaderVersionOne),
            "::",
            stringify!(deviceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineCacheUUID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheHeaderVersionOne),
            "::",
            stringify!(pipelineCacheUUID)
        )
    );
}
impl Default for VkPipelineCacheHeaderVersionOne {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkAllocationFunction = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: usize,
        alignment: usize,
        allocationScope: VkSystemAllocationScope,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type PFN_vkFreeFunction = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pMemory: *mut ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkInternalAllocationNotification = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: usize,
        allocationType: VkInternalAllocationType,
        allocationScope: VkSystemAllocationScope,
    ),
>;
pub type PFN_vkInternalFreeNotification = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: usize,
        allocationType: VkInternalAllocationType,
        allocationScope: VkSystemAllocationScope,
    ),
>;
pub type PFN_vkReallocationFunction = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pOriginal: *mut ::std::os::raw::c_void,
        size: usize,
        alignment: usize,
        allocationScope: VkSystemAllocationScope,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type PFN_vkVoidFunction = ::std::option::Option<unsafe extern "system" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAllocationCallbacks {
    pub pUserData: *mut ::std::os::raw::c_void,
    pub pfnAllocation: PFN_vkAllocationFunction,
    pub pfnReallocation: PFN_vkReallocationFunction,
    pub pfnFree: PFN_vkFreeFunction,
    pub pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pub pfnInternalFree: PFN_vkInternalFreeNotification,
}
#[test]
fn bindgen_test_layout_VkAllocationCallbacks() {
    const UNINIT: ::std::mem::MaybeUninit<VkAllocationCallbacks> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAllocationCallbacks>(),
        48usize,
        concat!("Size of: ", stringify!(VkAllocationCallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAllocationCallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAllocationCallbacks))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnAllocation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnAllocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnReallocation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnReallocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnFree) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnFree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnInternalAllocation) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnInternalAllocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnInternalFree) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAllocationCallbacks),
            "::",
            stringify!(pfnInternalFree)
        )
    );
}
impl Default for VkAllocationCallbacks {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkApplicationInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pApplicationName: *const ::std::os::raw::c_char,
    pub applicationVersion: u32,
    pub pEngineName: *const ::std::os::raw::c_char,
    pub engineVersion: u32,
    pub apiVersion: u32,
}
#[test]
fn bindgen_test_layout_VkApplicationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkApplicationInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkApplicationInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkApplicationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkApplicationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkApplicationInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pApplicationName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(pApplicationName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).applicationVersion) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(applicationVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pEngineName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(pEngineName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engineVersion) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(engineVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apiVersion) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkApplicationInfo),
            "::",
            stringify!(apiVersion)
        )
    );
}
impl Default for VkApplicationInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFormatProperties {
    pub linearTilingFeatures: VkFormatFeatureFlags,
    pub optimalTilingFeatures: VkFormatFeatureFlags,
    pub bufferFeatures: VkFormatFeatureFlags,
}
#[test]
fn bindgen_test_layout_VkFormatProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkFormatProperties> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFormatProperties>(),
        12usize,
        concat!("Size of: ", stringify!(VkFormatProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFormatProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkFormatProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearTilingFeatures) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties),
            "::",
            stringify!(linearTilingFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optimalTilingFeatures) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties),
            "::",
            stringify!(optimalTilingFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferFeatures) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties),
            "::",
            stringify!(bufferFeatures)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageFormatProperties {
    pub maxExtent: VkExtent3D,
    pub maxMipLevels: u32,
    pub maxArrayLayers: u32,
    pub sampleCounts: VkSampleCountFlags,
    pub maxResourceSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkImageFormatProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageFormatProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageFormatProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkImageFormatProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageFormatProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageFormatProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxExtent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties),
            "::",
            stringify!(maxExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMipLevels) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties),
            "::",
            stringify!(maxMipLevels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxArrayLayers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties),
            "::",
            stringify!(maxArrayLayers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleCounts) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties),
            "::",
            stringify!(sampleCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxResourceSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties),
            "::",
            stringify!(maxResourceSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkInstanceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkInstanceCreateFlags,
    pub pApplicationInfo: *const VkApplicationInfo,
    pub enabledLayerCount: u32,
    pub ppEnabledLayerNames: *const *const ::std::os::raw::c_char,
    pub enabledExtensionCount: u32,
    pub ppEnabledExtensionNames: *const *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VkInstanceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkInstanceCreateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkInstanceCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkInstanceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkInstanceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkInstanceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pApplicationInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(pApplicationInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabledLayerCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(enabledLayerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppEnabledLayerNames) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(ppEnabledLayerNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabledExtensionCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(enabledExtensionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppEnabledExtensionNames) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInstanceCreateInfo),
            "::",
            stringify!(ppEnabledExtensionNames)
        )
    );
}
impl Default for VkInstanceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryHeap {
    pub size: VkDeviceSize,
    pub flags: VkMemoryHeapFlags,
}
#[test]
fn bindgen_test_layout_VkMemoryHeap() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryHeap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryHeap>(),
        16usize,
        concat!("Size of: ", stringify!(VkMemoryHeap))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryHeap>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryHeap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHeap),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHeap),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryType {
    pub propertyFlags: VkMemoryPropertyFlags,
    pub heapIndex: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryType() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryType>(),
        8usize,
        concat!("Size of: ", stringify!(VkMemoryType))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryType>(),
        4usize,
        concat!("Alignment of ", stringify!(VkMemoryType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propertyFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryType),
            "::",
            stringify!(propertyFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heapIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryType),
            "::",
            stringify!(heapIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFeatures {
    pub robustBufferAccess: VkBool32,
    pub fullDrawIndexUint32: VkBool32,
    pub imageCubeArray: VkBool32,
    pub independentBlend: VkBool32,
    pub geometryShader: VkBool32,
    pub tessellationShader: VkBool32,
    pub sampleRateShading: VkBool32,
    pub dualSrcBlend: VkBool32,
    pub logicOp: VkBool32,
    pub multiDrawIndirect: VkBool32,
    pub drawIndirectFirstInstance: VkBool32,
    pub depthClamp: VkBool32,
    pub depthBiasClamp: VkBool32,
    pub fillModeNonSolid: VkBool32,
    pub depthBounds: VkBool32,
    pub wideLines: VkBool32,
    pub largePoints: VkBool32,
    pub alphaToOne: VkBool32,
    pub multiViewport: VkBool32,
    pub samplerAnisotropy: VkBool32,
    pub textureCompressionETC2: VkBool32,
    pub textureCompressionASTC_LDR: VkBool32,
    pub textureCompressionBC: VkBool32,
    pub occlusionQueryPrecise: VkBool32,
    pub pipelineStatisticsQuery: VkBool32,
    pub vertexPipelineStoresAndAtomics: VkBool32,
    pub fragmentStoresAndAtomics: VkBool32,
    pub shaderTessellationAndGeometryPointSize: VkBool32,
    pub shaderImageGatherExtended: VkBool32,
    pub shaderStorageImageExtendedFormats: VkBool32,
    pub shaderStorageImageMultisample: VkBool32,
    pub shaderStorageImageReadWithoutFormat: VkBool32,
    pub shaderStorageImageWriteWithoutFormat: VkBool32,
    pub shaderUniformBufferArrayDynamicIndexing: VkBool32,
    pub shaderSampledImageArrayDynamicIndexing: VkBool32,
    pub shaderStorageBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageImageArrayDynamicIndexing: VkBool32,
    pub shaderClipDistance: VkBool32,
    pub shaderCullDistance: VkBool32,
    pub shaderFloat64: VkBool32,
    pub shaderInt64: VkBool32,
    pub shaderInt16: VkBool32,
    pub shaderResourceResidency: VkBool32,
    pub shaderResourceMinLod: VkBool32,
    pub sparseBinding: VkBool32,
    pub sparseResidencyBuffer: VkBool32,
    pub sparseResidencyImage2D: VkBool32,
    pub sparseResidencyImage3D: VkBool32,
    pub sparseResidency2Samples: VkBool32,
    pub sparseResidency4Samples: VkBool32,
    pub sparseResidency8Samples: VkBool32,
    pub sparseResidency16Samples: VkBool32,
    pub sparseResidencyAliased: VkBool32,
    pub variableMultisampleRate: VkBool32,
    pub inheritedQueries: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFeatures>(),
        220usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceFeatures))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFeatures>(),
        4usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceFeatures))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).robustBufferAccess) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(robustBufferAccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fullDrawIndexUint32) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(fullDrawIndexUint32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageCubeArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(imageCubeArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).independentBlend) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(independentBlend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryShader) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(geometryShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tessellationShader) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(tessellationShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleRateShading) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sampleRateShading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dualSrcBlend) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(dualSrcBlend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logicOp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(logicOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiDrawIndirect) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(multiDrawIndirect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawIndirectFirstInstance) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(drawIndirectFirstInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthClamp) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(depthClamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthBiasClamp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(depthBiasClamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fillModeNonSolid) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(fillModeNonSolid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthBounds) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(depthBounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wideLines) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(wideLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).largePoints) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(largePoints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alphaToOne) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(alphaToOne)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiViewport) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(multiViewport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplerAnisotropy) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(samplerAnisotropy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureCompressionETC2) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(textureCompressionETC2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureCompressionASTC_LDR) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(textureCompressionASTC_LDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureCompressionBC) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(textureCompressionBC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).occlusionQueryPrecise) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(occlusionQueryPrecise)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineStatisticsQuery) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(pipelineStatisticsQuery)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vertexPipelineStoresAndAtomics) as usize - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(vertexPipelineStoresAndAtomics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentStoresAndAtomics) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(fragmentStoresAndAtomics)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderTessellationAndGeometryPointSize) as usize
                - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderTessellationAndGeometryPointSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderImageGatherExtended) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderImageGatherExtended)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageImageExtendedFormats) as usize - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageImageExtendedFormats)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageImageMultisample) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageImageMultisample)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageImageReadWithoutFormat) as usize - ptr as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageImageReadWithoutFormat)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageImageWriteWithoutFormat) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageImageWriteWithoutFormat)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderUniformBufferArrayDynamicIndexing) as usize
                - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderUniformBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSampledImageArrayDynamicIndexing) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderSampledImageArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageBufferArrayDynamicIndexing) as usize
                - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageImageArrayDynamicIndexing) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderStorageImageArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderClipDistance) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderClipDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderCullDistance) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderCullDistance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderFloat64) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderFloat64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderInt64) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderInt64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderInt16) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderInt16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderResourceResidency) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderResourceResidency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderResourceMinLod) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(shaderResourceMinLod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseBinding) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseResidencyBuffer) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidencyBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseResidencyImage2D) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidencyImage2D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseResidencyImage3D) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidencyImage3D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseResidency2Samples) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidency2Samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseResidency4Samples) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidency4Samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseResidency8Samples) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidency8Samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseResidency16Samples) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidency16Samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseResidencyAliased) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(sparseResidencyAliased)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variableMultisampleRate) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(variableMultisampleRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritedQueries) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures),
            "::",
            stringify!(inheritedQueries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkPhysicalDeviceLimits {
    pub maxImageDimension1D: u32,
    pub maxImageDimension2D: u32,
    pub maxImageDimension3D: u32,
    pub maxImageDimensionCube: u32,
    pub maxImageArrayLayers: u32,
    pub maxTexelBufferElements: u32,
    pub maxUniformBufferRange: u32,
    pub maxStorageBufferRange: u32,
    pub maxPushConstantsSize: u32,
    pub maxMemoryAllocationCount: u32,
    pub maxSamplerAllocationCount: u32,
    pub bufferImageGranularity: VkDeviceSize,
    pub sparseAddressSpaceSize: VkDeviceSize,
    pub maxBoundDescriptorSets: u32,
    pub maxPerStageDescriptorSamplers: u32,
    pub maxPerStageDescriptorUniformBuffers: u32,
    pub maxPerStageDescriptorStorageBuffers: u32,
    pub maxPerStageDescriptorSampledImages: u32,
    pub maxPerStageDescriptorStorageImages: u32,
    pub maxPerStageDescriptorInputAttachments: u32,
    pub maxPerStageResources: u32,
    pub maxDescriptorSetSamplers: u32,
    pub maxDescriptorSetUniformBuffers: u32,
    pub maxDescriptorSetUniformBuffersDynamic: u32,
    pub maxDescriptorSetStorageBuffers: u32,
    pub maxDescriptorSetStorageBuffersDynamic: u32,
    pub maxDescriptorSetSampledImages: u32,
    pub maxDescriptorSetStorageImages: u32,
    pub maxDescriptorSetInputAttachments: u32,
    pub maxVertexInputAttributes: u32,
    pub maxVertexInputBindings: u32,
    pub maxVertexInputAttributeOffset: u32,
    pub maxVertexInputBindingStride: u32,
    pub maxVertexOutputComponents: u32,
    pub maxTessellationGenerationLevel: u32,
    pub maxTessellationPatchSize: u32,
    pub maxTessellationControlPerVertexInputComponents: u32,
    pub maxTessellationControlPerVertexOutputComponents: u32,
    pub maxTessellationControlPerPatchOutputComponents: u32,
    pub maxTessellationControlTotalOutputComponents: u32,
    pub maxTessellationEvaluationInputComponents: u32,
    pub maxTessellationEvaluationOutputComponents: u32,
    pub maxGeometryShaderInvocations: u32,
    pub maxGeometryInputComponents: u32,
    pub maxGeometryOutputComponents: u32,
    pub maxGeometryOutputVertices: u32,
    pub maxGeometryTotalOutputComponents: u32,
    pub maxFragmentInputComponents: u32,
    pub maxFragmentOutputAttachments: u32,
    pub maxFragmentDualSrcAttachments: u32,
    pub maxFragmentCombinedOutputResources: u32,
    pub maxComputeSharedMemorySize: u32,
    pub maxComputeWorkGroupCount: [u32; 3usize],
    pub maxComputeWorkGroupInvocations: u32,
    pub maxComputeWorkGroupSize: [u32; 3usize],
    pub subPixelPrecisionBits: u32,
    pub subTexelPrecisionBits: u32,
    pub mipmapPrecisionBits: u32,
    pub maxDrawIndexedIndexValue: u32,
    pub maxDrawIndirectCount: u32,
    pub maxSamplerLodBias: f32,
    pub maxSamplerAnisotropy: f32,
    pub maxViewports: u32,
    pub maxViewportDimensions: [u32; 2usize],
    pub viewportBoundsRange: [f32; 2usize],
    pub viewportSubPixelBits: u32,
    pub minMemoryMapAlignment: usize,
    pub minTexelBufferOffsetAlignment: VkDeviceSize,
    pub minUniformBufferOffsetAlignment: VkDeviceSize,
    pub minStorageBufferOffsetAlignment: VkDeviceSize,
    pub minTexelOffset: i32,
    pub maxTexelOffset: u32,
    pub minTexelGatherOffset: i32,
    pub maxTexelGatherOffset: u32,
    pub minInterpolationOffset: f32,
    pub maxInterpolationOffset: f32,
    pub subPixelInterpolationOffsetBits: u32,
    pub maxFramebufferWidth: u32,
    pub maxFramebufferHeight: u32,
    pub maxFramebufferLayers: u32,
    pub framebufferColorSampleCounts: VkSampleCountFlags,
    pub framebufferDepthSampleCounts: VkSampleCountFlags,
    pub framebufferStencilSampleCounts: VkSampleCountFlags,
    pub framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
    pub maxColorAttachments: u32,
    pub sampledImageColorSampleCounts: VkSampleCountFlags,
    pub sampledImageIntegerSampleCounts: VkSampleCountFlags,
    pub sampledImageDepthSampleCounts: VkSampleCountFlags,
    pub sampledImageStencilSampleCounts: VkSampleCountFlags,
    pub storageImageSampleCounts: VkSampleCountFlags,
    pub maxSampleMaskWords: u32,
    pub timestampComputeAndGraphics: VkBool32,
    pub timestampPeriod: f32,
    pub maxClipDistances: u32,
    pub maxCullDistances: u32,
    pub maxCombinedClipAndCullDistances: u32,
    pub discreteQueuePriorities: u32,
    pub pointSizeRange: [f32; 2usize],
    pub lineWidthRange: [f32; 2usize],
    pub pointSizeGranularity: f32,
    pub lineWidthGranularity: f32,
    pub strictLines: VkBool32,
    pub standardSampleLocations: VkBool32,
    pub optimalBufferCopyOffsetAlignment: VkDeviceSize,
    pub optimalBufferCopyRowPitchAlignment: VkDeviceSize,
    pub nonCoherentAtomSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceLimits() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceLimits> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceLimits>(),
        504usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceLimits))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceLimits>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceLimits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageDimension1D) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxImageDimension1D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageDimension2D) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxImageDimension2D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageDimension3D) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxImageDimension3D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageDimensionCube) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxImageDimensionCube)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageArrayLayers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxImageArrayLayers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexelBufferElements) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTexelBufferElements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxUniformBufferRange) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxUniformBufferRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxStorageBufferRange) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxStorageBufferRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPushConstantsSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPushConstantsSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMemoryAllocationCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxMemoryAllocationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSamplerAllocationCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxSamplerAllocationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferImageGranularity) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(bufferImageGranularity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseAddressSpaceSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(sparseAddressSpaceSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBoundDescriptorSets) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxBoundDescriptorSets)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorSamplers) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorSamplers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUniformBuffers) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorStorageBuffers) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorSampledImages) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorStorageImages) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorInputAttachments) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageDescriptorInputAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPerStageResources) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxPerStageResources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDescriptorSetSamplers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetSamplers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUniformBuffers) as usize - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUniformBuffersDynamic) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetUniformBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetStorageBuffers) as usize - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetStorageBuffersDynamic) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetStorageBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetSampledImages) as usize - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetStorageImages) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetInputAttachments) as usize - ptr as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDescriptorSetInputAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVertexInputAttributes) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxVertexInputAttributes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVertexInputBindings) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxVertexInputBindings)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxVertexInputAttributeOffset) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxVertexInputAttributeOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVertexInputBindingStride) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxVertexInputBindingStride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVertexOutputComponents) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxVertexOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTessellationGenerationLevel) as usize - ptr as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationGenerationLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTessellationPatchSize) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationPatchSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTessellationControlPerVertexInputComponents) as usize
                - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationControlPerVertexInputComponents)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTessellationControlPerVertexOutputComponents) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationControlPerVertexOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTessellationControlPerPatchOutputComponents) as usize
                - ptr as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationControlPerPatchOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTessellationControlTotalOutputComponents) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationControlTotalOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTessellationEvaluationInputComponents) as usize
                - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationEvaluationInputComponents)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTessellationEvaluationOutputComponents) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTessellationEvaluationOutputComponents)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxGeometryShaderInvocations) as usize - ptr as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxGeometryShaderInvocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGeometryInputComponents) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxGeometryInputComponents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGeometryOutputComponents) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxGeometryOutputComponents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGeometryOutputVertices) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxGeometryOutputVertices)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxGeometryTotalOutputComponents) as usize - ptr as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxGeometryTotalOutputComponents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFragmentInputComponents) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFragmentInputComponents)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxFragmentOutputAttachments) as usize - ptr as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFragmentOutputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxFragmentDualSrcAttachments) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFragmentDualSrcAttachments)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxFragmentCombinedOutputResources) as usize - ptr as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFragmentCombinedOutputResources)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxComputeSharedMemorySize) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxComputeSharedMemorySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxComputeWorkGroupCount) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxComputeWorkGroupCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxComputeWorkGroupInvocations) as usize - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxComputeWorkGroupInvocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxComputeWorkGroupSize) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxComputeWorkGroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subPixelPrecisionBits) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(subPixelPrecisionBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subTexelPrecisionBits) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(subTexelPrecisionBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmapPrecisionBits) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(mipmapPrecisionBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDrawIndexedIndexValue) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDrawIndexedIndexValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDrawIndirectCount) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxDrawIndirectCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSamplerLodBias) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxSamplerLodBias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSamplerAnisotropy) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxSamplerAnisotropy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxViewports) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxViewports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxViewportDimensions) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxViewportDimensions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewportBoundsRange) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(viewportBoundsRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewportSubPixelBits) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(viewportSubPixelBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minMemoryMapAlignment) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minMemoryMapAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minTexelBufferOffsetAlignment) as usize - ptr as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minTexelBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minUniformBufferOffsetAlignment) as usize - ptr as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minUniformBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minStorageBufferOffsetAlignment) as usize - ptr as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minStorageBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minTexelOffset) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minTexelOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexelOffset) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTexelOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minTexelGatherOffset) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minTexelGatherOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTexelGatherOffset) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxTexelGatherOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minInterpolationOffset) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(minInterpolationOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxInterpolationOffset) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxInterpolationOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).subPixelInterpolationOffsetBits) as usize - ptr as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(subPixelInterpolationOffsetBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFramebufferWidth) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFramebufferWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFramebufferHeight) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFramebufferHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFramebufferLayers) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxFramebufferLayers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).framebufferColorSampleCounts) as usize - ptr as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(framebufferColorSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).framebufferDepthSampleCounts) as usize - ptr as usize
        },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(framebufferDepthSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).framebufferStencilSampleCounts) as usize - ptr as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(framebufferStencilSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).framebufferNoAttachmentsSampleCounts) as usize
                - ptr as usize
        },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(framebufferNoAttachmentsSampleCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxColorAttachments) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxColorAttachments)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sampledImageColorSampleCounts) as usize - ptr as usize
        },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(sampledImageColorSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sampledImageIntegerSampleCounts) as usize - ptr as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(sampledImageIntegerSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sampledImageDepthSampleCounts) as usize - ptr as usize
        },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(sampledImageDepthSampleCounts)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sampledImageStencilSampleCounts) as usize - ptr as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(sampledImageStencilSampleCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageImageSampleCounts) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(storageImageSampleCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSampleMaskWords) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxSampleMaskWords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestampComputeAndGraphics) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(timestampComputeAndGraphics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestampPeriod) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(timestampPeriod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxClipDistances) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxClipDistances)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxCullDistances) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxCullDistances)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxCombinedClipAndCullDistances) as usize - ptr as usize
        },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(maxCombinedClipAndCullDistances)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discreteQueuePriorities) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(discreteQueuePriorities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointSizeRange) as usize - ptr as usize },
        444usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(pointSizeRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineWidthRange) as usize - ptr as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(lineWidthRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointSizeGranularity) as usize - ptr as usize },
        460usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(pointSizeGranularity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineWidthGranularity) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(lineWidthGranularity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strictLines) as usize - ptr as usize },
        468usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(strictLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).standardSampleLocations) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(standardSampleLocations)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optimalBufferCopyOffsetAlignment) as usize - ptr as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(optimalBufferCopyOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).optimalBufferCopyRowPitchAlignment) as usize - ptr as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(optimalBufferCopyRowPitchAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonCoherentAtomSize) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLimits),
            "::",
            stringify!(nonCoherentAtomSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMemoryProperties {
    pub memoryTypeCount: u32,
    pub memoryTypes: [VkMemoryType; 32usize],
    pub memoryHeapCount: u32,
    pub memoryHeaps: [VkMemoryHeap; 16usize],
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMemoryProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryProperties>(),
        520usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceMemoryProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryTypeCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryTypeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryTypes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryHeapCount) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryHeapCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryHeaps) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties),
            "::",
            stringify!(memoryHeaps)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSparseProperties {
    pub residencyStandard2DBlockShape: VkBool32,
    pub residencyStandard2DMultisampleBlockShape: VkBool32,
    pub residencyStandard3DBlockShape: VkBool32,
    pub residencyAlignedMipSize: VkBool32,
    pub residencyNonResidentStrict: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSparseProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSparseProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSparseProperties>(),
        20usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceSparseProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSparseProperties>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSparseProperties)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).residencyStandard2DBlockShape) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseProperties),
            "::",
            stringify!(residencyStandard2DBlockShape)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).residencyStandard2DMultisampleBlockShape) as usize
                - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseProperties),
            "::",
            stringify!(residencyStandard2DMultisampleBlockShape)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).residencyStandard3DBlockShape) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseProperties),
            "::",
            stringify!(residencyStandard3DBlockShape)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).residencyAlignedMipSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseProperties),
            "::",
            stringify!(residencyAlignedMipSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).residencyNonResidentStrict) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseProperties),
            "::",
            stringify!(residencyNonResidentStrict)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkPhysicalDeviceProperties {
    pub apiVersion: u32,
    pub driverVersion: u32,
    pub vendorID: u32,
    pub deviceID: u32,
    pub deviceType: VkPhysicalDeviceType,
    pub deviceName: [::std::os::raw::c_char; 256usize],
    pub pipelineCacheUUID: [u8; 16usize],
    pub limits: VkPhysicalDeviceLimits,
    pub sparseProperties: VkPhysicalDeviceSparseProperties,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceProperties>(),
        824usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apiVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(apiVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverVersion) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(driverVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(vendorID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceID) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(deviceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(deviceType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceName) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(deviceName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineCacheUUID) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(pipelineCacheUUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limits) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(limits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseProperties) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties),
            "::",
            stringify!(sparseProperties)
        )
    );
}
impl Default for VkPhysicalDeviceProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueueFamilyProperties {
    pub queueFlags: VkQueueFlags,
    pub queueCount: u32,
    pub timestampValidBits: u32,
    pub minImageTransferGranularity: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkQueueFamilyProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueueFamilyProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueueFamilyProperties>(),
        24usize,
        concat!("Size of: ", stringify!(VkQueueFamilyProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueueFamilyProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkQueueFamilyProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties),
            "::",
            stringify!(queueFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties),
            "::",
            stringify!(queueCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestampValidBits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties),
            "::",
            stringify!(timestampValidBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minImageTransferGranularity) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties),
            "::",
            stringify!(minImageTransferGranularity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceQueueCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceQueueCreateFlags,
    pub queueFamilyIndex: u32,
    pub queueCount: u32,
    pub pQueuePriorities: *const f32,
}
#[test]
fn bindgen_test_layout_VkDeviceQueueCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceQueueCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceQueueCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkDeviceQueueCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceQueueCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceQueueCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyIndex) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(queueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(queueCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pQueuePriorities) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueCreateInfo),
            "::",
            stringify!(pQueuePriorities)
        )
    );
}
impl Default for VkDeviceQueueCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceCreateFlags,
    pub queueCreateInfoCount: u32,
    pub pQueueCreateInfos: *const VkDeviceQueueCreateInfo,
    pub enabledLayerCount: u32,
    pub ppEnabledLayerNames: *const *const ::std::os::raw::c_char,
    pub enabledExtensionCount: u32,
    pub ppEnabledExtensionNames: *const *const ::std::os::raw::c_char,
    pub pEnabledFeatures: *const VkPhysicalDeviceFeatures,
}
#[test]
fn bindgen_test_layout_VkDeviceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceCreateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceCreateInfo>(),
        72usize,
        concat!("Size of: ", stringify!(VkDeviceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueCreateInfoCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(queueCreateInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pQueueCreateInfos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(pQueueCreateInfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabledLayerCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(enabledLayerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppEnabledLayerNames) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(ppEnabledLayerNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabledExtensionCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(enabledExtensionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppEnabledExtensionNames) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(ppEnabledExtensionNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pEnabledFeatures) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceCreateInfo),
            "::",
            stringify!(pEnabledFeatures)
        )
    );
}
impl Default for VkDeviceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExtensionProperties {
    pub extensionName: [::std::os::raw::c_char; 256usize],
    pub specVersion: u32,
}
#[test]
fn bindgen_test_layout_VkExtensionProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkExtensionProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExtensionProperties>(),
        260usize,
        concat!("Size of: ", stringify!(VkExtensionProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExtensionProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkExtensionProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extensionName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtensionProperties),
            "::",
            stringify!(extensionName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specVersion) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExtensionProperties),
            "::",
            stringify!(specVersion)
        )
    );
}
impl Default for VkExtensionProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkLayerProperties {
    pub layerName: [::std::os::raw::c_char; 256usize],
    pub specVersion: u32,
    pub implementationVersion: u32,
    pub description: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_VkLayerProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerProperties> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerProperties>(),
        520usize,
        concat!("Size of: ", stringify!(VkLayerProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkLayerProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerProperties),
            "::",
            stringify!(layerName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specVersion) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerProperties),
            "::",
            stringify!(specVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).implementationVersion) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerProperties),
            "::",
            stringify!(implementationVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerProperties),
            "::",
            stringify!(description)
        )
    );
}
impl Default for VkLayerProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub pWaitDstStageMask: *const VkPipelineStageFlags,
    pub commandBufferCount: u32,
    pub pCommandBuffers: *const VkCommandBuffer,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphores: *const VkSemaphore,
}
#[test]
fn bindgen_test_layout_VkSubmitInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubmitInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubmitInfo>(),
        72usize,
        concat!("Size of: ", stringify!(VkSubmitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubmitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubmitInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitSemaphoreCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(waitSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWaitSemaphores) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(pWaitSemaphores)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWaitDstStageMask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(pWaitDstStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandBufferCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(commandBufferCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCommandBuffers) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(pCommandBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signalSemaphoreCount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(signalSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSignalSemaphores) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo),
            "::",
            stringify!(pSignalSemaphores)
        )
    );
}
impl Default for VkSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMappedMemoryRange {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkMappedMemoryRange() {
    const UNINIT: ::std::mem::MaybeUninit<VkMappedMemoryRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMappedMemoryRange>(),
        40usize,
        concat!("Size of: ", stringify!(VkMappedMemoryRange))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMappedMemoryRange>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMappedMemoryRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMappedMemoryRange),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMappedMemoryRange),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMappedMemoryRange),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMappedMemoryRange),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMappedMemoryRange),
            "::",
            stringify!(size)
        )
    );
}
impl Default for VkMappedMemoryRange {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub allocationSize: VkDeviceSize,
    pub memoryTypeIndex: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryAllocateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryAllocateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryAllocateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkMemoryAllocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryAllocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryAllocateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocationSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateInfo),
            "::",
            stringify!(allocationSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryTypeIndex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateInfo),
            "::",
            stringify!(memoryTypeIndex)
        )
    );
}
impl Default for VkMemoryAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryRequirements {
    pub size: VkDeviceSize,
    pub alignment: VkDeviceSize,
    pub memoryTypeBits: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryRequirements() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryRequirements> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryRequirements>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryRequirements))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryRequirements>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryRequirements))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryTypeBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements),
            "::",
            stringify!(memoryTypeBits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSparseMemoryBind {
    pub resourceOffset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub flags: VkSparseMemoryBindFlags,
}
#[test]
fn bindgen_test_layout_VkSparseMemoryBind() {
    const UNINIT: ::std::mem::MaybeUninit<VkSparseMemoryBind> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSparseMemoryBind>(),
        40usize,
        concat!("Size of: ", stringify!(VkSparseMemoryBind))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseMemoryBind>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseMemoryBind))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceOffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseMemoryBind),
            "::",
            stringify!(resourceOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseMemoryBind),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseMemoryBind),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseMemoryBind),
            "::",
            stringify!(memoryOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseMemoryBind),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkSparseMemoryBind {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSparseBufferMemoryBindInfo {
    pub buffer: VkBuffer,
    pub bindCount: u32,
    pub pBinds: *const VkSparseMemoryBind,
}
#[test]
fn bindgen_test_layout_VkSparseBufferMemoryBindInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSparseBufferMemoryBindInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSparseBufferMemoryBindInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSparseBufferMemoryBindInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseBufferMemoryBindInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseBufferMemoryBindInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseBufferMemoryBindInfo),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseBufferMemoryBindInfo),
            "::",
            stringify!(bindCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBinds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseBufferMemoryBindInfo),
            "::",
            stringify!(pBinds)
        )
    );
}
impl Default for VkSparseBufferMemoryBindInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSparseImageOpaqueMemoryBindInfo {
    pub image: VkImage,
    pub bindCount: u32,
    pub pBinds: *const VkSparseMemoryBind,
}
#[test]
fn bindgen_test_layout_VkSparseImageOpaqueMemoryBindInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSparseImageOpaqueMemoryBindInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageOpaqueMemoryBindInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSparseImageOpaqueMemoryBindInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageOpaqueMemoryBindInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSparseImageOpaqueMemoryBindInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageOpaqueMemoryBindInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageOpaqueMemoryBindInfo),
            "::",
            stringify!(bindCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBinds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageOpaqueMemoryBindInfo),
            "::",
            stringify!(pBinds)
        )
    );
}
impl Default for VkSparseImageOpaqueMemoryBindInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageSubresource {
    pub aspectMask: VkImageAspectFlags,
    pub mipLevel: u32,
    pub arrayLayer: u32,
}
#[test]
fn bindgen_test_layout_VkImageSubresource() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageSubresource> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageSubresource>(),
        12usize,
        concat!("Size of: ", stringify!(VkImageSubresource))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSubresource>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageSubresource))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspectMask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresource),
            "::",
            stringify!(aspectMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipLevel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresource),
            "::",
            stringify!(mipLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayLayer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresource),
            "::",
            stringify!(arrayLayer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSparseImageMemoryBind {
    pub subresource: VkImageSubresource,
    pub offset: VkOffset3D,
    pub extent: VkExtent3D,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub flags: VkSparseMemoryBindFlags,
}
#[test]
fn bindgen_test_layout_VkSparseImageMemoryBind() {
    const UNINIT: ::std::mem::MaybeUninit<VkSparseImageMemoryBind> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageMemoryBind>(),
        64usize,
        concat!("Size of: ", stringify!(VkSparseImageMemoryBind))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageMemoryBind>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseImageMemoryBind))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subresource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(subresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryOffset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(memoryOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBind),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkSparseImageMemoryBind {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSparseImageMemoryBindInfo {
    pub image: VkImage,
    pub bindCount: u32,
    pub pBinds: *const VkSparseImageMemoryBind,
}
#[test]
fn bindgen_test_layout_VkSparseImageMemoryBindInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSparseImageMemoryBindInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageMemoryBindInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSparseImageMemoryBindInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageMemoryBindInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseImageMemoryBindInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBindInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBindInfo),
            "::",
            stringify!(bindCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBinds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryBindInfo),
            "::",
            stringify!(pBinds)
        )
    );
}
impl Default for VkSparseImageMemoryBindInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindSparseInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub bufferBindCount: u32,
    pub pBufferBinds: *const VkSparseBufferMemoryBindInfo,
    pub imageOpaqueBindCount: u32,
    pub pImageOpaqueBinds: *const VkSparseImageOpaqueMemoryBindInfo,
    pub imageBindCount: u32,
    pub pImageBinds: *const VkSparseImageMemoryBindInfo,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphores: *const VkSemaphore,
}
#[test]
fn bindgen_test_layout_VkBindSparseInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindSparseInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindSparseInfo>(),
        96usize,
        concat!("Size of: ", stringify!(VkBindSparseInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindSparseInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindSparseInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitSemaphoreCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(waitSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWaitSemaphores) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pWaitSemaphores)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferBindCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(bufferBindCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBufferBinds) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pBufferBinds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageOpaqueBindCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(imageOpaqueBindCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pImageOpaqueBinds) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pImageOpaqueBinds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageBindCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(imageBindCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pImageBinds) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pImageBinds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signalSemaphoreCount) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(signalSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSignalSemaphores) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindSparseInfo),
            "::",
            stringify!(pSignalSemaphores)
        )
    );
}
impl Default for VkBindSparseInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSparseImageFormatProperties {
    pub aspectMask: VkImageAspectFlags,
    pub imageGranularity: VkExtent3D,
    pub flags: VkSparseImageFormatFlags,
}
#[test]
fn bindgen_test_layout_VkSparseImageFormatProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkSparseImageFormatProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageFormatProperties>(),
        20usize,
        concat!("Size of: ", stringify!(VkSparseImageFormatProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageFormatProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSparseImageFormatProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspectMask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties),
            "::",
            stringify!(aspectMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageGranularity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties),
            "::",
            stringify!(imageGranularity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSparseImageMemoryRequirements {
    pub formatProperties: VkSparseImageFormatProperties,
    pub imageMipTailFirstLod: u32,
    pub imageMipTailSize: VkDeviceSize,
    pub imageMipTailOffset: VkDeviceSize,
    pub imageMipTailStride: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkSparseImageMemoryRequirements() {
    const UNINIT: ::std::mem::MaybeUninit<VkSparseImageMemoryRequirements> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageMemoryRequirements>(),
        48usize,
        concat!("Size of: ", stringify!(VkSparseImageMemoryRequirements))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageMemoryRequirements>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseImageMemoryRequirements))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatProperties) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements),
            "::",
            stringify!(formatProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMipTailFirstLod) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements),
            "::",
            stringify!(imageMipTailFirstLod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMipTailSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements),
            "::",
            stringify!(imageMipTailSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMipTailOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements),
            "::",
            stringify!(imageMipTailOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMipTailStride) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements),
            "::",
            stringify!(imageMipTailStride)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFenceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkFenceCreateFlags,
}
#[test]
fn bindgen_test_layout_VkFenceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkFenceCreateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFenceCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkFenceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFenceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFenceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceCreateInfo),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkFenceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSemaphoreCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSemaphoreCreateFlags,
}
#[test]
fn bindgen_test_layout_VkSemaphoreCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSemaphoreCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSemaphoreCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreCreateInfo),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkSemaphoreCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkEventCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkEventCreateFlags,
}
#[test]
fn bindgen_test_layout_VkEventCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkEventCreateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkEventCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkEventCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkEventCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkEventCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEventCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEventCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEventCreateInfo),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkEventCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueryPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkQueryPoolCreateFlags,
    pub queryType: VkQueryType,
    pub queryCount: u32,
    pub pipelineStatistics: VkQueryPipelineStatisticFlags,
}
#[test]
fn bindgen_test_layout_VkQueryPoolCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueryPoolCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueryPoolCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkQueryPoolCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueryPoolCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkQueryPoolCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queryType) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(queryType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queryCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(queryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineStatistics) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolCreateInfo),
            "::",
            stringify!(pipelineStatistics)
        )
    );
}
impl Default for VkQueryPoolCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkBufferCreateFlags,
    pub size: VkDeviceSize,
    pub usage: VkBufferUsageFlags,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkBufferCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferCreateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferCreateInfo>(),
        56usize,
        concat!("Size of: ", stringify!(VkBufferCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharingMode) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(sharingMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyIndexCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(queueFamilyIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pQueueFamilyIndices) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCreateInfo),
            "::",
            stringify!(pQueueFamilyIndices)
        )
    );
}
impl Default for VkBufferCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferViewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkBufferViewCreateFlags,
    pub buffer: VkBuffer,
    pub format: VkFormat,
    pub offset: VkDeviceSize,
    pub range: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBufferViewCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferViewCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferViewCreateInfo>(),
        56usize,
        concat!("Size of: ", stringify!(VkBufferViewCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferViewCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferViewCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferViewCreateInfo),
            "::",
            stringify!(range)
        )
    );
}
impl Default for VkBufferViewCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageCreateFlags,
    pub imageType: VkImageType,
    pub format: VkFormat,
    pub extent: VkExtent3D,
    pub mipLevels: u32,
    pub arrayLayers: u32,
    pub samples: VkSampleCountFlagBits,
    pub tiling: VkImageTiling,
    pub usage: VkImageUsageFlags,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
    pub initialLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkImageCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageCreateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageCreateInfo>(),
        88usize,
        concat!("Size of: ", stringify!(VkImageCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageType) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(imageType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipLevels) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(mipLevels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayLayers) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(arrayLayers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samples) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiling) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(tiling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharingMode) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(sharingMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyIndexCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(queueFamilyIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pQueueFamilyIndices) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(pQueueFamilyIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialLayout) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCreateInfo),
            "::",
            stringify!(initialLayout)
        )
    );
}
impl Default for VkImageCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubresourceLayout {
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub rowPitch: VkDeviceSize,
    pub arrayPitch: VkDeviceSize,
    pub depthPitch: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkSubresourceLayout() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubresourceLayout> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubresourceLayout>(),
        40usize,
        concat!("Size of: ", stringify!(VkSubresourceLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubresourceLayout>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubresourceLayout))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowPitch) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout),
            "::",
            stringify!(rowPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayPitch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout),
            "::",
            stringify!(arrayPitch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthPitch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout),
            "::",
            stringify!(depthPitch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkComponentMapping {
    pub r: VkComponentSwizzle,
    pub g: VkComponentSwizzle,
    pub b: VkComponentSwizzle,
    pub a: VkComponentSwizzle,
}
#[test]
fn bindgen_test_layout_VkComponentMapping() {
    const UNINIT: ::std::mem::MaybeUninit<VkComponentMapping> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkComponentMapping>(),
        16usize,
        concat!("Size of: ", stringify!(VkComponentMapping))
    );
    assert_eq!(
        ::std::mem::align_of::<VkComponentMapping>(),
        4usize,
        concat!("Alignment of ", stringify!(VkComponentMapping))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComponentMapping),
            "::",
            stringify!(a)
        )
    );
}
impl Default for VkComponentMapping {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageViewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageViewCreateFlags,
    pub image: VkImage,
    pub viewType: VkImageViewType,
    pub format: VkFormat,
    pub components: VkComponentMapping,
    pub subresourceRange: VkImageSubresourceRange,
}
#[test]
fn bindgen_test_layout_VkImageViewCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageViewCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageViewCreateInfo>(),
        80usize,
        concat!("Size of: ", stringify!(VkImageViewCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(viewType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).components) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(components)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subresourceRange) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCreateInfo),
            "::",
            stringify!(subresourceRange)
        )
    );
}
impl Default for VkImageViewCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkShaderModuleCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkShaderModuleCreateFlags,
    pub codeSize: usize,
    pub pCode: *const u32,
}
#[test]
fn bindgen_test_layout_VkShaderModuleCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkShaderModuleCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkShaderModuleCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkShaderModuleCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkShaderModuleCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkShaderModuleCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codeSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleCreateInfo),
            "::",
            stringify!(codeSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleCreateInfo),
            "::",
            stringify!(pCode)
        )
    );
}
impl Default for VkShaderModuleCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineCacheCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCacheCreateFlags,
    pub initialDataSize: usize,
    pub pInitialData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkPipelineCacheCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineCacheCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCacheCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkPipelineCacheCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCacheCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineCacheCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialDataSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheCreateInfo),
            "::",
            stringify!(initialDataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitialData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCacheCreateInfo),
            "::",
            stringify!(pInitialData)
        )
    );
}
impl Default for VkPipelineCacheCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSpecializationMapEntry {
    pub constantID: u32,
    pub offset: u32,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_VkSpecializationMapEntry() {
    const UNINIT: ::std::mem::MaybeUninit<VkSpecializationMapEntry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSpecializationMapEntry>(),
        16usize,
        concat!("Size of: ", stringify!(VkSpecializationMapEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSpecializationMapEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSpecializationMapEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constantID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationMapEntry),
            "::",
            stringify!(constantID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationMapEntry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationMapEntry),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSpecializationInfo {
    pub mapEntryCount: u32,
    pub pMapEntries: *const VkSpecializationMapEntry,
    pub dataSize: usize,
    pub pData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkSpecializationInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSpecializationInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSpecializationInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkSpecializationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSpecializationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSpecializationInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapEntryCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationInfo),
            "::",
            stringify!(mapEntryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMapEntries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationInfo),
            "::",
            stringify!(pMapEntries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationInfo),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSpecializationInfo),
            "::",
            stringify!(pData)
        )
    );
}
impl Default for VkSpecializationInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineShaderStageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineShaderStageCreateFlags,
    pub stage: VkShaderStageFlagBits,
    pub module: VkShaderModule,
    pub pName: *const ::std::os::raw::c_char,
    pub pSpecializationInfo: *const VkSpecializationInfo,
}
#[test]
fn bindgen_test_layout_VkPipelineShaderStageCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineShaderStageCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineShaderStageCreateInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkPipelineShaderStageCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineShaderStageCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineShaderStageCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(pName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSpecializationInfo) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageCreateInfo),
            "::",
            stringify!(pSpecializationInfo)
        )
    );
}
impl Default for VkPipelineShaderStageCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkComputePipelineCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stage: VkPipelineShaderStageCreateInfo,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[test]
fn bindgen_test_layout_VkComputePipelineCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkComputePipelineCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkComputePipelineCreateInfo>(),
        96usize,
        concat!("Size of: ", stringify!(VkComputePipelineCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkComputePipelineCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkComputePipelineCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basePipelineHandle) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(basePipelineHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basePipelineIndex) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkComputePipelineCreateInfo),
            "::",
            stringify!(basePipelineIndex)
        )
    );
}
impl Default for VkComputePipelineCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVertexInputBindingDescription {
    pub binding: u32,
    pub stride: u32,
    pub inputRate: VkVertexInputRate,
}
#[test]
fn bindgen_test_layout_VkVertexInputBindingDescription() {
    const UNINIT: ::std::mem::MaybeUninit<VkVertexInputBindingDescription> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVertexInputBindingDescription>(),
        12usize,
        concat!("Size of: ", stringify!(VkVertexInputBindingDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVertexInputBindingDescription>(),
        4usize,
        concat!("Alignment of ", stringify!(VkVertexInputBindingDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputRate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription),
            "::",
            stringify!(inputRate)
        )
    );
}
impl Default for VkVertexInputBindingDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVertexInputAttributeDescription {
    pub location: u32,
    pub binding: u32,
    pub format: VkFormat,
    pub offset: u32,
}
#[test]
fn bindgen_test_layout_VkVertexInputAttributeDescription() {
    const UNINIT: ::std::mem::MaybeUninit<VkVertexInputAttributeDescription> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVertexInputAttributeDescription>(),
        16usize,
        concat!("Size of: ", stringify!(VkVertexInputAttributeDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVertexInputAttributeDescription>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkVertexInputAttributeDescription)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription),
            "::",
            stringify!(offset)
        )
    );
}
impl Default for VkVertexInputAttributeDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineVertexInputStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineVertexInputStateCreateFlags,
    pub vertexBindingDescriptionCount: u32,
    pub pVertexBindingDescriptions: *const VkVertexInputBindingDescription,
    pub vertexAttributeDescriptionCount: u32,
    pub pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription,
}
#[test]
fn bindgen_test_layout_VkPipelineVertexInputStateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineVertexInputStateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineVertexInputStateCreateInfo>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineVertexInputStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineVertexInputStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineVertexInputStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vertexBindingDescriptionCount) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(vertexBindingDescriptionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVertexBindingDescriptions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(pVertexBindingDescriptions)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vertexAttributeDescriptionCount) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(vertexAttributeDescriptionCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pVertexAttributeDescriptions) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputStateCreateInfo),
            "::",
            stringify!(pVertexAttributeDescriptions)
        )
    );
}
impl Default for VkPipelineVertexInputStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineInputAssemblyStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineInputAssemblyStateCreateFlags,
    pub topology: VkPrimitiveTopology,
    pub primitiveRestartEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPipelineInputAssemblyStateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineInputAssemblyStateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineInputAssemblyStateCreateInfo>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineInputAssemblyStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topology) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo),
            "::",
            stringify!(topology)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitiveRestartEnable) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInputAssemblyStateCreateInfo),
            "::",
            stringify!(primitiveRestartEnable)
        )
    );
}
impl Default for VkPipelineInputAssemblyStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineTessellationStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineTessellationStateCreateFlags,
    pub patchControlPoints: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineTessellationStateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineTessellationStateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineTessellationStateCreateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineTessellationStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineTessellationStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineTessellationStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).patchControlPoints) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationStateCreateInfo),
            "::",
            stringify!(patchControlPoints)
        )
    );
}
impl Default for VkPipelineTessellationStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkViewport {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
    pub minDepth: f32,
    pub maxDepth: f32,
}
#[test]
fn bindgen_test_layout_VkViewport() {
    const UNINIT: ::std::mem::MaybeUninit<VkViewport> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkViewport>(),
        24usize,
        concat!("Size of: ", stringify!(VkViewport))
    );
    assert_eq!(
        ::std::mem::align_of::<VkViewport>(),
        4usize,
        concat!("Alignment of ", stringify!(VkViewport))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minDepth) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(minDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDepth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewport),
            "::",
            stringify!(maxDepth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineViewportStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineViewportStateCreateFlags,
    pub viewportCount: u32,
    pub pViewports: *const VkViewport,
    pub scissorCount: u32,
    pub pScissors: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportStateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineViewportStateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportStateCreateInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkPipelineViewportStateCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewportCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(viewportCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pViewports) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(pViewports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scissorCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(scissorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pScissors) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportStateCreateInfo),
            "::",
            stringify!(pScissors)
        )
    );
}
impl Default for VkPipelineViewportStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkPipelineRasterizationStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationStateCreateFlags,
    pub depthClampEnable: VkBool32,
    pub rasterizerDiscardEnable: VkBool32,
    pub polygonMode: VkPolygonMode,
    pub cullMode: VkCullModeFlags,
    pub frontFace: VkFrontFace,
    pub depthBiasEnable: VkBool32,
    pub depthBiasConstantFactor: f32,
    pub depthBiasClamp: f32,
    pub depthBiasSlopeFactor: f32,
    pub lineWidth: f32,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationStateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineRasterizationStateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationStateCreateInfo>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthClampEnable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(depthClampEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rasterizerDiscardEnable) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(rasterizerDiscardEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).polygonMode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(polygonMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cullMode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(cullMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frontFace) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(frontFace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthBiasEnable) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(depthBiasEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthBiasConstantFactor) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(depthBiasConstantFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthBiasClamp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(depthBiasClamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthBiasSlopeFactor) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(depthBiasSlopeFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineWidth) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateCreateInfo),
            "::",
            stringify!(lineWidth)
        )
    );
}
impl Default for VkPipelineRasterizationStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkPipelineMultisampleStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineMultisampleStateCreateFlags,
    pub rasterizationSamples: VkSampleCountFlagBits,
    pub sampleShadingEnable: VkBool32,
    pub minSampleShading: f32,
    pub pSampleMask: *const VkSampleMask,
    pub alphaToCoverageEnable: VkBool32,
    pub alphaToOneEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPipelineMultisampleStateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineMultisampleStateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineMultisampleStateCreateInfo>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineMultisampleStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineMultisampleStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineMultisampleStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rasterizationSamples) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(rasterizationSamples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleShadingEnable) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(sampleShadingEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minSampleShading) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(minSampleShading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSampleMask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(pSampleMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alphaToCoverageEnable) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(alphaToCoverageEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alphaToOneEnable) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineMultisampleStateCreateInfo),
            "::",
            stringify!(alphaToOneEnable)
        )
    );
}
impl Default for VkPipelineMultisampleStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkStencilOpState {
    pub failOp: VkStencilOp,
    pub passOp: VkStencilOp,
    pub depthFailOp: VkStencilOp,
    pub compareOp: VkCompareOp,
    pub compareMask: u32,
    pub writeMask: u32,
    pub reference: u32,
}
#[test]
fn bindgen_test_layout_VkStencilOpState() {
    const UNINIT: ::std::mem::MaybeUninit<VkStencilOpState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkStencilOpState>(),
        28usize,
        concat!("Size of: ", stringify!(VkStencilOpState))
    );
    assert_eq!(
        ::std::mem::align_of::<VkStencilOpState>(),
        4usize,
        concat!("Alignment of ", stringify!(VkStencilOpState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).failOp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(failOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passOp) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(passOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthFailOp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(depthFailOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compareOp) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(compareOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compareMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(compareMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeMask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(writeMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStencilOpState),
            "::",
            stringify!(reference)
        )
    );
}
impl Default for VkStencilOpState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkPipelineDepthStencilStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineDepthStencilStateCreateFlags,
    pub depthTestEnable: VkBool32,
    pub depthWriteEnable: VkBool32,
    pub depthCompareOp: VkCompareOp,
    pub depthBoundsTestEnable: VkBool32,
    pub stencilTestEnable: VkBool32,
    pub front: VkStencilOpState,
    pub back: VkStencilOpState,
    pub minDepthBounds: f32,
    pub maxDepthBounds: f32,
}
#[test]
fn bindgen_test_layout_VkPipelineDepthStencilStateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineDepthStencilStateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineDepthStencilStateCreateInfo>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineDepthStencilStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineDepthStencilStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthTestEnable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(depthTestEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthWriteEnable) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(depthWriteEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthCompareOp) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(depthCompareOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthBoundsTestEnable) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(depthBoundsTestEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilTestEnable) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(stencilTestEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).front) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(front)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).back) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(back)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minDepthBounds) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(minDepthBounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDepthBounds) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDepthStencilStateCreateInfo),
            "::",
            stringify!(maxDepthBounds)
        )
    );
}
impl Default for VkPipelineDepthStencilStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineColorBlendAttachmentState {
    pub blendEnable: VkBool32,
    pub srcColorBlendFactor: VkBlendFactor,
    pub dstColorBlendFactor: VkBlendFactor,
    pub colorBlendOp: VkBlendOp,
    pub srcAlphaBlendFactor: VkBlendFactor,
    pub dstAlphaBlendFactor: VkBlendFactor,
    pub alphaBlendOp: VkBlendOp,
    pub colorWriteMask: VkColorComponentFlags,
}
#[test]
fn bindgen_test_layout_VkPipelineColorBlendAttachmentState() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineColorBlendAttachmentState> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineColorBlendAttachmentState>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelineColorBlendAttachmentState))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineColorBlendAttachmentState>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineColorBlendAttachmentState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blendEnable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(blendEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcColorBlendFactor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(srcColorBlendFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstColorBlendFactor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(dstColorBlendFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorBlendOp) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(colorBlendOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAlphaBlendFactor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(srcAlphaBlendFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAlphaBlendFactor) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(dstAlphaBlendFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alphaBlendOp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(alphaBlendOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorWriteMask) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAttachmentState),
            "::",
            stringify!(colorWriteMask)
        )
    );
}
impl Default for VkPipelineColorBlendAttachmentState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkPipelineColorBlendStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineColorBlendStateCreateFlags,
    pub logicOpEnable: VkBool32,
    pub logicOp: VkLogicOp,
    pub attachmentCount: u32,
    pub pAttachments: *const VkPipelineColorBlendAttachmentState,
    pub blendConstants: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_VkPipelineColorBlendStateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineColorBlendStateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineColorBlendStateCreateInfo>(),
        56usize,
        concat!("Size of: ", stringify!(VkPipelineColorBlendStateCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineColorBlendStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineColorBlendStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logicOpEnable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(logicOpEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logicOp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(logicOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachmentCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAttachments) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(pAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blendConstants) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendStateCreateInfo),
            "::",
            stringify!(blendConstants)
        )
    );
}
impl Default for VkPipelineColorBlendStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineDynamicStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineDynamicStateCreateFlags,
    pub dynamicStateCount: u32,
    pub pDynamicStates: *const VkDynamicState,
}
#[test]
fn bindgen_test_layout_VkPipelineDynamicStateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineDynamicStateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineDynamicStateCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelineDynamicStateCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineDynamicStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineDynamicStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDynamicStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDynamicStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDynamicStateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicStateCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDynamicStateCreateInfo),
            "::",
            stringify!(dynamicStateCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDynamicStates) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDynamicStateCreateInfo),
            "::",
            stringify!(pDynamicStates)
        )
    );
}
impl Default for VkPipelineDynamicStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkGraphicsPipelineCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pub pInputAssemblyState: *const VkPipelineInputAssemblyStateCreateInfo,
    pub pTessellationState: *const VkPipelineTessellationStateCreateInfo,
    pub pViewportState: *const VkPipelineViewportStateCreateInfo,
    pub pRasterizationState: *const VkPipelineRasterizationStateCreateInfo,
    pub pMultisampleState: *const VkPipelineMultisampleStateCreateInfo,
    pub pDepthStencilState: *const VkPipelineDepthStencilStateCreateInfo,
    pub pColorBlendState: *const VkPipelineColorBlendStateCreateInfo,
    pub pDynamicState: *const VkPipelineDynamicStateCreateInfo,
    pub layout: VkPipelineLayout,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[test]
fn bindgen_test_layout_VkGraphicsPipelineCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkGraphicsPipelineCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkGraphicsPipelineCreateInfo>(),
        144usize,
        concat!("Size of: ", stringify!(VkGraphicsPipelineCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGraphicsPipelineCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGraphicsPipelineCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stageCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(stageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStages) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pStages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVertexInputState) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pVertexInputState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputAssemblyState) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pInputAssemblyState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTessellationState) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pTessellationState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pViewportState) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pViewportState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRasterizationState) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pRasterizationState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMultisampleState) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pMultisampleState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDepthStencilState) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pDepthStencilState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pColorBlendState) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pColorBlendState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDynamicState) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(pDynamicState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderPass) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(renderPass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpass) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(subpass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basePipelineHandle) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(basePipelineHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basePipelineIndex) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineCreateInfo),
            "::",
            stringify!(basePipelineIndex)
        )
    );
}
impl Default for VkGraphicsPipelineCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPushConstantRange {
    pub stageFlags: VkShaderStageFlags,
    pub offset: u32,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_VkPushConstantRange() {
    const UNINIT: ::std::mem::MaybeUninit<VkPushConstantRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPushConstantRange>(),
        12usize,
        concat!("Size of: ", stringify!(VkPushConstantRange))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPushConstantRange>(),
        4usize,
        concat!("Alignment of ", stringify!(VkPushConstantRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stageFlags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPushConstantRange),
            "::",
            stringify!(stageFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPushConstantRange),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPushConstantRange),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineLayoutCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineLayoutCreateFlags,
    pub setLayoutCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
    pub pushConstantRangeCount: u32,
    pub pPushConstantRanges: *const VkPushConstantRange,
}
#[test]
fn bindgen_test_layout_VkPipelineLayoutCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineLayoutCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineLayoutCreateInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkPipelineLayoutCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineLayoutCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineLayoutCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setLayoutCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(setLayoutCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSetLayouts) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(pSetLayouts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pushConstantRangeCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(pushConstantRangeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPushConstantRanges) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLayoutCreateInfo),
            "::",
            stringify!(pPushConstantRanges)
        )
    );
}
impl Default for VkPipelineLayoutCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkSamplerCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSamplerCreateFlags,
    pub magFilter: VkFilter,
    pub minFilter: VkFilter,
    pub mipmapMode: VkSamplerMipmapMode,
    pub addressModeU: VkSamplerAddressMode,
    pub addressModeV: VkSamplerAddressMode,
    pub addressModeW: VkSamplerAddressMode,
    pub mipLodBias: f32,
    pub anisotropyEnable: VkBool32,
    pub maxAnisotropy: f32,
    pub compareEnable: VkBool32,
    pub compareOp: VkCompareOp,
    pub minLod: f32,
    pub maxLod: f32,
    pub borderColor: VkBorderColor,
    pub unnormalizedCoordinates: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSamplerCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSamplerCreateInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSamplerCreateInfo>(),
        80usize,
        concat!("Size of: ", stringify!(VkSamplerCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSamplerCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).magFilter) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(magFilter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minFilter) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(minFilter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipmapMode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(mipmapMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressModeU) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(addressModeU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressModeV) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(addressModeV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressModeW) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(addressModeW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipLodBias) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(mipLodBias)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anisotropyEnable) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(anisotropyEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxAnisotropy) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(maxAnisotropy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compareEnable) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(compareEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compareOp) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(compareOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minLod) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(minLod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxLod) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(maxLod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).borderColor) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(borderColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unnormalizedCoordinates) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCreateInfo),
            "::",
            stringify!(unnormalizedCoordinates)
        )
    );
}
impl Default for VkSamplerCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCopyDescriptorSet {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSet: VkDescriptorSet,
    pub srcBinding: u32,
    pub srcArrayElement: u32,
    pub dstSet: VkDescriptorSet,
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
}
#[test]
fn bindgen_test_layout_VkCopyDescriptorSet() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyDescriptorSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyDescriptorSet>(),
        56usize,
        concat!("Size of: ", stringify!(VkCopyDescriptorSet))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyDescriptorSet>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyDescriptorSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcSet) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(srcSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcBinding) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(srcBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcArrayElement) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(srcArrayElement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSet) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(dstSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstBinding) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(dstBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArrayElement) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(dstArrayElement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyDescriptorSet),
            "::",
            stringify!(descriptorCount)
        )
    );
}
impl Default for VkCopyDescriptorSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorBufferInfo {
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub range: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkDescriptorBufferInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorBufferInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorBufferInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorBufferInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorBufferInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorBufferInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferInfo),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferInfo),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferInfo),
            "::",
            stringify!(range)
        )
    );
}
impl Default for VkDescriptorBufferInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorImageInfo {
    pub sampler: VkSampler,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkDescriptorImageInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorImageInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorImageInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorImageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorImageInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorImageInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorImageInfo),
            "::",
            stringify!(sampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageView) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorImageInfo),
            "::",
            stringify!(imageView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageLayout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorImageInfo),
            "::",
            stringify!(imageLayout)
        )
    );
}
impl Default for VkDescriptorImageInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorPoolSize {
    pub type_: VkDescriptorType,
    pub descriptorCount: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorPoolSize() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorPoolSize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorPoolSize>(),
        8usize,
        concat!("Size of: ", stringify!(VkDescriptorPoolSize))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorPoolSize>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDescriptorPoolSize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolSize),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolSize),
            "::",
            stringify!(descriptorCount)
        )
    );
}
impl Default for VkDescriptorPoolSize {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDescriptorPoolCreateFlags,
    pub maxSets: u32,
    pub poolSizeCount: u32,
    pub pPoolSizes: *const VkDescriptorPoolSize,
}
#[test]
fn bindgen_test_layout_VkDescriptorPoolCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorPoolCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorPoolCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkDescriptorPoolCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorPoolCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorPoolCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSets) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(maxSets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poolSizeCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(poolSizeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPoolSizes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolCreateInfo),
            "::",
            stringify!(pPoolSizes)
        )
    );
}
impl Default for VkDescriptorPoolCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorSetAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub descriptorPool: VkDescriptorPool,
    pub descriptorSetCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetAllocateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetAllocateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetAllocateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkDescriptorSetAllocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetAllocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetAllocateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorPool) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetAllocateInfo),
            "::",
            stringify!(descriptorPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorSetCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetAllocateInfo),
            "::",
            stringify!(descriptorSetCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSetLayouts) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetAllocateInfo),
            "::",
            stringify!(pSetLayouts)
        )
    );
}
impl Default for VkDescriptorSetAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorSetLayoutBinding {
    pub binding: u32,
    pub descriptorType: VkDescriptorType,
    pub descriptorCount: u32,
    pub stageFlags: VkShaderStageFlags,
    pub pImmutableSamplers: *const VkSampler,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutBinding() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetLayoutBinding> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutBinding>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorSetLayoutBinding))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutBinding>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetLayoutBinding))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorType) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(descriptorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stageFlags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(stageFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pImmutableSamplers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBinding),
            "::",
            stringify!(pImmutableSamplers)
        )
    );
}
impl Default for VkDescriptorSetLayoutBinding {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorSetLayoutCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDescriptorSetLayoutCreateFlags,
    pub bindingCount: u32,
    pub pBindings: *const VkDescriptorSetLayoutBinding,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetLayoutCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkDescriptorSetLayoutCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetLayoutCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindingCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(bindingCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBindings) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutCreateInfo),
            "::",
            stringify!(pBindings)
        )
    );
}
impl Default for VkDescriptorSetLayoutCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkWriteDescriptorSet {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dstSet: VkDescriptorSet,
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
    pub descriptorType: VkDescriptorType,
    pub pImageInfo: *const VkDescriptorImageInfo,
    pub pBufferInfo: *const VkDescriptorBufferInfo,
    pub pTexelBufferView: *const VkBufferView,
}
#[test]
fn bindgen_test_layout_VkWriteDescriptorSet() {
    const UNINIT: ::std::mem::MaybeUninit<VkWriteDescriptorSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkWriteDescriptorSet>(),
        64usize,
        concat!("Size of: ", stringify!(VkWriteDescriptorSet))
    );
    assert_eq!(
        ::std::mem::align_of::<VkWriteDescriptorSet>(),
        8usize,
        concat!("Alignment of ", stringify!(VkWriteDescriptorSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSet) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(dstSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstBinding) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(dstBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArrayElement) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(dstArrayElement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(descriptorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorType) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pImageInfo) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pImageInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBufferInfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pBufferInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTexelBufferView) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSet),
            "::",
            stringify!(pTexelBufferView)
        )
    );
}
impl Default for VkWriteDescriptorSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAttachmentDescription {
    pub flags: VkAttachmentDescriptionFlags,
    pub format: VkFormat,
    pub samples: VkSampleCountFlagBits,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub stencilLoadOp: VkAttachmentLoadOp,
    pub stencilStoreOp: VkAttachmentStoreOp,
    pub initialLayout: VkImageLayout,
    pub finalLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkAttachmentDescription() {
    const UNINIT: ::std::mem::MaybeUninit<VkAttachmentDescription> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentDescription>(),
        36usize,
        concat!("Size of: ", stringify!(VkAttachmentDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentDescription>(),
        4usize,
        concat!("Alignment of ", stringify!(VkAttachmentDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samples) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadOp) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(loadOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storeOp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(storeOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilLoadOp) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(stencilLoadOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilStoreOp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(stencilStoreOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialLayout) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(initialLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finalLayout) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription),
            "::",
            stringify!(finalLayout)
        )
    );
}
impl Default for VkAttachmentDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAttachmentReference {
    pub attachment: u32,
    pub layout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkAttachmentReference() {
    const UNINIT: ::std::mem::MaybeUninit<VkAttachmentReference> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentReference>(),
        8usize,
        concat!("Size of: ", stringify!(VkAttachmentReference))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentReference>(),
        4usize,
        concat!("Alignment of ", stringify!(VkAttachmentReference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference),
            "::",
            stringify!(layout)
        )
    );
}
impl Default for VkAttachmentReference {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFramebufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkFramebufferCreateFlags,
    pub renderPass: VkRenderPass,
    pub attachmentCount: u32,
    pub pAttachments: *const VkImageView,
    pub width: u32,
    pub height: u32,
    pub layers: u32,
}
#[test]
fn bindgen_test_layout_VkFramebufferCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkFramebufferCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFramebufferCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkFramebufferCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFramebufferCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFramebufferCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderPass) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(renderPass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachmentCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAttachments) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(pAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layers) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferCreateInfo),
            "::",
            stringify!(layers)
        )
    );
}
impl Default for VkFramebufferCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassDescription {
    pub flags: VkSubpassDescriptionFlags,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub inputAttachmentCount: u32,
    pub pInputAttachments: *const VkAttachmentReference,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkAttachmentReference,
    pub pResolveAttachments: *const VkAttachmentReference,
    pub pDepthStencilAttachment: *const VkAttachmentReference,
    pub preserveAttachmentCount: u32,
    pub pPreserveAttachments: *const u32,
}
#[test]
fn bindgen_test_layout_VkSubpassDescription() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassDescription> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassDescription>(),
        72usize,
        concat!("Size of: ", stringify!(VkSubpassDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassDescription))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineBindPoint) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputAttachmentCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(inputAttachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputAttachments) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pInputAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorAttachmentCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(colorAttachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pColorAttachments) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pColorAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResolveAttachments) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pResolveAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDepthStencilAttachment) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pDepthStencilAttachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preserveAttachmentCount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(preserveAttachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPreserveAttachments) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription),
            "::",
            stringify!(pPreserveAttachments)
        )
    );
}
impl Default for VkSubpassDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassDependency {
    pub srcSubpass: u32,
    pub dstSubpass: u32,
    pub srcStageMask: VkPipelineStageFlags,
    pub dstStageMask: VkPipelineStageFlags,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub dependencyFlags: VkDependencyFlags,
}
#[test]
fn bindgen_test_layout_VkSubpassDependency() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassDependency> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassDependency>(),
        28usize,
        concat!("Size of: ", stringify!(VkSubpassDependency))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassDependency>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSubpassDependency))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcSubpass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(srcSubpass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSubpass) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(dstSubpass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcStageMask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(srcStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstStageMask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(dstStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAccessMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAccessMask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(dstAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencyFlags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency),
            "::",
            stringify!(dependencyFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkRenderPassCreateFlags,
    pub attachmentCount: u32,
    pub pAttachments: *const VkAttachmentDescription,
    pub subpassCount: u32,
    pub pSubpasses: *const VkSubpassDescription,
    pub dependencyCount: u32,
    pub pDependencies: *const VkSubpassDependency,
}
#[test]
fn bindgen_test_layout_VkRenderPassCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkRenderPassCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachmentCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAttachments) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(pAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpassCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(subpassCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSubpasses) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(pSubpasses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencyCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(dependencyCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo),
            "::",
            stringify!(pDependencies)
        )
    );
}
impl Default for VkRenderPassCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCommandPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkCommandPoolCreateFlags,
    pub queueFamilyIndex: u32,
}
#[test]
fn bindgen_test_layout_VkCommandPoolCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkCommandPoolCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCommandPoolCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkCommandPoolCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandPoolCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCommandPoolCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandPoolCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandPoolCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandPoolCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyIndex) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandPoolCreateInfo),
            "::",
            stringify!(queueFamilyIndex)
        )
    );
}
impl Default for VkCommandPoolCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCommandBufferAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub commandPool: VkCommandPool,
    pub level: VkCommandBufferLevel,
    pub commandBufferCount: u32,
}
#[test]
fn bindgen_test_layout_VkCommandBufferAllocateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkCommandBufferAllocateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferAllocateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkCommandBufferAllocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferAllocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCommandBufferAllocateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandPool) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferAllocateInfo),
            "::",
            stringify!(commandPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferAllocateInfo),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandBufferCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferAllocateInfo),
            "::",
            stringify!(commandBufferCount)
        )
    );
}
impl Default for VkCommandBufferAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCommandBufferInheritanceInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
    pub framebuffer: VkFramebuffer,
    pub occlusionQueryEnable: VkBool32,
    pub queryFlags: VkQueryControlFlags,
    pub pipelineStatistics: VkQueryPipelineStatisticFlags,
}
#[test]
fn bindgen_test_layout_VkCommandBufferInheritanceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkCommandBufferInheritanceInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferInheritanceInfo>(),
        56usize,
        concat!("Size of: ", stringify!(VkCommandBufferInheritanceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferInheritanceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCommandBufferInheritanceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderPass) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(renderPass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpass) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(subpass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framebuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(framebuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).occlusionQueryEnable) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(occlusionQueryEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queryFlags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(queryFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineStatistics) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceInfo),
            "::",
            stringify!(pipelineStatistics)
        )
    );
}
impl Default for VkCommandBufferInheritanceInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCommandBufferBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkCommandBufferUsageFlags,
    pub pInheritanceInfo: *const VkCommandBufferInheritanceInfo,
}
#[test]
fn bindgen_test_layout_VkCommandBufferBeginInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkCommandBufferBeginInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferBeginInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkCommandBufferBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCommandBufferBeginInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferBeginInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInheritanceInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferBeginInfo),
            "::",
            stringify!(pInheritanceInfo)
        )
    );
}
impl Default for VkCommandBufferBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferCopy {
    pub srcOffset: VkDeviceSize,
    pub dstOffset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBufferCopy() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferCopy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferCopy>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferCopy))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferCopy>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferCopy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageSubresourceLayers {
    pub aspectMask: VkImageAspectFlags,
    pub mipLevel: u32,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[test]
fn bindgen_test_layout_VkImageSubresourceLayers() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageSubresourceLayers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageSubresourceLayers>(),
        16usize,
        concat!("Size of: ", stringify!(VkImageSubresourceLayers))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSubresourceLayers>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageSubresourceLayers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspectMask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceLayers),
            "::",
            stringify!(aspectMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mipLevel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceLayers),
            "::",
            stringify!(mipLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseArrayLayer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceLayers),
            "::",
            stringify!(baseArrayLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresourceLayers),
            "::",
            stringify!(layerCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferImageCopy {
    pub bufferOffset: VkDeviceSize,
    pub bufferRowLength: u32,
    pub bufferImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkBufferImageCopy() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferImageCopy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferImageCopy>(),
        56usize,
        concat!("Size of: ", stringify!(VkBufferImageCopy))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferImageCopy>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferImageCopy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferOffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(bufferOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferRowLength) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(bufferRowLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferImageHeight) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(bufferImageHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSubresource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(imageSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(imageOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageExtent) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy),
            "::",
            stringify!(imageExtent)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearColorValue {
    pub float32: [f32; 4usize],
    pub int32: [i32; 4usize],
    pub uint32: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_VkClearColorValue() {
    const UNINIT: ::std::mem::MaybeUninit<VkClearColorValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkClearColorValue>(),
        16usize,
        concat!("Size of: ", stringify!(VkClearColorValue))
    );
    assert_eq!(
        ::std::mem::align_of::<VkClearColorValue>(),
        4usize,
        concat!("Alignment of ", stringify!(VkClearColorValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearColorValue),
            "::",
            stringify!(float32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearColorValue),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearColorValue),
            "::",
            stringify!(uint32)
        )
    );
}
impl Default for VkClearColorValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkClearDepthStencilValue {
    pub depth: f32,
    pub stencil: u32,
}
#[test]
fn bindgen_test_layout_VkClearDepthStencilValue() {
    const UNINIT: ::std::mem::MaybeUninit<VkClearDepthStencilValue> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkClearDepthStencilValue>(),
        8usize,
        concat!("Size of: ", stringify!(VkClearDepthStencilValue))
    );
    assert_eq!(
        ::std::mem::align_of::<VkClearDepthStencilValue>(),
        4usize,
        concat!("Alignment of ", stringify!(VkClearDepthStencilValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearDepthStencilValue),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencil) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearDepthStencilValue),
            "::",
            stringify!(stencil)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearValue {
    pub color: VkClearColorValue,
    pub depthStencil: VkClearDepthStencilValue,
}
#[test]
fn bindgen_test_layout_VkClearValue() {
    const UNINIT: ::std::mem::MaybeUninit<VkClearValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkClearValue>(),
        16usize,
        concat!("Size of: ", stringify!(VkClearValue))
    );
    assert_eq!(
        ::std::mem::align_of::<VkClearValue>(),
        4usize,
        concat!("Alignment of ", stringify!(VkClearValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearValue),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthStencil) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearValue),
            "::",
            stringify!(depthStencil)
        )
    );
}
impl Default for VkClearValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearAttachment {
    pub aspectMask: VkImageAspectFlags,
    pub colorAttachment: u32,
    pub clearValue: VkClearValue,
}
#[test]
fn bindgen_test_layout_VkClearAttachment() {
    const UNINIT: ::std::mem::MaybeUninit<VkClearAttachment> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkClearAttachment>(),
        24usize,
        concat!("Size of: ", stringify!(VkClearAttachment))
    );
    assert_eq!(
        ::std::mem::align_of::<VkClearAttachment>(),
        4usize,
        concat!("Alignment of ", stringify!(VkClearAttachment))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspectMask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearAttachment),
            "::",
            stringify!(aspectMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorAttachment) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearAttachment),
            "::",
            stringify!(colorAttachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clearValue) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearAttachment),
            "::",
            stringify!(clearValue)
        )
    );
}
impl Default for VkClearAttachment {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkClearRect {
    pub rect: VkRect2D,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[test]
fn bindgen_test_layout_VkClearRect() {
    const UNINIT: ::std::mem::MaybeUninit<VkClearRect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkClearRect>(),
        24usize,
        concat!("Size of: ", stringify!(VkClearRect))
    );
    assert_eq!(
        ::std::mem::align_of::<VkClearRect>(),
        4usize,
        concat!("Alignment of ", stringify!(VkClearRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearRect),
            "::",
            stringify!(rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseArrayLayer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearRect),
            "::",
            stringify!(baseArrayLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkClearRect),
            "::",
            stringify!(layerCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageBlit {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffsets: [VkOffset3D; 2usize],
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffsets: [VkOffset3D; 2usize],
}
#[test]
fn bindgen_test_layout_VkImageBlit() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageBlit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageBlit>(),
        80usize,
        concat!("Size of: ", stringify!(VkImageBlit))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageBlit>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageBlit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcSubresource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit),
            "::",
            stringify!(srcSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffsets) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit),
            "::",
            stringify!(srcOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSubresource) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit),
            "::",
            stringify!(dstSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffsets) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit),
            "::",
            stringify!(dstOffsets)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageCopy {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkImageCopy() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageCopy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageCopy>(),
        68usize,
        concat!("Size of: ", stringify!(VkImageCopy))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageCopy>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageCopy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcSubresource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy),
            "::",
            stringify!(srcSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSubresource) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy),
            "::",
            stringify!(dstSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageResolve {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkImageResolve() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageResolve> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageResolve>(),
        68usize,
        concat!("Size of: ", stringify!(VkImageResolve))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageResolve>(),
        4usize,
        concat!("Alignment of ", stringify!(VkImageResolve))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcSubresource) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve),
            "::",
            stringify!(srcSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSubresource) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve),
            "::",
            stringify!(dstSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve),
            "::",
            stringify!(extent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub renderPass: VkRenderPass,
    pub framebuffer: VkFramebuffer,
    pub renderArea: VkRect2D,
    pub clearValueCount: u32,
    pub pClearValues: *const VkClearValue,
}
#[test]
fn bindgen_test_layout_VkRenderPassBeginInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassBeginInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassBeginInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkRenderPassBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassBeginInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderPass) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(renderPass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framebuffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(framebuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderArea) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(renderArea)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clearValueCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(clearValueCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pClearValues) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassBeginInfo),
            "::",
            stringify!(pClearValues)
        )
    );
}
impl Default for VkRenderPassBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateInstance = ::std::option::Option<
    unsafe extern "system" fn(
        pCreateInfo: *const VkInstanceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pInstance: *mut VkInstance,
    ) -> VkResult,
>;
pub type PFN_vkDestroyInstance = ::std::option::Option<
    unsafe extern "system" fn(instance: VkInstance, pAllocator: *const VkAllocationCallbacks),
>;
pub type PFN_vkEnumeratePhysicalDevices = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pPhysicalDeviceCount: *mut u32,
        pPhysicalDevices: *mut VkPhysicalDevice,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceFeatures = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        pImageFormatProperties: *mut VkImageFormatProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties,
    ),
>;
pub type PFN_vkGetInstanceProcAddr = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction,
>;
pub type PFN_vkGetDeviceProcAddr = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction,
>;
pub type PFN_vkCreateDevice = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pCreateInfo: *const VkDeviceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDevice: *mut VkDevice,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDevice = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pAllocator: *const VkAllocationCallbacks),
>;
pub type PFN_vkEnumerateInstanceExtensionProperties = ::std::option::Option<
    unsafe extern "system" fn(
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult,
>;
pub type PFN_vkEnumerateDeviceExtensionProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult,
>;
pub type PFN_vkEnumerateInstanceLayerProperties = ::std::option::Option<
    unsafe extern "system" fn(pPropertyCount: *mut u32, pProperties: *mut VkLayerProperties) -> VkResult,
>;
pub type PFN_vkEnumerateDeviceLayerProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceQueue = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queueFamilyIndex: u32,
        queueIndex: u32,
        pQueue: *mut VkQueue,
    ),
>;
pub type PFN_vkQueueSubmit = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkQueueWaitIdle =
    ::std::option::Option<unsafe extern "system" fn(queue: VkQueue) -> VkResult>;
pub type PFN_vkDeviceWaitIdle =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice) -> VkResult>;
pub type PFN_vkAllocateMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocateInfo: *const VkMemoryAllocateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pMemory: *mut VkDeviceMemory,
    ) -> VkResult,
>;
pub type PFN_vkFreeMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkMapMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        flags: VkMemoryMapFlags,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkUnmapMemory =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, memory: VkDeviceMemory)>;
pub type PFN_vkFlushMappedMemoryRanges = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult,
>;
pub type PFN_vkInvalidateMappedMemoryRanges = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceMemoryCommitment = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        pCommittedMemoryInBytes: *mut VkDeviceSize,
    ),
>;
pub type PFN_vkBindBufferMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buffer: VkBuffer,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult,
>;
pub type PFN_vkGetBufferMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buffer: VkBuffer,
        pMemoryRequirements: *mut VkMemoryRequirements,
    ),
>;
pub type PFN_vkGetImageMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pMemoryRequirements: *mut VkMemoryRequirements,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        samples: VkSampleCountFlagBits,
        usage: VkImageUsageFlags,
        tiling: VkImageTiling,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties,
    ),
>;
pub type PFN_vkQueueBindSparse = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        bindInfoCount: u32,
        pBindInfo: *const VkBindSparseInfo,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkCreateFence = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkFenceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkDestroyFence = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        fence: VkFence,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetFences = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, fenceCount: u32, pFences: *const VkFence) -> VkResult,
>;
pub type PFN_vkGetFenceStatus =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, fence: VkFence) -> VkResult>;
pub type PFN_vkWaitForFences = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        fenceCount: u32,
        pFences: *const VkFence,
        waitAll: VkBool32,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkCreateSemaphore = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSemaphoreCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSemaphore: *mut VkSemaphore,
    ) -> VkResult,
>;
pub type PFN_vkDestroySemaphore = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        semaphore: VkSemaphore,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateEvent = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkEventCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pEvent: *mut VkEvent,
    ) -> VkResult,
>;
pub type PFN_vkDestroyEvent = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        event: VkEvent,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetEventStatus =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, event: VkEvent) -> VkResult>;
pub type PFN_vkSetEvent =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, event: VkEvent) -> VkResult>;
pub type PFN_vkResetEvent =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, event: VkEvent) -> VkResult>;
pub type PFN_vkCreateQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkQueryPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pQueryPool: *mut VkQueryPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetQueryPoolResults = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ) -> VkResult,
>;
pub type PFN_vkCreateBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkBufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pBuffer: *mut VkBuffer,
    ) -> VkResult,
>;
pub type PFN_vkDestroyBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buffer: VkBuffer,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateBufferView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkBufferViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkBufferView,
    ) -> VkResult,
>;
pub type PFN_vkDestroyBufferView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bufferView: VkBufferView,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateImage = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkImageCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pImage: *mut VkImage,
    ) -> VkResult,
>;
pub type PFN_vkDestroyImage = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetImageSubresourceLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource,
        pLayout: *mut VkSubresourceLayout,
    ),
>;
pub type PFN_vkCreateImageView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkImageViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkImageView,
    ) -> VkResult,
>;
pub type PFN_vkDestroyImageView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        imageView: VkImageView,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateShaderModule = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pShaderModule: *mut VkShaderModule,
    ) -> VkResult,
>;
pub type PFN_vkDestroyShaderModule = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreatePipelineCache = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPipelineCacheCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineCache: *mut VkPipelineCache,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipelineCache = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetPipelineCacheData = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkMergePipelineCaches = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        dstCache: VkPipelineCache,
        srcCacheCount: u32,
        pSrcCaches: *const VkPipelineCache,
    ) -> VkResult,
>;
pub type PFN_vkCreateGraphicsPipelines = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkGraphicsPipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkCreateComputePipelines = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkComputePipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipeline = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreatePipelineLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPipelineLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineLayout: *mut VkPipelineLayout,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipelineLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineLayout: VkPipelineLayout,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateSampler = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSampler: *mut VkSampler,
    ) -> VkResult,
>;
pub type PFN_vkDestroySampler = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        sampler: VkSampler,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorSetLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSetLayout: *mut VkDescriptorSetLayout,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorSetLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSetLayout: VkDescriptorSetLayout,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorPool: *mut VkDescriptorPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetDescriptorPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        flags: VkDescriptorPoolResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkAllocateDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocateInfo: *const VkDescriptorSetAllocateInfo,
        pDescriptorSets: *mut VkDescriptorSet,
    ) -> VkResult,
>;
pub type PFN_vkFreeDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
    ) -> VkResult,
>;
pub type PFN_vkUpdateDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
        descriptorCopyCount: u32,
        pDescriptorCopies: *const VkCopyDescriptorSet,
    ),
>;
pub type PFN_vkCreateFramebuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkFramebufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFramebuffer: *mut VkFramebuffer,
    ) -> VkResult,
>;
pub type PFN_vkDestroyFramebuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateRenderPass = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkDestroyRenderPass = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        renderPass: VkRenderPass,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetRenderAreaGranularity = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, renderPass: VkRenderPass, pGranularity: *mut VkExtent2D),
>;
pub type PFN_vkCreateCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkCommandPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pCommandPool: *mut VkCommandPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkAllocateCommandBuffers = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocateInfo: *const VkCommandBufferAllocateInfo,
        pCommandBuffers: *mut VkCommandBuffer,
    ) -> VkResult,
>;
pub type PFN_vkFreeCommandBuffers = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    ),
>;
pub type PFN_vkBeginCommandBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkCommandBufferBeginInfo,
    ) -> VkResult,
>;
pub type PFN_vkEndCommandBuffer =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer) -> VkResult>;
pub type PFN_vkResetCommandBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        flags: VkCommandBufferResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkCmdBindPipeline = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
    ),
>;
pub type PFN_vkCmdSetViewport = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissor = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstScissor: u32,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdSetLineWidth =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, lineWidth: f32)>;
pub type PFN_vkCmdSetDepthBias = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        depthBiasConstantFactor: f32,
        depthBiasClamp: f32,
        depthBiasSlopeFactor: f32,
    ),
>;
pub type PFN_vkCmdSetBlendConstants = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, blendConstants: *const f32),
>;
pub type PFN_vkCmdSetDepthBounds = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, minDepthBounds: f32, maxDepthBounds: f32),
>;
pub type PFN_vkCmdSetStencilCompareMask = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        compareMask: u32,
    ),
>;
pub type PFN_vkCmdSetStencilWriteMask = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        writeMask: u32,
    ),
>;
pub type PFN_vkCmdSetStencilReference = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        reference: u32,
    ),
>;
pub type PFN_vkCmdBindDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
        dynamicOffsetCount: u32,
        pDynamicOffsets: *const u32,
    ),
>;
pub type PFN_vkCmdBindIndexBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        indexType: VkIndexType,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdDraw = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexed = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        vertexOffset: i32,
        firstInstance: u32,
    ),
>;
pub type PFN_vkCmdDrawIndirect = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirect = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDispatch = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkCmdDispatchIndirect = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize),
>;
pub type PFN_vkCmdCopyBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferCopy,
    ),
>;
pub type PFN_vkCmdCopyImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageCopy,
    ),
>;
pub type PFN_vkCmdBlitImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageBlit,
        filter: VkFilter,
    ),
>;
pub type PFN_vkCmdCopyBufferToImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    ),
>;
pub type PFN_vkCmdCopyImageToBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    ),
>;
pub type PFN_vkCmdUpdateBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        dataSize: VkDeviceSize,
        pData: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkCmdFillBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        size: VkDeviceSize,
        data: u32,
    ),
>;
pub type PFN_vkCmdClearColorImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pColor: *const VkClearColorValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    ),
>;
pub type PFN_vkCmdClearDepthStencilImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pDepthStencil: *const VkClearDepthStencilValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    ),
>;
pub type PFN_vkCmdClearAttachments = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pAttachments: *const VkClearAttachment,
        rectCount: u32,
        pRects: *const VkClearRect,
    ),
>;
pub type PFN_vkCmdResolveImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageResolve,
    ),
>;
pub type PFN_vkCmdSetEvent = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    ),
>;
pub type PFN_vkCmdResetEvent = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    ),
>;
pub type PFN_vkCmdWaitEvents = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    ),
>;
pub type PFN_vkCmdPipelineBarrier = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        dependencyFlags: VkDependencyFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    ),
>;
pub type PFN_vkCmdBeginQuery = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
    ),
>;
pub type PFN_vkCmdEndQuery = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32),
>;
pub type PFN_vkCmdResetQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
pub type PFN_vkCmdWriteTimestamp = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        queryPool: VkQueryPool,
        query: u32,
    ),
>;
pub type PFN_vkCmdCopyQueryPoolResults = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ),
>;
pub type PFN_vkCmdPushConstants = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        layout: VkPipelineLayout,
        stageFlags: VkShaderStageFlags,
        offset: u32,
        size: u32,
        pValues: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkCmdBeginRenderPass = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        contents: VkSubpassContents,
    ),
>;
pub type PFN_vkCmdNextSubpass = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, contents: VkSubpassContents),
>;
pub type PFN_vkCmdEndRenderPass =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdExecuteCommands = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    ),
>;
extern "system" {
    pub fn vkCreateInstance(
        pCreateInfo: *const VkInstanceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pInstance: *mut VkInstance,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyInstance(instance: VkInstance, pAllocator: *const VkAllocationCallbacks);
}
extern "system" {
    pub fn vkEnumeratePhysicalDevices(
        instance: VkInstance,
        pPhysicalDeviceCount: *mut u32,
        pPhysicalDevices: *mut VkPhysicalDevice,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceFeatures(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceFormatProperties(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceImageFormatProperties(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        pImageFormatProperties: *mut VkImageFormatProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceProperties(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyProperties(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceMemoryProperties(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties,
    );
}
extern "system" {
    pub fn vkGetInstanceProcAddr(
        instance: VkInstance,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction;
}
extern "system" {
    pub fn vkGetDeviceProcAddr(
        device: VkDevice,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction;
}
extern "system" {
    pub fn vkCreateDevice(
        physicalDevice: VkPhysicalDevice,
        pCreateInfo: *const VkDeviceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDevice: *mut VkDevice,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDevice(device: VkDevice, pAllocator: *const VkAllocationCallbacks);
}
extern "system" {
    pub fn vkEnumerateInstanceExtensionProperties(
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkEnumerateDeviceExtensionProperties(
        physicalDevice: VkPhysicalDevice,
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkEnumerateInstanceLayerProperties(
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkEnumerateDeviceLayerProperties(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDeviceQueue(
        device: VkDevice,
        queueFamilyIndex: u32,
        queueIndex: u32,
        pQueue: *mut VkQueue,
    );
}
extern "system" {
    pub fn vkQueueSubmit(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo,
        fence: VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkQueueWaitIdle(queue: VkQueue) -> VkResult;
}
extern "system" {
    pub fn vkDeviceWaitIdle(device: VkDevice) -> VkResult;
}
extern "system" {
    pub fn vkAllocateMemory(
        device: VkDevice,
        pAllocateInfo: *const VkMemoryAllocateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pMemory: *mut VkDeviceMemory,
    ) -> VkResult;
}
extern "system" {
    pub fn vkFreeMemory(
        device: VkDevice,
        memory: VkDeviceMemory,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkMapMemory(
        device: VkDevice,
        memory: VkDeviceMemory,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        flags: VkMemoryMapFlags,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkUnmapMemory(device: VkDevice, memory: VkDeviceMemory);
}
extern "system" {
    pub fn vkFlushMappedMemoryRanges(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult;
}
extern "system" {
    pub fn vkInvalidateMappedMemoryRanges(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDeviceMemoryCommitment(
        device: VkDevice,
        memory: VkDeviceMemory,
        pCommittedMemoryInBytes: *mut VkDeviceSize,
    );
}
extern "system" {
    pub fn vkBindBufferMemory(
        device: VkDevice,
        buffer: VkBuffer,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult;
}
extern "system" {
    pub fn vkBindImageMemory(
        device: VkDevice,
        image: VkImage,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetBufferMemoryRequirements(
        device: VkDevice,
        buffer: VkBuffer,
        pMemoryRequirements: *mut VkMemoryRequirements,
    );
}
extern "system" {
    pub fn vkGetImageMemoryRequirements(
        device: VkDevice,
        image: VkImage,
        pMemoryRequirements: *mut VkMemoryRequirements,
    );
}
extern "system" {
    pub fn vkGetImageSparseMemoryRequirements(
        device: VkDevice,
        image: VkImage,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceSparseImageFormatProperties(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        samples: VkSampleCountFlagBits,
        usage: VkImageUsageFlags,
        tiling: VkImageTiling,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties,
    );
}
extern "system" {
    pub fn vkQueueBindSparse(
        queue: VkQueue,
        bindInfoCount: u32,
        pBindInfo: *const VkBindSparseInfo,
        fence: VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateFence(
        device: VkDevice,
        pCreateInfo: *const VkFenceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyFence(
        device: VkDevice,
        fence: VkFence,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkResetFences(device: VkDevice, fenceCount: u32, pFences: *const VkFence) -> VkResult;
}
extern "system" {
    pub fn vkGetFenceStatus(device: VkDevice, fence: VkFence) -> VkResult;
}
extern "system" {
    pub fn vkWaitForFences(
        device: VkDevice,
        fenceCount: u32,
        pFences: *const VkFence,
        waitAll: VkBool32,
        timeout: u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateSemaphore(
        device: VkDevice,
        pCreateInfo: *const VkSemaphoreCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSemaphore: *mut VkSemaphore,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroySemaphore(
        device: VkDevice,
        semaphore: VkSemaphore,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateEvent(
        device: VkDevice,
        pCreateInfo: *const VkEventCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pEvent: *mut VkEvent,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyEvent(
        device: VkDevice,
        event: VkEvent,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetEventStatus(device: VkDevice, event: VkEvent) -> VkResult;
}
extern "system" {
    pub fn vkSetEvent(device: VkDevice, event: VkEvent) -> VkResult;
}
extern "system" {
    pub fn vkResetEvent(device: VkDevice, event: VkEvent) -> VkResult;
}
extern "system" {
    pub fn vkCreateQueryPool(
        device: VkDevice,
        pCreateInfo: *const VkQueryPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pQueryPool: *mut VkQueryPool,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyQueryPool(
        device: VkDevice,
        queryPool: VkQueryPool,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetQueryPoolResults(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateBuffer(
        device: VkDevice,
        pCreateInfo: *const VkBufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pBuffer: *mut VkBuffer,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyBuffer(
        device: VkDevice,
        buffer: VkBuffer,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateBufferView(
        device: VkDevice,
        pCreateInfo: *const VkBufferViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkBufferView,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyBufferView(
        device: VkDevice,
        bufferView: VkBufferView,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateImage(
        device: VkDevice,
        pCreateInfo: *const VkImageCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pImage: *mut VkImage,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyImage(
        device: VkDevice,
        image: VkImage,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetImageSubresourceLayout(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource,
        pLayout: *mut VkSubresourceLayout,
    );
}
extern "system" {
    pub fn vkCreateImageView(
        device: VkDevice,
        pCreateInfo: *const VkImageViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkImageView,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyImageView(
        device: VkDevice,
        imageView: VkImageView,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateShaderModule(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pShaderModule: *mut VkShaderModule,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyShaderModule(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreatePipelineCache(
        device: VkDevice,
        pCreateInfo: *const VkPipelineCacheCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineCache: *mut VkPipelineCache,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyPipelineCache(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetPipelineCacheData(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkMergePipelineCaches(
        device: VkDevice,
        dstCache: VkPipelineCache,
        srcCacheCount: u32,
        pSrcCaches: *const VkPipelineCache,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateGraphicsPipelines(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkGraphicsPipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateComputePipelines(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkComputePipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyPipeline(
        device: VkDevice,
        pipeline: VkPipeline,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreatePipelineLayout(
        device: VkDevice,
        pCreateInfo: *const VkPipelineLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineLayout: *mut VkPipelineLayout,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyPipelineLayout(
        device: VkDevice,
        pipelineLayout: VkPipelineLayout,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateSampler(
        device: VkDevice,
        pCreateInfo: *const VkSamplerCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSampler: *mut VkSampler,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroySampler(
        device: VkDevice,
        sampler: VkSampler,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateDescriptorSetLayout(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSetLayout: *mut VkDescriptorSetLayout,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDescriptorSetLayout(
        device: VkDevice,
        descriptorSetLayout: VkDescriptorSetLayout,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateDescriptorPool(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorPool: *mut VkDescriptorPool,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDescriptorPool(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkResetDescriptorPool(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        flags: VkDescriptorPoolResetFlags,
    ) -> VkResult;
}
extern "system" {
    pub fn vkAllocateDescriptorSets(
        device: VkDevice,
        pAllocateInfo: *const VkDescriptorSetAllocateInfo,
        pDescriptorSets: *mut VkDescriptorSet,
    ) -> VkResult;
}
extern "system" {
    pub fn vkFreeDescriptorSets(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
    ) -> VkResult;
}
extern "system" {
    pub fn vkUpdateDescriptorSets(
        device: VkDevice,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
        descriptorCopyCount: u32,
        pDescriptorCopies: *const VkCopyDescriptorSet,
    );
}
extern "system" {
    pub fn vkCreateFramebuffer(
        device: VkDevice,
        pCreateInfo: *const VkFramebufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFramebuffer: *mut VkFramebuffer,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyFramebuffer(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateRenderPass(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyRenderPass(
        device: VkDevice,
        renderPass: VkRenderPass,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetRenderAreaGranularity(
        device: VkDevice,
        renderPass: VkRenderPass,
        pGranularity: *mut VkExtent2D,
    );
}
extern "system" {
    pub fn vkCreateCommandPool(
        device: VkDevice,
        pCreateInfo: *const VkCommandPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pCommandPool: *mut VkCommandPool,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyCommandPool(
        device: VkDevice,
        commandPool: VkCommandPool,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkResetCommandPool(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolResetFlags,
    ) -> VkResult;
}
extern "system" {
    pub fn vkAllocateCommandBuffers(
        device: VkDevice,
        pAllocateInfo: *const VkCommandBufferAllocateInfo,
        pCommandBuffers: *mut VkCommandBuffer,
    ) -> VkResult;
}
extern "system" {
    pub fn vkFreeCommandBuffers(
        device: VkDevice,
        commandPool: VkCommandPool,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    );
}
extern "system" {
    pub fn vkBeginCommandBuffer(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkCommandBufferBeginInfo,
    ) -> VkResult;
}
extern "system" {
    pub fn vkEndCommandBuffer(commandBuffer: VkCommandBuffer) -> VkResult;
}
extern "system" {
    pub fn vkResetCommandBuffer(
        commandBuffer: VkCommandBuffer,
        flags: VkCommandBufferResetFlags,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdBindPipeline(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
    );
}
extern "system" {
    pub fn vkCmdSetViewport(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewports: *const VkViewport,
    );
}
extern "system" {
    pub fn vkCmdSetScissor(
        commandBuffer: VkCommandBuffer,
        firstScissor: u32,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    );
}
extern "system" {
    pub fn vkCmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: f32);
}
extern "system" {
    pub fn vkCmdSetDepthBias(
        commandBuffer: VkCommandBuffer,
        depthBiasConstantFactor: f32,
        depthBiasClamp: f32,
        depthBiasSlopeFactor: f32,
    );
}
extern "system" {
    pub fn vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: *const f32);
}
extern "system" {
    pub fn vkCmdSetDepthBounds(
        commandBuffer: VkCommandBuffer,
        minDepthBounds: f32,
        maxDepthBounds: f32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilCompareMask(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        compareMask: u32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilWriteMask(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        writeMask: u32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilReference(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        reference: u32,
    );
}
extern "system" {
    pub fn vkCmdBindDescriptorSets(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
        dynamicOffsetCount: u32,
        pDynamicOffsets: *const u32,
    );
}
extern "system" {
    pub fn vkCmdBindIndexBuffer(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        indexType: VkIndexType,
    );
}
extern "system" {
    pub fn vkCmdBindVertexBuffers(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdDraw(
        commandBuffer: VkCommandBuffer,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndexed(
        commandBuffer: VkCommandBuffer,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        vertexOffset: i32,
        firstInstance: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndirect(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndexedIndirect(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDispatch(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
extern "system" {
    pub fn vkCmdDispatchIndirect(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdCopyBuffer(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferCopy,
    );
}
extern "system" {
    pub fn vkCmdCopyImage(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageCopy,
    );
}
extern "system" {
    pub fn vkCmdBlitImage(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageBlit,
        filter: VkFilter,
    );
}
extern "system" {
    pub fn vkCmdCopyBufferToImage(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    );
}
extern "system" {
    pub fn vkCmdCopyImageToBuffer(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    );
}
extern "system" {
    pub fn vkCmdUpdateBuffer(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        dataSize: VkDeviceSize,
        pData: *const ::std::os::raw::c_void,
    );
}
extern "system" {
    pub fn vkCmdFillBuffer(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        size: VkDeviceSize,
        data: u32,
    );
}
extern "system" {
    pub fn vkCmdClearColorImage(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pColor: *const VkClearColorValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    );
}
extern "system" {
    pub fn vkCmdClearDepthStencilImage(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pDepthStencil: *const VkClearDepthStencilValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    );
}
extern "system" {
    pub fn vkCmdClearAttachments(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pAttachments: *const VkClearAttachment,
        rectCount: u32,
        pRects: *const VkClearRect,
    );
}
extern "system" {
    pub fn vkCmdResolveImage(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageResolve,
    );
}
extern "system" {
    pub fn vkCmdSetEvent(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    );
}
extern "system" {
    pub fn vkCmdResetEvent(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    );
}
extern "system" {
    pub fn vkCmdWaitEvents(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    );
}
extern "system" {
    pub fn vkCmdPipelineBarrier(
        commandBuffer: VkCommandBuffer,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        dependencyFlags: VkDependencyFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    );
}
extern "system" {
    pub fn vkCmdBeginQuery(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
    );
}
extern "system" {
    pub fn vkCmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32);
}
extern "system" {
    pub fn vkCmdResetQueryPool(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    );
}
extern "system" {
    pub fn vkCmdWriteTimestamp(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        queryPool: VkQueryPool,
        query: u32,
    );
}
extern "system" {
    pub fn vkCmdCopyQueryPoolResults(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    );
}
extern "system" {
    pub fn vkCmdPushConstants(
        commandBuffer: VkCommandBuffer,
        layout: VkPipelineLayout,
        stageFlags: VkShaderStageFlags,
        offset: u32,
        size: u32,
        pValues: *const ::std::os::raw::c_void,
    );
}
extern "system" {
    pub fn vkCmdBeginRenderPass(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        contents: VkSubpassContents,
    );
}
extern "system" {
    pub fn vkCmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents);
}
extern "system" {
    pub fn vkCmdEndRenderPass(commandBuffer: VkCommandBuffer);
}
extern "system" {
    pub fn vkCmdExecuteCommands(
        commandBuffer: VkCommandBuffer,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSamplerYcbcrConversion_T {
    _unused: [u8; 0],
}
pub type VkSamplerYcbcrConversion = *mut VkSamplerYcbcrConversion_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDescriptorUpdateTemplate_T {
    _unused: [u8; 0],
}
pub type VkDescriptorUpdateTemplate = *mut VkDescriptorUpdateTemplate_T;
impl VkPointClippingBehavior {
    pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR: VkPointClippingBehavior =
        VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES;
}
impl VkPointClippingBehavior {
    pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR: VkPointClippingBehavior =
        VkPointClippingBehavior::VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPointClippingBehavior {
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647,
}
impl VkTessellationDomainOrigin {
    pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR: VkTessellationDomainOrigin =
        VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT;
}
impl VkTessellationDomainOrigin {
    pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR: VkTessellationDomainOrigin =
        VkTessellationDomainOrigin::VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkTessellationDomainOrigin {
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647,
}
impl VkSamplerYcbcrModelConversion {
    pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR: VkSamplerYcbcrModelConversion =
        VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY;
}
impl VkSamplerYcbcrModelConversion {
    pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR: VkSamplerYcbcrModelConversion =
        VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY;
}
impl VkSamplerYcbcrModelConversion {
    pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR: VkSamplerYcbcrModelConversion =
        VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709;
}
impl VkSamplerYcbcrModelConversion {
    pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR: VkSamplerYcbcrModelConversion =
        VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601;
}
impl VkSamplerYcbcrModelConversion {
    pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR: VkSamplerYcbcrModelConversion =
        VkSamplerYcbcrModelConversion::VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSamplerYcbcrModelConversion {
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647,
}
impl VkSamplerYcbcrRange {
    pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: VkSamplerYcbcrRange =
        VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_FULL;
}
impl VkSamplerYcbcrRange {
    pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: VkSamplerYcbcrRange =
        VkSamplerYcbcrRange::VK_SAMPLER_YCBCR_RANGE_ITU_NARROW;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSamplerYcbcrRange {
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647,
}
impl VkChromaLocation {
    pub const VK_CHROMA_LOCATION_COSITED_EVEN_KHR: VkChromaLocation =
        VkChromaLocation::VK_CHROMA_LOCATION_COSITED_EVEN;
}
impl VkChromaLocation {
    pub const VK_CHROMA_LOCATION_MIDPOINT_KHR: VkChromaLocation =
        VkChromaLocation::VK_CHROMA_LOCATION_MIDPOINT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkChromaLocation {
    VK_CHROMA_LOCATION_COSITED_EVEN = 0,
    VK_CHROMA_LOCATION_MIDPOINT = 1,
    VK_CHROMA_LOCATION_MAX_ENUM = 2147483647,
}
impl VkDescriptorUpdateTemplateType {
    pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR:
        VkDescriptorUpdateTemplateType =
        VkDescriptorUpdateTemplateType::VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDescriptorUpdateTemplateType {
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSubgroupFeatureFlagBits {
    VK_SUBGROUP_FEATURE_BASIC_BIT = 1,
    VK_SUBGROUP_FEATURE_VOTE_BIT = 2,
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4,
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 8,
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16,
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32,
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64,
    VK_SUBGROUP_FEATURE_QUAD_BIT = 128,
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256,
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkSubgroupFeatureFlags = VkFlags;
impl VkPeerMemoryFeatureFlagBits {
    pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: VkPeerMemoryFeatureFlagBits =
        VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT;
}
impl VkPeerMemoryFeatureFlagBits {
    pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: VkPeerMemoryFeatureFlagBits =
        VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_COPY_DST_BIT;
}
impl VkPeerMemoryFeatureFlagBits {
    pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: VkPeerMemoryFeatureFlagBits =
        VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT;
}
impl VkPeerMemoryFeatureFlagBits {
    pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: VkPeerMemoryFeatureFlagBits =
        VkPeerMemoryFeatureFlagBits::VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPeerMemoryFeatureFlagBits {
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8,
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkPeerMemoryFeatureFlags = VkFlags;
impl VkMemoryAllocateFlagBits {
    pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: VkMemoryAllocateFlagBits =
        VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT;
}
impl VkMemoryAllocateFlagBits {
    pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR: VkMemoryAllocateFlagBits =
        VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT;
}
impl VkMemoryAllocateFlagBits {
    pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: VkMemoryAllocateFlagBits =
        VkMemoryAllocateFlagBits::VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkMemoryAllocateFlagBits {
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4,
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkMemoryAllocateFlags = VkFlags;
pub type VkCommandPoolTrimFlags = VkFlags;
pub type VkDescriptorUpdateTemplateCreateFlags = VkFlags;
impl VkExternalMemoryHandleTypeFlagBits {
    pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalMemoryHandleTypeFlagBits =
        VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT;
}
impl VkExternalMemoryHandleTypeFlagBits {
    pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR:
        VkExternalMemoryHandleTypeFlagBits =
        VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT;
}
impl VkExternalMemoryHandleTypeFlagBits {
    pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR:
        VkExternalMemoryHandleTypeFlagBits =
        VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
}
impl VkExternalMemoryHandleTypeFlagBits {
    pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR:
        VkExternalMemoryHandleTypeFlagBits =
        VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT;
}
impl VkExternalMemoryHandleTypeFlagBits {
    pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR:
        VkExternalMemoryHandleTypeFlagBits =
        VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT;
}
impl VkExternalMemoryHandleTypeFlagBits {
    pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR:
        VkExternalMemoryHandleTypeFlagBits =
        VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT;
}
impl VkExternalMemoryHandleTypeFlagBits {
    pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR:
        VkExternalMemoryHandleTypeFlagBits =
        VkExternalMemoryHandleTypeFlagBits::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkExternalMemoryHandleTypeFlagBits {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkExternalMemoryHandleTypeFlags = VkFlags;
impl VkExternalMemoryFeatureFlagBits {
    pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: VkExternalMemoryFeatureFlagBits =
        VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT;
}
impl VkExternalMemoryFeatureFlagBits {
    pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: VkExternalMemoryFeatureFlagBits =
        VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT;
}
impl VkExternalMemoryFeatureFlagBits {
    pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: VkExternalMemoryFeatureFlagBits =
        VkExternalMemoryFeatureFlagBits::VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkExternalMemoryFeatureFlagBits {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkExternalMemoryFeatureFlags = VkFlags;
impl VkExternalFenceHandleTypeFlagBits {
    pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: VkExternalFenceHandleTypeFlagBits =
        VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT;
}
impl VkExternalFenceHandleTypeFlagBits {
    pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR:
        VkExternalFenceHandleTypeFlagBits =
        VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
}
impl VkExternalFenceHandleTypeFlagBits {
    pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR:
        VkExternalFenceHandleTypeFlagBits =
        VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
}
impl VkExternalFenceHandleTypeFlagBits {
    pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: VkExternalFenceHandleTypeFlagBits =
        VkExternalFenceHandleTypeFlagBits::VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkExternalFenceHandleTypeFlagBits {
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkExternalFenceHandleTypeFlags = VkFlags;
impl VkExternalFenceFeatureFlagBits {
    pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: VkExternalFenceFeatureFlagBits =
        VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT;
}
impl VkExternalFenceFeatureFlagBits {
    pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: VkExternalFenceFeatureFlagBits =
        VkExternalFenceFeatureFlagBits::VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkExternalFenceFeatureFlagBits {
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2,
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkExternalFenceFeatureFlags = VkFlags;
impl VkFenceImportFlagBits {
    pub const VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: VkFenceImportFlagBits =
        VkFenceImportFlagBits::VK_FENCE_IMPORT_TEMPORARY_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkFenceImportFlagBits {
    VK_FENCE_IMPORT_TEMPORARY_BIT = 1,
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkFenceImportFlags = VkFlags;
impl VkSemaphoreImportFlagBits {
    pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: VkSemaphoreImportFlagBits =
        VkSemaphoreImportFlagBits::VK_SEMAPHORE_IMPORT_TEMPORARY_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSemaphoreImportFlagBits {
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1,
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkSemaphoreImportFlags = VkFlags;
impl VkExternalSemaphoreHandleTypeFlagBits {
    pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT:
        VkExternalSemaphoreHandleTypeFlagBits =
        VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT;
}
impl VkExternalSemaphoreHandleTypeFlagBits {
    pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR:
        VkExternalSemaphoreHandleTypeFlagBits =
        VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT;
}
impl VkExternalSemaphoreHandleTypeFlagBits {
    pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR:
        VkExternalSemaphoreHandleTypeFlagBits =
        VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
}
impl VkExternalSemaphoreHandleTypeFlagBits {
    pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = VkExternalSemaphoreHandleTypeFlagBits :: VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT ;
}
impl VkExternalSemaphoreHandleTypeFlagBits {
    pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR:
        VkExternalSemaphoreHandleTypeFlagBits =
        VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT;
}
impl VkExternalSemaphoreHandleTypeFlagBits {
    pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR:
        VkExternalSemaphoreHandleTypeFlagBits =
        VkExternalSemaphoreHandleTypeFlagBits::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkExternalSemaphoreHandleTypeFlagBits {
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkExternalSemaphoreHandleTypeFlags = VkFlags;
impl VkExternalSemaphoreFeatureFlagBits {
    pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: VkExternalSemaphoreFeatureFlagBits =
        VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT;
}
impl VkExternalSemaphoreFeatureFlagBits {
    pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: VkExternalSemaphoreFeatureFlagBits =
        VkExternalSemaphoreFeatureFlagBits::VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkExternalSemaphoreFeatureFlagBits {
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2,
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkExternalSemaphoreFeatureFlags = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSubgroupProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subgroupSize: u32,
    pub supportedStages: VkShaderStageFlags,
    pub supportedOperations: VkSubgroupFeatureFlags,
    pub quadOperationsInAllStages: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSubgroupProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSubgroupProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSubgroupProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceSubgroupProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSubgroupProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSubgroupProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subgroupSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(subgroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedStages) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(supportedStages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedOperations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(supportedOperations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quadOperationsInAllStages) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupProperties),
            "::",
            stringify!(quadOperationsInAllStages)
        )
    );
}
impl Default for VkPhysicalDeviceSubgroupProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindBufferMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBindBufferMemoryInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindBufferMemoryInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindBufferMemoryInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkBindBufferMemoryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindBufferMemoryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindBufferMemoryInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryInfo),
            "::",
            stringify!(memoryOffset)
        )
    );
}
impl Default for VkBindBufferMemoryInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindImageMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBindImageMemoryInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindImageMemoryInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindImageMemoryInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkBindImageMemoryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindImageMemoryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindImageMemoryInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryInfo),
            "::",
            stringify!(memoryOffset)
        )
    );
}
impl Default for VkBindImageMemoryInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevice16BitStorageFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageBuffer16BitAccess: VkBool32,
    pub uniformAndStorageBuffer16BitAccess: VkBool32,
    pub storagePushConstant16: VkBool32,
    pub storageInputOutput16: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevice16BitStorageFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevice16BitStorageFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevice16BitStorageFeatures>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevice16BitStorageFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevice16BitStorageFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageBuffer16BitAccess) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(storageBuffer16BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uniformAndStorageBuffer16BitAccess) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(uniformAndStorageBuffer16BitAccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storagePushConstant16) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(storagePushConstant16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageInputOutput16) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice16BitStorageFeatures),
            "::",
            stringify!(storageInputOutput16)
        )
    );
}
impl Default for VkPhysicalDevice16BitStorageFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryDedicatedRequirements {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub prefersDedicatedAllocation: VkBool32,
    pub requiresDedicatedAllocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkMemoryDedicatedRequirements() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryDedicatedRequirements> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryDedicatedRequirements>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryDedicatedRequirements))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryDedicatedRequirements>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryDedicatedRequirements))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedRequirements),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedRequirements),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefersDedicatedAllocation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedRequirements),
            "::",
            stringify!(prefersDedicatedAllocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiresDedicatedAllocation) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedRequirements),
            "::",
            stringify!(requiresDedicatedAllocation)
        )
    );
}
impl Default for VkMemoryDedicatedRequirements {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryDedicatedAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkMemoryDedicatedAllocateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryDedicatedAllocateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryDedicatedAllocateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkMemoryDedicatedAllocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryDedicatedAllocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryDedicatedAllocateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedAllocateInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryDedicatedAllocateInfo),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for VkMemoryDedicatedAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryAllocateFlagsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkMemoryAllocateFlags,
    pub deviceMask: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryAllocateFlagsInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryAllocateFlagsInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryAllocateFlagsInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryAllocateFlagsInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryAllocateFlagsInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryAllocateFlagsInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateFlagsInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateFlagsInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateFlagsInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceMask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryAllocateFlagsInfo),
            "::",
            stringify!(deviceMask)
        )
    );
}
impl Default for VkMemoryAllocateFlagsInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceGroupRenderPassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceMask: u32,
    pub deviceRenderAreaCount: u32,
    pub pDeviceRenderAreas: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupRenderPassBeginInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceGroupRenderPassBeginInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupRenderPassBeginInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkDeviceGroupRenderPassBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupRenderPassBeginInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceGroupRenderPassBeginInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupRenderPassBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupRenderPassBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupRenderPassBeginInfo),
            "::",
            stringify!(deviceMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceRenderAreaCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupRenderPassBeginInfo),
            "::",
            stringify!(deviceRenderAreaCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDeviceRenderAreas) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupRenderPassBeginInfo),
            "::",
            stringify!(pDeviceRenderAreas)
        )
    );
}
impl Default for VkDeviceGroupRenderPassBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceGroupCommandBufferBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceMask: u32,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupCommandBufferBeginInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceGroupCommandBufferBeginInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupCommandBufferBeginInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDeviceGroupCommandBufferBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupCommandBufferBeginInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceGroupCommandBufferBeginInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupCommandBufferBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupCommandBufferBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupCommandBufferBeginInfo),
            "::",
            stringify!(deviceMask)
        )
    );
}
impl Default for VkDeviceGroupCommandBufferBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceGroupSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphoreDeviceIndices: *const u32,
    pub commandBufferCount: u32,
    pub pCommandBufferDeviceMasks: *const u32,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphoreDeviceIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupSubmitInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceGroupSubmitInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupSubmitInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkDeviceGroupSubmitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupSubmitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceGroupSubmitInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitSemaphoreCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(waitSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWaitSemaphoreDeviceIndices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(pWaitSemaphoreDeviceIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandBufferCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(commandBufferCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCommandBufferDeviceMasks) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(pCommandBufferDeviceMasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signalSemaphoreCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(signalSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pSignalSemaphoreDeviceIndices) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSubmitInfo),
            "::",
            stringify!(pSignalSemaphoreDeviceIndices)
        )
    );
}
impl Default for VkDeviceGroupSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceGroupBindSparseInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub resourceDeviceIndex: u32,
    pub memoryDeviceIndex: u32,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupBindSparseInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceGroupBindSparseInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupBindSparseInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDeviceGroupBindSparseInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupBindSparseInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceGroupBindSparseInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupBindSparseInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupBindSparseInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceDeviceIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupBindSparseInfo),
            "::",
            stringify!(resourceDeviceIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryDeviceIndex) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupBindSparseInfo),
            "::",
            stringify!(memoryDeviceIndex)
        )
    );
}
impl Default for VkDeviceGroupBindSparseInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindBufferMemoryDeviceGroupInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkBindBufferMemoryDeviceGroupInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindBufferMemoryDeviceGroupInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindBufferMemoryDeviceGroupInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkBindBufferMemoryDeviceGroupInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindBufferMemoryDeviceGroupInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindBufferMemoryDeviceGroupInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryDeviceGroupInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryDeviceGroupInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceIndexCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryDeviceGroupInfo),
            "::",
            stringify!(deviceIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDeviceIndices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindBufferMemoryDeviceGroupInfo),
            "::",
            stringify!(pDeviceIndices)
        )
    );
}
impl Default for VkBindBufferMemoryDeviceGroupInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindImageMemoryDeviceGroupInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
    pub splitInstanceBindRegionCount: u32,
    pub pSplitInstanceBindRegions: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkBindImageMemoryDeviceGroupInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindImageMemoryDeviceGroupInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindImageMemoryDeviceGroupInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkBindImageMemoryDeviceGroupInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindImageMemoryDeviceGroupInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindImageMemoryDeviceGroupInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceIndexCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(deviceIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDeviceIndices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(pDeviceIndices)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).splitInstanceBindRegionCount) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(splitInstanceBindRegionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSplitInstanceBindRegions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemoryDeviceGroupInfo),
            "::",
            stringify!(pSplitInstanceBindRegions)
        )
    );
}
impl Default for VkBindImageMemoryDeviceGroupInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceGroupProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub physicalDeviceCount: u32,
    pub physicalDevices: [VkPhysicalDevice; 32usize],
    pub subsetAllocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceGroupProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceGroupProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceGroupProperties>(),
        288usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceGroupProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceGroupProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceGroupProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGroupProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGroupProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physicalDeviceCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGroupProperties),
            "::",
            stringify!(physicalDeviceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physicalDevices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGroupProperties),
            "::",
            stringify!(physicalDevices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subsetAllocation) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGroupProperties),
            "::",
            stringify!(subsetAllocation)
        )
    );
}
impl Default for VkPhysicalDeviceGroupProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceGroupDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub physicalDeviceCount: u32,
    pub pPhysicalDevices: *const VkPhysicalDevice,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupDeviceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceGroupDeviceCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupDeviceCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkDeviceGroupDeviceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupDeviceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceGroupDeviceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupDeviceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupDeviceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physicalDeviceCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupDeviceCreateInfo),
            "::",
            stringify!(physicalDeviceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPhysicalDevices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupDeviceCreateInfo),
            "::",
            stringify!(pPhysicalDevices)
        )
    );
}
impl Default for VkDeviceGroupDeviceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkBufferMemoryRequirementsInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferMemoryRequirementsInfo2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferMemoryRequirementsInfo2>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferMemoryRequirementsInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferMemoryRequirementsInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferMemoryRequirementsInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryRequirementsInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryRequirementsInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryRequirementsInfo2),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for VkBufferMemoryRequirementsInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
}
#[test]
fn bindgen_test_layout_VkImageMemoryRequirementsInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageMemoryRequirementsInfo2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageMemoryRequirementsInfo2>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageMemoryRequirementsInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageMemoryRequirementsInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageMemoryRequirementsInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryRequirementsInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryRequirementsInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryRequirementsInfo2),
            "::",
            stringify!(image)
        )
    );
}
impl Default for VkImageMemoryRequirementsInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageSparseMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
}
#[test]
fn bindgen_test_layout_VkImageSparseMemoryRequirementsInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageSparseMemoryRequirementsInfo2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageSparseMemoryRequirementsInfo2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkImageSparseMemoryRequirementsInfo2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSparseMemoryRequirementsInfo2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageSparseMemoryRequirementsInfo2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSparseMemoryRequirementsInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSparseMemoryRequirementsInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSparseMemoryRequirementsInfo2),
            "::",
            stringify!(image)
        )
    );
}
impl Default for VkImageSparseMemoryRequirementsInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryRequirements2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryRequirements: VkMemoryRequirements,
}
#[test]
fn bindgen_test_layout_VkMemoryRequirements2() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryRequirements2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryRequirements2>(),
        40usize,
        concat!("Size of: ", stringify!(VkMemoryRequirements2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryRequirements2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryRequirements2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryRequirements) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryRequirements2),
            "::",
            stringify!(memoryRequirements)
        )
    );
}
impl Default for VkMemoryRequirements2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSparseImageMemoryRequirements2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryRequirements: VkSparseImageMemoryRequirements,
}
#[test]
fn bindgen_test_layout_VkSparseImageMemoryRequirements2() {
    const UNINIT: ::std::mem::MaybeUninit<VkSparseImageMemoryRequirements2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageMemoryRequirements2>(),
        64usize,
        concat!("Size of: ", stringify!(VkSparseImageMemoryRequirements2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageMemoryRequirements2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSparseImageMemoryRequirements2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryRequirements) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageMemoryRequirements2),
            "::",
            stringify!(memoryRequirements)
        )
    );
}
impl Default for VkSparseImageMemoryRequirements2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFeatures2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub features: VkPhysicalDeviceFeatures,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFeatures2() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFeatures2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFeatures2>(),
        240usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceFeatures2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFeatures2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceFeatures2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).features) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFeatures2),
            "::",
            stringify!(features)
        )
    );
}
impl Default for VkPhysicalDeviceFeatures2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkPhysicalDeviceProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub properties: VkPhysicalDeviceProperties,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceProperties2() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceProperties2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceProperties2>(),
        840usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceProperties2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceProperties2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProperties2),
            "::",
            stringify!(properties)
        )
    );
}
impl Default for VkPhysicalDeviceProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub formatProperties: VkFormatProperties,
}
#[test]
fn bindgen_test_layout_VkFormatProperties2() {
    const UNINIT: ::std::mem::MaybeUninit<VkFormatProperties2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFormatProperties2>(),
        32usize,
        concat!("Size of: ", stringify!(VkFormatProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFormatProperties2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFormatProperties2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties2),
            "::",
            stringify!(formatProperties)
        )
    );
}
impl Default for VkFormatProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageFormatProperties: VkImageFormatProperties,
}
#[test]
fn bindgen_test_layout_VkImageFormatProperties2() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageFormatProperties2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageFormatProperties2>(),
        48usize,
        concat!("Size of: ", stringify!(VkImageFormatProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageFormatProperties2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageFormatProperties2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageFormatProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatProperties2),
            "::",
            stringify!(imageFormatProperties)
        )
    );
}
impl Default for VkImageFormatProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImageFormatInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
    pub type_: VkImageType,
    pub tiling: VkImageTiling,
    pub usage: VkImageUsageFlags,
    pub flags: VkImageCreateFlags,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageFormatInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImageFormatInfo2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageFormatInfo2>(),
        40usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceImageFormatInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageFormatInfo2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageFormatInfo2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiling) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(tiling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageFormatInfo2),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkPhysicalDeviceImageFormatInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueueFamilyProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub queueFamilyProperties: VkQueueFamilyProperties,
}
#[test]
fn bindgen_test_layout_VkQueueFamilyProperties2() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueueFamilyProperties2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueueFamilyProperties2>(),
        40usize,
        concat!("Size of: ", stringify!(VkQueueFamilyProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueueFamilyProperties2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkQueueFamilyProperties2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyProperties2),
            "::",
            stringify!(queueFamilyProperties)
        )
    );
}
impl Default for VkQueueFamilyProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMemoryProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryProperties: VkPhysicalDeviceMemoryProperties,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryProperties2() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMemoryProperties2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryProperties2>(),
        536usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceMemoryProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryProperties2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryProperties2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryProperties2),
            "::",
            stringify!(memoryProperties)
        )
    );
}
impl Default for VkPhysicalDeviceMemoryProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSparseImageFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub properties: VkSparseImageFormatProperties,
}
#[test]
fn bindgen_test_layout_VkSparseImageFormatProperties2() {
    const UNINIT: ::std::mem::MaybeUninit<VkSparseImageFormatProperties2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSparseImageFormatProperties2>(),
        40usize,
        concat!("Size of: ", stringify!(VkSparseImageFormatProperties2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSparseImageFormatProperties2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSparseImageFormatProperties2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).properties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSparseImageFormatProperties2),
            "::",
            stringify!(properties)
        )
    );
}
impl Default for VkSparseImageFormatProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
    pub type_: VkImageType,
    pub samples: VkSampleCountFlagBits,
    pub usage: VkImageUsageFlags,
    pub tiling: VkImageTiling,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSparseImageFormatInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSparseImageFormatInfo2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSparseImageFormatInfo2>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSparseImageFormatInfo2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samples) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tiling) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSparseImageFormatInfo2),
            "::",
            stringify!(tiling)
        )
    );
}
impl Default for VkPhysicalDeviceSparseImageFormatInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePointClippingProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pointClippingBehavior: VkPointClippingBehavior,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePointClippingProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePointClippingProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePointClippingProperties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePointClippingProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePointClippingProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePointClippingProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePointClippingProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePointClippingProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointClippingBehavior) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePointClippingProperties),
            "::",
            stringify!(pointClippingBehavior)
        )
    );
}
impl Default for VkPhysicalDevicePointClippingProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkInputAttachmentAspectReference {
    pub subpass: u32,
    pub inputAttachmentIndex: u32,
    pub aspectMask: VkImageAspectFlags,
}
#[test]
fn bindgen_test_layout_VkInputAttachmentAspectReference() {
    const UNINIT: ::std::mem::MaybeUninit<VkInputAttachmentAspectReference> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkInputAttachmentAspectReference>(),
        12usize,
        concat!("Size of: ", stringify!(VkInputAttachmentAspectReference))
    );
    assert_eq!(
        ::std::mem::align_of::<VkInputAttachmentAspectReference>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkInputAttachmentAspectReference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInputAttachmentAspectReference),
            "::",
            stringify!(subpass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputAttachmentIndex) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInputAttachmentAspectReference),
            "::",
            stringify!(inputAttachmentIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspectMask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInputAttachmentAspectReference),
            "::",
            stringify!(aspectMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub aspectReferenceCount: u32,
    pub pAspectReferences: *const VkInputAttachmentAspectReference,
}
#[test]
fn bindgen_test_layout_VkRenderPassInputAttachmentAspectCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassInputAttachmentAspectCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassInputAttachmentAspectCreateInfo>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassInputAttachmentAspectCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspectReferenceCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo),
            "::",
            stringify!(aspectReferenceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAspectReferences) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassInputAttachmentAspectCreateInfo),
            "::",
            stringify!(pAspectReferences)
        )
    );
}
impl Default for VkRenderPassInputAttachmentAspectCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageViewUsageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub usage: VkImageUsageFlags,
}
#[test]
fn bindgen_test_layout_VkImageViewUsageCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageViewUsageCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageViewUsageCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageViewUsageCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewUsageCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewUsageCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewUsageCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewUsageCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewUsageCreateInfo),
            "::",
            stringify!(usage)
        )
    );
}
impl Default for VkImageViewUsageCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub domainOrigin: VkTessellationDomainOrigin,
}
#[test]
fn bindgen_test_layout_VkPipelineTessellationDomainOriginStateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineTessellationDomainOriginStateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineTessellationDomainOriginStateCreateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineTessellationDomainOriginStateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineTessellationDomainOriginStateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineTessellationDomainOriginStateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationDomainOriginStateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationDomainOriginStateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domainOrigin) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineTessellationDomainOriginStateCreateInfo),
            "::",
            stringify!(domainOrigin)
        )
    );
}
impl Default for VkPipelineTessellationDomainOriginStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassMultiviewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub subpassCount: u32,
    pub pViewMasks: *const u32,
    pub dependencyCount: u32,
    pub pViewOffsets: *const i32,
    pub correlationMaskCount: u32,
    pub pCorrelationMasks: *const u32,
}
#[test]
fn bindgen_test_layout_VkRenderPassMultiviewCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassMultiviewCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassMultiviewCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkRenderPassMultiviewCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassMultiviewCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassMultiviewCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpassCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(subpassCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pViewMasks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(pViewMasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencyCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(dependencyCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pViewOffsets) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(pViewOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).correlationMaskCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(correlationMaskCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCorrelationMasks) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassMultiviewCreateInfo),
            "::",
            stringify!(pCorrelationMasks)
        )
    );
}
impl Default for VkRenderPassMultiviewCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMultiviewFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multiview: VkBool32,
    pub multiviewGeometryShader: VkBool32,
    pub multiviewTessellationShader: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultiviewFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMultiviewFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultiviewFeatures>(),
        32usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceMultiviewFeatures))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultiviewFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultiviewFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiview) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewFeatures),
            "::",
            stringify!(multiview)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiviewGeometryShader) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewFeatures),
            "::",
            stringify!(multiviewGeometryShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiviewTessellationShader) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewFeatures),
            "::",
            stringify!(multiviewTessellationShader)
        )
    );
}
impl Default for VkPhysicalDeviceMultiviewFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMultiviewProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxMultiviewViewCount: u32,
    pub maxMultiviewInstanceIndex: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultiviewProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMultiviewProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultiviewProperties>(),
        24usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceMultiviewProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultiviewProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultiviewProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMultiviewViewCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewProperties),
            "::",
            stringify!(maxMultiviewViewCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMultiviewInstanceIndex) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewProperties),
            "::",
            stringify!(maxMultiviewInstanceIndex)
        )
    );
}
impl Default for VkPhysicalDeviceMultiviewProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVariablePointersFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub variablePointersStorageBuffer: VkBool32,
    pub variablePointers: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVariablePointersFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVariablePointersFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVariablePointersFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVariablePointersFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variablePointersStorageBuffer) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures),
            "::",
            stringify!(variablePointersStorageBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variablePointers) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVariablePointersFeatures),
            "::",
            stringify!(variablePointers)
        )
    );
}
impl Default for VkPhysicalDeviceVariablePointersFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub protectedMemory: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceProtectedMemoryFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceProtectedMemoryFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceProtectedMemoryFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceProtectedMemoryFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceProtectedMemoryFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceProtectedMemoryFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protectedMemory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryFeatures),
            "::",
            stringify!(protectedMemory)
        )
    );
}
impl Default for VkPhysicalDeviceProtectedMemoryFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceProtectedMemoryProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub protectedNoFault: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceProtectedMemoryProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceProtectedMemoryProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceProtectedMemoryProperties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceProtectedMemoryProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceProtectedMemoryProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceProtectedMemoryProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protectedNoFault) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProtectedMemoryProperties),
            "::",
            stringify!(protectedNoFault)
        )
    );
}
impl Default for VkPhysicalDeviceProtectedMemoryProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceQueueInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceQueueCreateFlags,
    pub queueFamilyIndex: u32,
    pub queueIndex: u32,
}
#[test]
fn bindgen_test_layout_VkDeviceQueueInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceQueueInfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceQueueInfo2>(),
        32usize,
        concat!("Size of: ", stringify!(VkDeviceQueueInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceQueueInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceQueueInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueInfo2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyIndex) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueInfo2),
            "::",
            stringify!(queueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueIndex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueInfo2),
            "::",
            stringify!(queueIndex)
        )
    );
}
impl Default for VkDeviceQueueInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkProtectedSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub protectedSubmit: VkBool32,
}
#[test]
fn bindgen_test_layout_VkProtectedSubmitInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkProtectedSubmitInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkProtectedSubmitInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkProtectedSubmitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkProtectedSubmitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkProtectedSubmitInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkProtectedSubmitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkProtectedSubmitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protectedSubmit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkProtectedSubmitInfo),
            "::",
            stringify!(protectedSubmit)
        )
    );
}
impl Default for VkProtectedSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSamplerYcbcrConversionCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
    pub ycbcrModel: VkSamplerYcbcrModelConversion,
    pub ycbcrRange: VkSamplerYcbcrRange,
    pub components: VkComponentMapping,
    pub xChromaOffset: VkChromaLocation,
    pub yChromaOffset: VkChromaLocation,
    pub chromaFilter: VkFilter,
    pub forceExplicitReconstruction: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSamplerYcbcrConversionCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSamplerYcbcrConversionCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSamplerYcbcrConversionCreateInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkSamplerYcbcrConversionCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerYcbcrConversionCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerYcbcrConversionCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ycbcrModel) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(ycbcrModel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ycbcrRange) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(ycbcrRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).components) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(components)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xChromaOffset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(xChromaOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yChromaOffset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(yChromaOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chromaFilter) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(chromaFilter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forceExplicitReconstruction) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionCreateInfo),
            "::",
            stringify!(forceExplicitReconstruction)
        )
    );
}
impl Default for VkSamplerYcbcrConversionCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSamplerYcbcrConversionInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub conversion: VkSamplerYcbcrConversion,
}
#[test]
fn bindgen_test_layout_VkSamplerYcbcrConversionInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSamplerYcbcrConversionInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSamplerYcbcrConversionInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSamplerYcbcrConversionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerYcbcrConversionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSamplerYcbcrConversionInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conversion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionInfo),
            "::",
            stringify!(conversion)
        )
    );
}
impl Default for VkSamplerYcbcrConversionInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindImagePlaneMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub planeAspect: VkImageAspectFlagBits,
}
#[test]
fn bindgen_test_layout_VkBindImagePlaneMemoryInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindImagePlaneMemoryInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindImagePlaneMemoryInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkBindImagePlaneMemoryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindImagePlaneMemoryInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindImagePlaneMemoryInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImagePlaneMemoryInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImagePlaneMemoryInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeAspect) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImagePlaneMemoryInfo),
            "::",
            stringify!(planeAspect)
        )
    );
}
impl Default for VkBindImagePlaneMemoryInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImagePlaneMemoryRequirementsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub planeAspect: VkImageAspectFlagBits,
}
#[test]
fn bindgen_test_layout_VkImagePlaneMemoryRequirementsInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkImagePlaneMemoryRequirementsInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImagePlaneMemoryRequirementsInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkImagePlaneMemoryRequirementsInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImagePlaneMemoryRequirementsInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImagePlaneMemoryRequirementsInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImagePlaneMemoryRequirementsInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImagePlaneMemoryRequirementsInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeAspect) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImagePlaneMemoryRequirementsInfo),
            "::",
            stringify!(planeAspect)
        )
    );
}
impl Default for VkImagePlaneMemoryRequirementsInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub samplerYcbcrConversion: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSamplerYcbcrConversionFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSamplerYcbcrConversionFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSamplerYcbcrConversionFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSamplerYcbcrConversionFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerYcbcrConversionFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerYcbcrConversionFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplerYcbcrConversion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerYcbcrConversionFeatures),
            "::",
            stringify!(samplerYcbcrConversion)
        )
    );
}
impl Default for VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSamplerYcbcrConversionImageFormatProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub combinedImageSamplerDescriptorCount: u32,
}
#[test]
fn bindgen_test_layout_VkSamplerYcbcrConversionImageFormatProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkSamplerYcbcrConversionImageFormatProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSamplerYcbcrConversionImageFormatProperties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkSamplerYcbcrConversionImageFormatProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerYcbcrConversionImageFormatProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerYcbcrConversionImageFormatProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionImageFormatProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionImageFormatProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).combinedImageSamplerDescriptorCount) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerYcbcrConversionImageFormatProperties),
            "::",
            stringify!(combinedImageSamplerDescriptorCount)
        )
    );
}
impl Default for VkSamplerYcbcrConversionImageFormatProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorUpdateTemplateEntry {
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
    pub descriptorType: VkDescriptorType,
    pub offset: usize,
    pub stride: usize,
}
#[test]
fn bindgen_test_layout_VkDescriptorUpdateTemplateEntry() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorUpdateTemplateEntry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorUpdateTemplateEntry>(),
        32usize,
        concat!("Size of: ", stringify!(VkDescriptorUpdateTemplateEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorUpdateTemplateEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorUpdateTemplateEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstBinding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(dstBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstArrayElement) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(dstArrayElement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(descriptorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorType) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateEntry),
            "::",
            stringify!(stride)
        )
    );
}
impl Default for VkDescriptorUpdateTemplateEntry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorUpdateTemplateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDescriptorUpdateTemplateCreateFlags,
    pub descriptorUpdateEntryCount: u32,
    pub pDescriptorUpdateEntries: *const VkDescriptorUpdateTemplateEntry,
    pub templateType: VkDescriptorUpdateTemplateType,
    pub descriptorSetLayout: VkDescriptorSetLayout,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipelineLayout: VkPipelineLayout,
    pub set: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorUpdateTemplateCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorUpdateTemplateCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorUpdateTemplateCreateInfo>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorUpdateTemplateCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorUpdateEntryCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(descriptorUpdateEntryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDescriptorUpdateEntries) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pDescriptorUpdateEntries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).templateType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(templateType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorSetLayout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(descriptorSetLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineBindPoint) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineLayout) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(pipelineLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorUpdateTemplateCreateInfo),
            "::",
            stringify!(set)
        )
    );
}
impl Default for VkDescriptorUpdateTemplateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExternalMemoryProperties {
    pub externalMemoryFeatures: VkExternalMemoryFeatureFlags,
    pub exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExternalMemoryProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkExternalMemoryProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExternalMemoryProperties>(),
        12usize,
        concat!("Size of: ", stringify!(VkExternalMemoryProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalMemoryProperties>(),
        4usize,
        concat!("Alignment of ", stringify!(VkExternalMemoryProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalMemoryFeatures) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryProperties),
            "::",
            stringify!(externalMemoryFeatures)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exportFromImportedHandleTypes) as usize - ptr as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryProperties),
            "::",
            stringify!(exportFromImportedHandleTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compatibleHandleTypes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryProperties),
            "::",
            stringify!(compatibleHandleTypes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExternalImageFormatInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalImageFormatInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExternalImageFormatInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalImageFormatInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExternalImageFormatInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalImageFormatInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalImageFormatInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalImageFormatInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalImageFormatInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalImageFormatInfo),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkPhysicalDeviceExternalImageFormatInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExternalImageFormatProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub externalMemoryProperties: VkExternalMemoryProperties,
}
#[test]
fn bindgen_test_layout_VkExternalImageFormatProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkExternalImageFormatProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExternalImageFormatProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkExternalImageFormatProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalImageFormatProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExternalImageFormatProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalMemoryProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatProperties),
            "::",
            stringify!(externalMemoryProperties)
        )
    );
}
impl Default for VkExternalImageFormatProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExternalBufferInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkBufferCreateFlags,
    pub usage: VkBufferUsageFlags,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalBufferInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExternalBufferInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalBufferInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceExternalBufferInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalBufferInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalBufferInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalBufferInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalBufferInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalBufferInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalBufferInfo),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalBufferInfo),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkPhysicalDeviceExternalBufferInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExternalBufferProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub externalMemoryProperties: VkExternalMemoryProperties,
}
#[test]
fn bindgen_test_layout_VkExternalBufferProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkExternalBufferProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExternalBufferProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkExternalBufferProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalBufferProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExternalBufferProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalBufferProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalBufferProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalMemoryProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalBufferProperties),
            "::",
            stringify!(externalMemoryProperties)
        )
    );
}
impl Default for VkExternalBufferProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceIDProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceUUID: [u8; 16usize],
    pub driverUUID: [u8; 16usize],
    pub deviceLUID: [u8; 8usize],
    pub deviceNodeMask: u32,
    pub deviceLUIDValid: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceIDProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceIDProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceIDProperties>(),
        64usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceIDProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceIDProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceIDProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceUUID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(deviceUUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverUUID) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(driverUUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceLUID) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(deviceLUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceNodeMask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(deviceNodeMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceLUIDValid) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIDProperties),
            "::",
            stringify!(deviceLUIDValid)
        )
    );
}
impl Default for VkPhysicalDeviceIDProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExternalMemoryImageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExternalMemoryImageCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkExternalMemoryImageCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExternalMemoryImageCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkExternalMemoryImageCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalMemoryImageCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExternalMemoryImageCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleTypes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfo),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExternalMemoryImageCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExternalMemoryBufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExternalMemoryBufferCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkExternalMemoryBufferCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExternalMemoryBufferCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkExternalMemoryBufferCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalMemoryBufferCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkExternalMemoryBufferCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryBufferCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryBufferCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleTypes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryBufferCreateInfo),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExternalMemoryBufferCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExportMemoryAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExportMemoryAllocateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkExportMemoryAllocateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExportMemoryAllocateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkExportMemoryAllocateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExportMemoryAllocateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExportMemoryAllocateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleTypes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfo),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExportMemoryAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExternalFenceInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalFenceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExternalFenceInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalFenceInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceExternalFenceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalFenceInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalFenceInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalFenceInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalFenceInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalFenceInfo),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkPhysicalDeviceExternalFenceInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExternalFenceProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
    pub externalFenceFeatures: VkExternalFenceFeatureFlags,
}
#[test]
fn bindgen_test_layout_VkExternalFenceProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkExternalFenceProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExternalFenceProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkExternalFenceProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalFenceProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExternalFenceProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalFenceProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalFenceProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exportFromImportedHandleTypes) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalFenceProperties),
            "::",
            stringify!(exportFromImportedHandleTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compatibleHandleTypes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalFenceProperties),
            "::",
            stringify!(compatibleHandleTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalFenceFeatures) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalFenceProperties),
            "::",
            stringify!(externalFenceFeatures)
        )
    );
}
impl Default for VkExternalFenceProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExportFenceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalFenceHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExportFenceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkExportFenceCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExportFenceCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkExportFenceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExportFenceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExportFenceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportFenceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportFenceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleTypes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportFenceCreateInfo),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExportFenceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExportSemaphoreCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalSemaphoreHandleTypeFlags,
}
#[test]
fn bindgen_test_layout_VkExportSemaphoreCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkExportSemaphoreCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExportSemaphoreCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkExportSemaphoreCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExportSemaphoreCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExportSemaphoreCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportSemaphoreCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportSemaphoreCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleTypes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportSemaphoreCreateInfo),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExportSemaphoreCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalSemaphoreInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExternalSemaphoreInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalSemaphoreInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExternalSemaphoreInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalSemaphoreInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalSemaphoreInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalSemaphoreInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalSemaphoreInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalSemaphoreInfo),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkPhysicalDeviceExternalSemaphoreInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExternalSemaphoreProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    pub externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
}
#[test]
fn bindgen_test_layout_VkExternalSemaphoreProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkExternalSemaphoreProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExternalSemaphoreProperties>(),
        32usize,
        concat!("Size of: ", stringify!(VkExternalSemaphoreProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalSemaphoreProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExternalSemaphoreProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalSemaphoreProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalSemaphoreProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exportFromImportedHandleTypes) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalSemaphoreProperties),
            "::",
            stringify!(exportFromImportedHandleTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compatibleHandleTypes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalSemaphoreProperties),
            "::",
            stringify!(compatibleHandleTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalSemaphoreFeatures) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalSemaphoreProperties),
            "::",
            stringify!(externalSemaphoreFeatures)
        )
    );
}
impl Default for VkExternalSemaphoreProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMaintenance3Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxPerSetDescriptors: u32,
    pub maxMemoryAllocationSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMaintenance3Properties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMaintenance3Properties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMaintenance3Properties>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMaintenance3Properties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMaintenance3Properties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMaintenance3Properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance3Properties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance3Properties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPerSetDescriptors) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance3Properties),
            "::",
            stringify!(maxPerSetDescriptors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMemoryAllocationSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance3Properties),
            "::",
            stringify!(maxMemoryAllocationSize)
        )
    );
}
impl Default for VkPhysicalDeviceMaintenance3Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorSetLayoutSupport {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supported: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutSupport() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetLayoutSupport> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutSupport>(),
        24usize,
        concat!("Size of: ", stringify!(VkDescriptorSetLayoutSupport))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutSupport>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorSetLayoutSupport))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutSupport),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutSupport),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutSupport),
            "::",
            stringify!(supported)
        )
    );
}
impl Default for VkDescriptorSetLayoutSupport {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderDrawParameters: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderDrawParametersFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderDrawParametersFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderDrawParametersFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderDrawParametersFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderDrawParametersFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderDrawParametersFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDrawParametersFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDrawParametersFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderDrawParameters) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDrawParametersFeatures),
            "::",
            stringify!(shaderDrawParameters)
        )
    );
}
impl Default for VkPhysicalDeviceShaderDrawParametersFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;
pub type PFN_vkEnumerateInstanceVersion =
    ::std::option::Option<unsafe extern "system" fn(pApiVersion: *mut u32) -> VkResult>;
pub type PFN_vkBindBufferMemory2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupPeerMemoryFeatures = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    ),
>;
pub type PFN_vkCmdSetDeviceMask =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, deviceMask: u32)>;
pub type PFN_vkCmdDispatchBase = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkEnumeratePhysicalDeviceGroups = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetImageMemoryRequirements2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetBufferMemoryRequirements2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFeatures2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    ),
>;
pub type PFN_vkTrimCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    ),
>;
pub type PFN_vkGetDeviceQueue2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pQueueInfo: *const VkDeviceQueueInfo2,
        pQueue: *mut VkQueue,
    ),
>;
pub type PFN_vkCreateSamplerYcbcrConversion = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult,
>;
pub type PFN_vkDestroySamplerYcbcrConversion = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorUpdateTemplate = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorUpdateTemplate = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateDescriptorSetWithTemplate = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalBufferProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalFenceProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    ),
>;
pub type PFN_vkGetDescriptorSetLayoutSupport = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    ),
>;
extern "system" {
    pub fn vkEnumerateInstanceVersion(pApiVersion: *mut u32) -> VkResult;
}
extern "system" {
    pub fn vkBindBufferMemory2(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult;
}
extern "system" {
    pub fn vkBindImageMemory2(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDeviceGroupPeerMemoryFeatures(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    );
}
extern "system" {
    pub fn vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: u32);
}
extern "system" {
    pub fn vkCmdDispatchBase(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
extern "system" {
    pub fn vkEnumeratePhysicalDeviceGroups(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetImageMemoryRequirements2(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetBufferMemoryRequirements2(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetImageSparseMemoryRequirements2(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceFeatures2(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceProperties2(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceFormatProperties2(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceImageFormatProperties2(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyProperties2(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceMemoryProperties2(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceSparseImageFormatProperties2(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    );
}
extern "system" {
    pub fn vkTrimCommandPool(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    );
}
extern "system" {
    pub fn vkGetDeviceQueue2(
        device: VkDevice,
        pQueueInfo: *const VkDeviceQueueInfo2,
        pQueue: *mut VkQueue,
    );
}
extern "system" {
    pub fn vkCreateSamplerYcbcrConversion(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroySamplerYcbcrConversion(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCreateDescriptorUpdateTemplate(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDescriptorUpdateTemplate(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkUpdateDescriptorSetWithTemplate(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceExternalBufferProperties(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceExternalFenceProperties(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceExternalSemaphoreProperties(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    );
}
extern "system" {
    pub fn vkGetDescriptorSetLayoutSupport(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    );
}
impl VkDriverId {
    pub const VK_DRIVER_ID_AMD_PROPRIETARY_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_AMD_PROPRIETARY;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_AMD_OPEN_SOURCE;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_MESA_RADV_KHR: VkDriverId = VkDriverId::VK_DRIVER_ID_MESA_RADV;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_NVIDIA_PROPRIETARY;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_IMAGINATION_PROPRIETARY;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_QUALCOMM_PROPRIETARY;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_ARM_PROPRIETARY_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_ARM_PROPRIETARY;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_GOOGLE_SWIFTSHADER;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_GGP_PROPRIETARY_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_GGP_PROPRIETARY;
}
impl VkDriverId {
    pub const VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: VkDriverId =
        VkDriverId::VK_DRIVER_ID_BROADCOM_PROPRIETARY;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDriverId {
    VK_DRIVER_ID_AMD_PROPRIETARY = 1,
    VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
    VK_DRIVER_ID_MESA_RADV = 3,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
    VK_DRIVER_ID_ARM_PROPRIETARY = 9,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
    VK_DRIVER_ID_GGP_PROPRIETARY = 11,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
    VK_DRIVER_ID_MESA_LLVMPIPE = 13,
    VK_DRIVER_ID_MOLTENVK = 14,
    VK_DRIVER_ID_COREAVI_PROPRIETARY = 15,
    VK_DRIVER_ID_JUICE_PROPRIETARY = 16,
    VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17,
    VK_DRIVER_ID_MESA_TURNIP = 18,
    VK_DRIVER_ID_MESA_V3DV = 19,
    VK_DRIVER_ID_MESA_PANVK = 20,
    VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21,
    VK_DRIVER_ID_MESA_VENUS = 22,
    VK_DRIVER_ID_MESA_DOZEN = 23,
    VK_DRIVER_ID_MESA_NVK = 24,
    VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25,
    VK_DRIVER_ID_MAX_ENUM = 2147483647,
}
impl VkShaderFloatControlsIndependence {
    pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR:
        VkShaderFloatControlsIndependence =
        VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY;
}
impl VkShaderFloatControlsIndependence {
    pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR: VkShaderFloatControlsIndependence =
        VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL;
}
impl VkShaderFloatControlsIndependence {
    pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR: VkShaderFloatControlsIndependence =
        VkShaderFloatControlsIndependence::VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkShaderFloatControlsIndependence {
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 2147483647,
}
impl VkSamplerReductionMode {
    pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT: VkSamplerReductionMode =
        VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE;
}
impl VkSamplerReductionMode {
    pub const VK_SAMPLER_REDUCTION_MODE_MIN_EXT: VkSamplerReductionMode =
        VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MIN;
}
impl VkSamplerReductionMode {
    pub const VK_SAMPLER_REDUCTION_MODE_MAX_EXT: VkSamplerReductionMode =
        VkSamplerReductionMode::VK_SAMPLER_REDUCTION_MODE_MAX;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSamplerReductionMode {
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
    VK_SAMPLER_REDUCTION_MODE_MIN = 1,
    VK_SAMPLER_REDUCTION_MODE_MAX = 2,
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 2147483647,
}
impl VkSemaphoreType {
    pub const VK_SEMAPHORE_TYPE_BINARY_KHR: VkSemaphoreType =
        VkSemaphoreType::VK_SEMAPHORE_TYPE_BINARY;
}
impl VkSemaphoreType {
    pub const VK_SEMAPHORE_TYPE_TIMELINE_KHR: VkSemaphoreType =
        VkSemaphoreType::VK_SEMAPHORE_TYPE_TIMELINE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSemaphoreType {
    VK_SEMAPHORE_TYPE_BINARY = 0,
    VK_SEMAPHORE_TYPE_TIMELINE = 1,
    VK_SEMAPHORE_TYPE_MAX_ENUM = 2147483647,
}
impl VkResolveModeFlagBits {
    pub const VK_RESOLVE_MODE_NONE_KHR: VkResolveModeFlagBits =
        VkResolveModeFlagBits::VK_RESOLVE_MODE_NONE;
}
impl VkResolveModeFlagBits {
    pub const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: VkResolveModeFlagBits =
        VkResolveModeFlagBits::VK_RESOLVE_MODE_SAMPLE_ZERO_BIT;
}
impl VkResolveModeFlagBits {
    pub const VK_RESOLVE_MODE_AVERAGE_BIT_KHR: VkResolveModeFlagBits =
        VkResolveModeFlagBits::VK_RESOLVE_MODE_AVERAGE_BIT;
}
impl VkResolveModeFlagBits {
    pub const VK_RESOLVE_MODE_MIN_BIT_KHR: VkResolveModeFlagBits =
        VkResolveModeFlagBits::VK_RESOLVE_MODE_MIN_BIT;
}
impl VkResolveModeFlagBits {
    pub const VK_RESOLVE_MODE_MAX_BIT_KHR: VkResolveModeFlagBits =
        VkResolveModeFlagBits::VK_RESOLVE_MODE_MAX_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkResolveModeFlagBits {
    VK_RESOLVE_MODE_NONE = 0,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1,
    VK_RESOLVE_MODE_AVERAGE_BIT = 2,
    VK_RESOLVE_MODE_MIN_BIT = 4,
    VK_RESOLVE_MODE_MAX_BIT = 8,
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkResolveModeFlags = VkFlags;
impl VkDescriptorBindingFlagBits {
    pub const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: VkDescriptorBindingFlagBits =
        VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT;
}
impl VkDescriptorBindingFlagBits {
    pub const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT:
        VkDescriptorBindingFlagBits =
        VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT;
}
impl VkDescriptorBindingFlagBits {
    pub const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: VkDescriptorBindingFlagBits =
        VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT;
}
impl VkDescriptorBindingFlagBits {
    pub const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: VkDescriptorBindingFlagBits =
        VkDescriptorBindingFlagBits::VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDescriptorBindingFlagBits {
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8,
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkDescriptorBindingFlags = VkFlags;
impl VkSemaphoreWaitFlagBits {
    pub const VK_SEMAPHORE_WAIT_ANY_BIT_KHR: VkSemaphoreWaitFlagBits =
        VkSemaphoreWaitFlagBits::VK_SEMAPHORE_WAIT_ANY_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSemaphoreWaitFlagBits {
    VK_SEMAPHORE_WAIT_ANY_BIT = 1,
    VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkSemaphoreWaitFlags = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVulkan11Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageBuffer16BitAccess: VkBool32,
    pub uniformAndStorageBuffer16BitAccess: VkBool32,
    pub storagePushConstant16: VkBool32,
    pub storageInputOutput16: VkBool32,
    pub multiview: VkBool32,
    pub multiviewGeometryShader: VkBool32,
    pub multiviewTessellationShader: VkBool32,
    pub variablePointersStorageBuffer: VkBool32,
    pub variablePointers: VkBool32,
    pub protectedMemory: VkBool32,
    pub samplerYcbcrConversion: VkBool32,
    pub shaderDrawParameters: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkan11Features() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVulkan11Features> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkan11Features>(),
        64usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVulkan11Features))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkan11Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkan11Features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageBuffer16BitAccess) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(storageBuffer16BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uniformAndStorageBuffer16BitAccess) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(uniformAndStorageBuffer16BitAccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storagePushConstant16) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(storagePushConstant16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageInputOutput16) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(storageInputOutput16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiview) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(multiview)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiviewGeometryShader) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(multiviewGeometryShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiviewTessellationShader) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(multiviewTessellationShader)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).variablePointersStorageBuffer) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(variablePointersStorageBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variablePointers) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(variablePointers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protectedMemory) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(protectedMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplerYcbcrConversion) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(samplerYcbcrConversion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderDrawParameters) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Features),
            "::",
            stringify!(shaderDrawParameters)
        )
    );
}
impl Default for VkPhysicalDeviceVulkan11Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVulkan11Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceUUID: [u8; 16usize],
    pub driverUUID: [u8; 16usize],
    pub deviceLUID: [u8; 8usize],
    pub deviceNodeMask: u32,
    pub deviceLUIDValid: VkBool32,
    pub subgroupSize: u32,
    pub subgroupSupportedStages: VkShaderStageFlags,
    pub subgroupSupportedOperations: VkSubgroupFeatureFlags,
    pub subgroupQuadOperationsInAllStages: VkBool32,
    pub pointClippingBehavior: VkPointClippingBehavior,
    pub maxMultiviewViewCount: u32,
    pub maxMultiviewInstanceIndex: u32,
    pub protectedNoFault: VkBool32,
    pub maxPerSetDescriptors: u32,
    pub maxMemoryAllocationSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkan11Properties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVulkan11Properties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkan11Properties>(),
        112usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVulkan11Properties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkan11Properties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkan11Properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceUUID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(deviceUUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverUUID) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(driverUUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceLUID) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(deviceLUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceNodeMask) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(deviceNodeMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceLUIDValid) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(deviceLUIDValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subgroupSize) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(subgroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subgroupSupportedStages) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(subgroupSupportedStages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subgroupSupportedOperations) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(subgroupSupportedOperations)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).subgroupQuadOperationsInAllStages) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(subgroupQuadOperationsInAllStages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointClippingBehavior) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(pointClippingBehavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMultiviewViewCount) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(maxMultiviewViewCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMultiviewInstanceIndex) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(maxMultiviewInstanceIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protectedNoFault) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(protectedNoFault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPerSetDescriptors) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(maxPerSetDescriptors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMemoryAllocationSize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan11Properties),
            "::",
            stringify!(maxMemoryAllocationSize)
        )
    );
}
impl Default for VkPhysicalDeviceVulkan11Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVulkan12Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub samplerMirrorClampToEdge: VkBool32,
    pub drawIndirectCount: VkBool32,
    pub storageBuffer8BitAccess: VkBool32,
    pub uniformAndStorageBuffer8BitAccess: VkBool32,
    pub storagePushConstant8: VkBool32,
    pub shaderBufferInt64Atomics: VkBool32,
    pub shaderSharedInt64Atomics: VkBool32,
    pub shaderFloat16: VkBool32,
    pub shaderInt8: VkBool32,
    pub descriptorIndexing: VkBool32,
    pub shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexing: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexing: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    pub descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUpdateUnusedWhilePending: VkBool32,
    pub descriptorBindingPartiallyBound: VkBool32,
    pub descriptorBindingVariableDescriptorCount: VkBool32,
    pub runtimeDescriptorArray: VkBool32,
    pub samplerFilterMinmax: VkBool32,
    pub scalarBlockLayout: VkBool32,
    pub imagelessFramebuffer: VkBool32,
    pub uniformBufferStandardLayout: VkBool32,
    pub shaderSubgroupExtendedTypes: VkBool32,
    pub separateDepthStencilLayouts: VkBool32,
    pub hostQueryReset: VkBool32,
    pub timelineSemaphore: VkBool32,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
    pub vulkanMemoryModel: VkBool32,
    pub vulkanMemoryModelDeviceScope: VkBool32,
    pub vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
    pub shaderOutputViewportIndex: VkBool32,
    pub shaderOutputLayer: VkBool32,
    pub subgroupBroadcastDynamicId: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkan12Features() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVulkan12Features> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkan12Features>(),
        208usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVulkan12Features))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkan12Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkan12Features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplerMirrorClampToEdge) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(samplerMirrorClampToEdge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drawIndirectCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(drawIndirectCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageBuffer8BitAccess) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(storageBuffer8BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uniformAndStorageBuffer8BitAccess) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(uniformAndStorageBuffer8BitAccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storagePushConstant8) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(storagePushConstant8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderBufferInt64Atomics) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderBufferInt64Atomics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderSharedInt64Atomics) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderSharedInt64Atomics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderFloat16) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderFloat16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderInt8) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderInt8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorIndexing) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderInputAttachmentArrayDynamicIndexing) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderInputAttachmentArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderUniformTexelBufferArrayDynamicIndexing) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderUniformTexelBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageTexelBufferArrayDynamicIndexing) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderStorageTexelBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderUniformBufferArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderUniformBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSampledImageArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderSampledImageArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageBufferArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderStorageBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageImageArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderStorageImageArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderInputAttachmentArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderInputAttachmentArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderUniformTexelBufferArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderUniformTexelBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageTexelBufferArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderStorageTexelBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingUniformBufferUpdateAfterBind) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingUniformBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingSampledImageUpdateAfterBind) as usize
                - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingSampledImageUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingStorageImageUpdateAfterBind) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingStorageImageUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingStorageBufferUpdateAfterBind) as usize
                - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingStorageBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingUniformTexelBufferUpdateAfterBind) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingUniformTexelBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingStorageTexelBufferUpdateAfterBind) as usize
                - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingStorageTexelBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingUpdateUnusedWhilePending) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingUpdateUnusedWhilePending)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingPartiallyBound) as usize - ptr as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingPartiallyBound)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingVariableDescriptorCount) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(descriptorBindingVariableDescriptorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runtimeDescriptorArray) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(runtimeDescriptorArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplerFilterMinmax) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(samplerFilterMinmax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scalarBlockLayout) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(scalarBlockLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imagelessFramebuffer) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(imagelessFramebuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniformBufferStandardLayout) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(uniformBufferStandardLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderSubgroupExtendedTypes) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderSubgroupExtendedTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separateDepthStencilLayouts) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(separateDepthStencilLayouts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostQueryReset) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(hostQueryReset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timelineSemaphore) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(timelineSemaphore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferDeviceAddress) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(bufferDeviceAddress)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bufferDeviceAddressCaptureReplay) as usize - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(bufferDeviceAddressCaptureReplay)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bufferDeviceAddressMultiDevice) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(bufferDeviceAddressMultiDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vulkanMemoryModel) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(vulkanMemoryModel)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vulkanMemoryModelDeviceScope) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(vulkanMemoryModelDeviceScope)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vulkanMemoryModelAvailabilityVisibilityChains) as usize
                - ptr as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(vulkanMemoryModelAvailabilityVisibilityChains)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderOutputViewportIndex) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderOutputViewportIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderOutputLayer) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(shaderOutputLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subgroupBroadcastDynamicId) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Features),
            "::",
            stringify!(subgroupBroadcastDynamicId)
        )
    );
}
impl Default for VkPhysicalDeviceVulkan12Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkConformanceVersion {
    pub major: u8,
    pub minor: u8,
    pub subminor: u8,
    pub patch: u8,
}
#[test]
fn bindgen_test_layout_VkConformanceVersion() {
    const UNINIT: ::std::mem::MaybeUninit<VkConformanceVersion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkConformanceVersion>(),
        4usize,
        concat!("Size of: ", stringify!(VkConformanceVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<VkConformanceVersion>(),
        1usize,
        concat!("Alignment of ", stringify!(VkConformanceVersion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConformanceVersion),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConformanceVersion),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subminor) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConformanceVersion),
            "::",
            stringify!(subminor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).patch) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConformanceVersion),
            "::",
            stringify!(patch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVulkan12Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub driverID: VkDriverId,
    pub driverName: [::std::os::raw::c_char; 256usize],
    pub driverInfo: [::std::os::raw::c_char; 256usize],
    pub conformanceVersion: VkConformanceVersion,
    pub denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    pub roundingModeIndependence: VkShaderFloatControlsIndependence,
    pub shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    pub shaderDenormPreserveFloat16: VkBool32,
    pub shaderDenormPreserveFloat32: VkBool32,
    pub shaderDenormPreserveFloat64: VkBool32,
    pub shaderDenormFlushToZeroFloat16: VkBool32,
    pub shaderDenormFlushToZeroFloat32: VkBool32,
    pub shaderDenormFlushToZeroFloat64: VkBool32,
    pub shaderRoundingModeRTEFloat16: VkBool32,
    pub shaderRoundingModeRTEFloat32: VkBool32,
    pub shaderRoundingModeRTEFloat64: VkBool32,
    pub shaderRoundingModeRTZFloat16: VkBool32,
    pub shaderRoundingModeRTZFloat32: VkBool32,
    pub shaderRoundingModeRTZFloat64: VkBool32,
    pub maxUpdateAfterBindDescriptorsInAllPools: u32,
    pub shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    pub robustBufferAccessUpdateAfterBind: VkBool32,
    pub quadDivergentImplicitLod: VkBool32,
    pub maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    pub maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    pub maxPerStageUpdateAfterBindResources: u32,
    pub maxDescriptorSetUpdateAfterBindSamplers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindSampledImages: u32,
    pub maxDescriptorSetUpdateAfterBindStorageImages: u32,
    pub maxDescriptorSetUpdateAfterBindInputAttachments: u32,
    pub supportedDepthResolveModes: VkResolveModeFlags,
    pub supportedStencilResolveModes: VkResolveModeFlags,
    pub independentResolveNone: VkBool32,
    pub independentResolve: VkBool32,
    pub filterMinmaxSingleComponentFormats: VkBool32,
    pub filterMinmaxImageComponentMapping: VkBool32,
    pub maxTimelineSemaphoreValueDifference: u64,
    pub framebufferIntegerColorSampleCounts: VkSampleCountFlags,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkan12Properties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVulkan12Properties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkan12Properties>(),
        736usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVulkan12Properties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkan12Properties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkan12Properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(driverID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverName) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(driverName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverInfo) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(driverInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conformanceVersion) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(conformanceVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).denormBehaviorIndependence) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(denormBehaviorIndependence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roundingModeIndependence) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(roundingModeIndependence)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSignedZeroInfNanPreserveFloat16) as usize
                - ptr as usize
        },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat16)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSignedZeroInfNanPreserveFloat32) as usize
                - ptr as usize
        },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat32)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSignedZeroInfNanPreserveFloat64) as usize
                - ptr as usize
        },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderDenormPreserveFloat16) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormPreserveFloat16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderDenormPreserveFloat32) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormPreserveFloat32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderDenormPreserveFloat64) as usize - ptr as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormPreserveFloat64)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderDenormFlushToZeroFloat16) as usize - ptr as usize
        },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat16)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderDenormFlushToZeroFloat32) as usize - ptr as usize
        },
        572usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat32)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderDenormFlushToZeroFloat64) as usize - ptr as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat64)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTEFloat16) as usize - ptr as usize
        },
        580usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTEFloat16)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTEFloat32) as usize - ptr as usize
        },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTEFloat32)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTEFloat64) as usize - ptr as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTEFloat64)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTZFloat16) as usize - ptr as usize
        },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTZFloat16)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTZFloat32) as usize - ptr as usize
        },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTZFloat32)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTZFloat64) as usize - ptr as usize
        },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderRoundingModeRTZFloat64)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxUpdateAfterBindDescriptorsInAllPools) as usize
                - ptr as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxUpdateAfterBindDescriptorsInAllPools)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderUniformBufferArrayNonUniformIndexingNative) as usize
                - ptr as usize
        },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderUniformBufferArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSampledImageArrayNonUniformIndexingNative) as usize
                - ptr as usize
        },
        612usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderSampledImageArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageBufferArrayNonUniformIndexingNative) as usize
                - ptr as usize
        },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderStorageBufferArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageImageArrayNonUniformIndexingNative) as usize
                - ptr as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderStorageImageArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderInputAttachmentArrayNonUniformIndexingNative) as usize
                - ptr as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(shaderInputAttachmentArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).robustBufferAccessUpdateAfterBind) as usize - ptr as usize
        },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(robustBufferAccessUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quadDivergentImplicitLod) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(quadDivergentImplicitLod)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindSamplers) as usize
                - ptr as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindSamplers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindUniformBuffers) as usize
                - ptr as usize
        },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindStorageBuffers) as usize
                - ptr as usize
        },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindSampledImages) as usize
                - ptr as usize
        },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindStorageImages) as usize
                - ptr as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindInputAttachments)
                as usize
                - ptr as usize
        },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindInputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageUpdateAfterBindResources) as usize - ptr as usize
        },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxPerStageUpdateAfterBindResources)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindSamplers) as usize
                - ptr as usize
        },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindSamplers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindUniformBuffers) as usize
                - ptr as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
                as usize
                - ptr as usize
        },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindStorageBuffers) as usize
                - ptr as usize
        },
        676usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
                as usize
                - ptr as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindSampledImages) as usize
                - ptr as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindStorageImages) as usize
                - ptr as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindInputAttachments) as usize
                - ptr as usize
        },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindInputAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedDepthResolveModes) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(supportedDepthResolveModes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).supportedStencilResolveModes) as usize - ptr as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(supportedStencilResolveModes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).independentResolveNone) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(independentResolveNone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).independentResolve) as usize - ptr as usize },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(independentResolve)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filterMinmaxSingleComponentFormats) as usize - ptr as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(filterMinmaxSingleComponentFormats)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filterMinmaxImageComponentMapping) as usize - ptr as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(filterMinmaxImageComponentMapping)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTimelineSemaphoreValueDifference) as usize - ptr as usize
        },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(maxTimelineSemaphoreValueDifference)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).framebufferIntegerColorSampleCounts) as usize - ptr as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan12Properties),
            "::",
            stringify!(framebufferIntegerColorSampleCounts)
        )
    );
}
impl Default for VkPhysicalDeviceVulkan12Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageFormatListCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewFormatCount: u32,
    pub pViewFormats: *const VkFormat,
}
#[test]
fn bindgen_test_layout_VkImageFormatListCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageFormatListCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageFormatListCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkImageFormatListCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageFormatListCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageFormatListCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatListCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatListCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewFormatCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatListCreateInfo),
            "::",
            stringify!(viewFormatCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pViewFormats) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageFormatListCreateInfo),
            "::",
            stringify!(pViewFormats)
        )
    );
}
impl Default for VkImageFormatListCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAttachmentDescription2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkAttachmentDescriptionFlags,
    pub format: VkFormat,
    pub samples: VkSampleCountFlagBits,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub stencilLoadOp: VkAttachmentLoadOp,
    pub stencilStoreOp: VkAttachmentStoreOp,
    pub initialLayout: VkImageLayout,
    pub finalLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkAttachmentDescription2() {
    const UNINIT: ::std::mem::MaybeUninit<VkAttachmentDescription2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentDescription2>(),
        56usize,
        concat!("Size of: ", stringify!(VkAttachmentDescription2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentDescription2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAttachmentDescription2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samples) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadOp) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(loadOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storeOp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(storeOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilLoadOp) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(stencilLoadOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilStoreOp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(stencilStoreOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialLayout) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(initialLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finalLayout) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescription2),
            "::",
            stringify!(finalLayout)
        )
    );
}
impl Default for VkAttachmentDescription2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAttachmentReference2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachment: u32,
    pub layout: VkImageLayout,
    pub aspectMask: VkImageAspectFlags,
}
#[test]
fn bindgen_test_layout_VkAttachmentReference2() {
    const UNINIT: ::std::mem::MaybeUninit<VkAttachmentReference2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentReference2>(),
        32usize,
        concat!("Size of: ", stringify!(VkAttachmentReference2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentReference2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAttachmentReference2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference2),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference2),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspectMask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReference2),
            "::",
            stringify!(aspectMask)
        )
    );
}
impl Default for VkAttachmentReference2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassDescription2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSubpassDescriptionFlags,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub viewMask: u32,
    pub inputAttachmentCount: u32,
    pub pInputAttachments: *const VkAttachmentReference2,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkAttachmentReference2,
    pub pResolveAttachments: *const VkAttachmentReference2,
    pub pDepthStencilAttachment: *const VkAttachmentReference2,
    pub preserveAttachmentCount: u32,
    pub pPreserveAttachments: *const u32,
}
#[test]
fn bindgen_test_layout_VkSubpassDescription2() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassDescription2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassDescription2>(),
        88usize,
        concat!("Size of: ", stringify!(VkSubpassDescription2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassDescription2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassDescription2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineBindPoint) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewMask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(viewMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputAttachmentCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(inputAttachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputAttachments) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pInputAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorAttachmentCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(colorAttachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pColorAttachments) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pColorAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResolveAttachments) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pResolveAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDepthStencilAttachment) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pDepthStencilAttachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preserveAttachmentCount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(preserveAttachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPreserveAttachments) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescription2),
            "::",
            stringify!(pPreserveAttachments)
        )
    );
}
impl Default for VkSubpassDescription2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassDependency2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSubpass: u32,
    pub dstSubpass: u32,
    pub srcStageMask: VkPipelineStageFlags,
    pub dstStageMask: VkPipelineStageFlags,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub dependencyFlags: VkDependencyFlags,
    pub viewOffset: i32,
}
#[test]
fn bindgen_test_layout_VkSubpassDependency2() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassDependency2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassDependency2>(),
        48usize,
        concat!("Size of: ", stringify!(VkSubpassDependency2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassDependency2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassDependency2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcSubpass) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(srcSubpass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSubpass) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(dstSubpass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcStageMask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(srcStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstStageMask) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(dstStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAccessMask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAccessMask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(dstAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencyFlags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(dependencyFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewOffset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDependency2),
            "::",
            stringify!(viewOffset)
        )
    );
}
impl Default for VkSubpassDependency2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassCreateInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkRenderPassCreateFlags,
    pub attachmentCount: u32,
    pub pAttachments: *const VkAttachmentDescription2,
    pub subpassCount: u32,
    pub pSubpasses: *const VkSubpassDescription2,
    pub dependencyCount: u32,
    pub pDependencies: *const VkSubpassDependency2,
    pub correlatedViewMaskCount: u32,
    pub pCorrelatedViewMasks: *const u32,
}
#[test]
fn bindgen_test_layout_VkRenderPassCreateInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassCreateInfo2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassCreateInfo2>(),
        80usize,
        concat!("Size of: ", stringify!(VkRenderPassCreateInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassCreateInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassCreateInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachmentCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAttachments) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(pAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpassCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(subpassCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSubpasses) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(pSubpasses)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencyCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(dependencyCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDependencies) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(pDependencies)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).correlatedViewMaskCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(correlatedViewMaskCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCorrelatedViewMasks) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreateInfo2),
            "::",
            stringify!(pCorrelatedViewMasks)
        )
    );
}
impl Default for VkRenderPassCreateInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub contents: VkSubpassContents,
}
#[test]
fn bindgen_test_layout_VkSubpassBeginInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassBeginInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassBeginInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSubpassBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassBeginInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contents) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassBeginInfo),
            "::",
            stringify!(contents)
        )
    );
}
impl Default for VkSubpassBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassEndInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkSubpassEndInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassEndInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassEndInfo>(),
        16usize,
        concat!("Size of: ", stringify!(VkSubpassEndInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassEndInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassEndInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassEndInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassEndInfo),
            "::",
            stringify!(pNext)
        )
    );
}
impl Default for VkSubpassEndInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevice8BitStorageFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageBuffer8BitAccess: VkBool32,
    pub uniformAndStorageBuffer8BitAccess: VkBool32,
    pub storagePushConstant8: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevice8BitStorageFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevice8BitStorageFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevice8BitStorageFeatures>(),
        32usize,
        concat!("Size of: ", stringify!(VkPhysicalDevice8BitStorageFeatures))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevice8BitStorageFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevice8BitStorageFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice8BitStorageFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice8BitStorageFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageBuffer8BitAccess) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice8BitStorageFeatures),
            "::",
            stringify!(storageBuffer8BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uniformAndStorageBuffer8BitAccess) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice8BitStorageFeatures),
            "::",
            stringify!(uniformAndStorageBuffer8BitAccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storagePushConstant8) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice8BitStorageFeatures),
            "::",
            stringify!(storagePushConstant8)
        )
    );
}
impl Default for VkPhysicalDevice8BitStorageFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDriverProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub driverID: VkDriverId,
    pub driverName: [::std::os::raw::c_char; 256usize],
    pub driverInfo: [::std::os::raw::c_char; 256usize],
    pub conformanceVersion: VkConformanceVersion,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDriverProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDriverProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDriverProperties>(),
        536usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceDriverProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDriverProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDriverProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(driverID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverName) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(driverName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverInfo) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(driverInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conformanceVersion) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDriverProperties),
            "::",
            stringify!(conformanceVersion)
        )
    );
}
impl Default for VkPhysicalDeviceDriverProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderAtomicInt64Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderBufferInt64Atomics: VkBool32,
    pub shaderSharedInt64Atomics: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderAtomicInt64Features() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderAtomicInt64Features> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderAtomicInt64Features>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderAtomicInt64Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderBufferInt64Atomics) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features),
            "::",
            stringify!(shaderBufferInt64Atomics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderSharedInt64Atomics) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicInt64Features),
            "::",
            stringify!(shaderSharedInt64Atomics)
        )
    );
}
impl Default for VkPhysicalDeviceShaderAtomicInt64Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderFloat16Int8Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderFloat16: VkBool32,
    pub shaderInt8: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderFloat16Int8Features() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderFloat16Int8Features> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderFloat16Int8Features>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderFloat16Int8Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderFloat16) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features),
            "::",
            stringify!(shaderFloat16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderInt8) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderFloat16Int8Features),
            "::",
            stringify!(shaderInt8)
        )
    );
}
impl Default for VkPhysicalDeviceShaderFloat16Int8Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFloatControlsProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    pub roundingModeIndependence: VkShaderFloatControlsIndependence,
    pub shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    pub shaderDenormPreserveFloat16: VkBool32,
    pub shaderDenormPreserveFloat32: VkBool32,
    pub shaderDenormPreserveFloat64: VkBool32,
    pub shaderDenormFlushToZeroFloat16: VkBool32,
    pub shaderDenormFlushToZeroFloat32: VkBool32,
    pub shaderDenormFlushToZeroFloat64: VkBool32,
    pub shaderRoundingModeRTEFloat16: VkBool32,
    pub shaderRoundingModeRTEFloat32: VkBool32,
    pub shaderRoundingModeRTEFloat64: VkBool32,
    pub shaderRoundingModeRTZFloat16: VkBool32,
    pub shaderRoundingModeRTZFloat32: VkBool32,
    pub shaderRoundingModeRTZFloat64: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFloatControlsProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFloatControlsProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFloatControlsProperties>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFloatControlsProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFloatControlsProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).denormBehaviorIndependence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(denormBehaviorIndependence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).roundingModeIndependence) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(roundingModeIndependence)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSignedZeroInfNanPreserveFloat16) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat16)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSignedZeroInfNanPreserveFloat32) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat32)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSignedZeroInfNanPreserveFloat64) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderSignedZeroInfNanPreserveFloat64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderDenormPreserveFloat16) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormPreserveFloat16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderDenormPreserveFloat32) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormPreserveFloat32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderDenormPreserveFloat64) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormPreserveFloat64)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderDenormFlushToZeroFloat16) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat16)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderDenormFlushToZeroFloat32) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat32)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderDenormFlushToZeroFloat64) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderDenormFlushToZeroFloat64)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTEFloat16) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTEFloat16)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTEFloat32) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTEFloat32)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTEFloat64) as usize - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTEFloat64)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTZFloat16) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTZFloat16)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTZFloat32) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTZFloat32)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderRoundingModeRTZFloat64) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFloatControlsProperties),
            "::",
            stringify!(shaderRoundingModeRTZFloat64)
        )
    );
}
impl Default for VkPhysicalDeviceFloatControlsProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub bindingCount: u32,
    pub pBindingFlags: *const VkDescriptorBindingFlags,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutBindingFlagsCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetLayoutBindingFlagsCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutBindingFlagsCreateInfo>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutBindingFlagsCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindingCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo),
            "::",
            stringify!(bindingCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBindingFlags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutBindingFlagsCreateInfo),
            "::",
            stringify!(pBindingFlags)
        )
    );
}
impl Default for VkDescriptorSetLayoutBindingFlagsCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDescriptorIndexingFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexing: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexing: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    pub descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUpdateUnusedWhilePending: VkBool32,
    pub descriptorBindingPartiallyBound: VkBool32,
    pub descriptorBindingVariableDescriptorCount: VkBool32,
    pub runtimeDescriptorArray: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDescriptorIndexingFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDescriptorIndexingFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDescriptorIndexingFeatures>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDescriptorIndexingFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderInputAttachmentArrayDynamicIndexing) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderInputAttachmentArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderUniformTexelBufferArrayDynamicIndexing) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderUniformTexelBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageTexelBufferArrayDynamicIndexing) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderStorageTexelBufferArrayDynamicIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderUniformBufferArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderUniformBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSampledImageArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderSampledImageArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageBufferArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderStorageBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageImageArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderStorageImageArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderInputAttachmentArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderInputAttachmentArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderUniformTexelBufferArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderUniformTexelBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageTexelBufferArrayNonUniformIndexing) as usize
                - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(shaderStorageTexelBufferArrayNonUniformIndexing)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingUniformBufferUpdateAfterBind) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingUniformBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingSampledImageUpdateAfterBind) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingSampledImageUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingStorageImageUpdateAfterBind) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingStorageImageUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingStorageBufferUpdateAfterBind) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingStorageBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingUniformTexelBufferUpdateAfterBind) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingUniformTexelBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingStorageTexelBufferUpdateAfterBind) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingStorageTexelBufferUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingUpdateUnusedWhilePending) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingUpdateUnusedWhilePending)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingPartiallyBound) as usize - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingPartiallyBound)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingVariableDescriptorCount) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(descriptorBindingVariableDescriptorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).runtimeDescriptorArray) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingFeatures),
            "::",
            stringify!(runtimeDescriptorArray)
        )
    );
}
impl Default for VkPhysicalDeviceDescriptorIndexingFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDescriptorIndexingProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxUpdateAfterBindDescriptorsInAllPools: u32,
    pub shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    pub robustBufferAccessUpdateAfterBind: VkBool32,
    pub quadDivergentImplicitLod: VkBool32,
    pub maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    pub maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    pub maxPerStageUpdateAfterBindResources: u32,
    pub maxDescriptorSetUpdateAfterBindSamplers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindSampledImages: u32,
    pub maxDescriptorSetUpdateAfterBindStorageImages: u32,
    pub maxDescriptorSetUpdateAfterBindInputAttachments: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDescriptorIndexingProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDescriptorIndexingProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDescriptorIndexingProperties>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDescriptorIndexingProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxUpdateAfterBindDescriptorsInAllPools) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxUpdateAfterBindDescriptorsInAllPools)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderUniformBufferArrayNonUniformIndexingNative) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(shaderUniformBufferArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSampledImageArrayNonUniformIndexingNative) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(shaderSampledImageArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageBufferArrayNonUniformIndexingNative) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(shaderStorageBufferArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderStorageImageArrayNonUniformIndexingNative) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(shaderStorageImageArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderInputAttachmentArrayNonUniformIndexingNative) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(shaderInputAttachmentArrayNonUniformIndexingNative)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).robustBufferAccessUpdateAfterBind) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(robustBufferAccessUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quadDivergentImplicitLod) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(quadDivergentImplicitLod)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindSamplers) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindSamplers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindUniformBuffers) as usize
                - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindStorageBuffers) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindSampledImages) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindStorageImages) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindInputAttachments)
                as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindInputAttachments)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageUpdateAfterBindResources) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxPerStageUpdateAfterBindResources)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindSamplers) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindSamplers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindUniformBuffers) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
                as usize
                - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindUniformBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindStorageBuffers) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
                as usize
                - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageBuffersDynamic)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindSampledImages) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindSampledImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindStorageImages) as usize
                - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindStorageImages)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindInputAttachments) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorIndexingProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindInputAttachments)
        )
    );
}
impl Default for VkPhysicalDeviceDescriptorIndexingProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub descriptorSetCount: u32,
    pub pDescriptorCounts: *const u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetVariableDescriptorCountAllocateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetVariableDescriptorCountAllocateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetVariableDescriptorCountAllocateInfo>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetVariableDescriptorCountAllocateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorSetCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo),
            "::",
            stringify!(descriptorSetCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDescriptorCounts) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountAllocateInfo),
            "::",
            stringify!(pDescriptorCounts)
        )
    );
}
impl Default for VkDescriptorSetVariableDescriptorCountAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxVariableDescriptorCount: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetVariableDescriptorCountLayoutSupport() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetVariableDescriptorCountLayoutSupport> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetVariableDescriptorCountLayoutSupport>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorSetVariableDescriptorCountLayoutSupport)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetVariableDescriptorCountLayoutSupport>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorSetVariableDescriptorCountLayoutSupport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountLayoutSupport),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountLayoutSupport),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVariableDescriptorCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetVariableDescriptorCountLayoutSupport),
            "::",
            stringify!(maxVariableDescriptorCount)
        )
    );
}
impl Default for VkDescriptorSetVariableDescriptorCountLayoutSupport {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassDescriptionDepthStencilResolve {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub depthResolveMode: VkResolveModeFlagBits,
    pub stencilResolveMode: VkResolveModeFlagBits,
    pub pDepthStencilResolveAttachment: *const VkAttachmentReference2,
}
#[test]
fn bindgen_test_layout_VkSubpassDescriptionDepthStencilResolve() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassDescriptionDepthStencilResolve> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassDescriptionDepthStencilResolve>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassDescriptionDepthStencilResolve>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSubpassDescriptionDepthStencilResolve)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthResolveMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve),
            "::",
            stringify!(depthResolveMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilResolveMode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve),
            "::",
            stringify!(stencilResolveMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pDepthStencilResolveAttachment) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassDescriptionDepthStencilResolve),
            "::",
            stringify!(pDepthStencilResolveAttachment)
        )
    );
}
impl Default for VkSubpassDescriptionDepthStencilResolve {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDepthStencilResolveProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportedDepthResolveModes: VkResolveModeFlags,
    pub supportedStencilResolveModes: VkResolveModeFlags,
    pub independentResolveNone: VkBool32,
    pub independentResolve: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDepthStencilResolveProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDepthStencilResolveProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDepthStencilResolveProperties>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDepthStencilResolveProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedDepthResolveModes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(supportedDepthResolveModes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).supportedStencilResolveModes) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(supportedStencilResolveModes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).independentResolveNone) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(independentResolveNone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).independentResolve) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthStencilResolveProperties),
            "::",
            stringify!(independentResolve)
        )
    );
}
impl Default for VkPhysicalDeviceDepthStencilResolveProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub scalarBlockLayout: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceScalarBlockLayoutFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceScalarBlockLayoutFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceScalarBlockLayoutFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceScalarBlockLayoutFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceScalarBlockLayoutFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceScalarBlockLayoutFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceScalarBlockLayoutFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceScalarBlockLayoutFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scalarBlockLayout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceScalarBlockLayoutFeatures),
            "::",
            stringify!(scalarBlockLayout)
        )
    );
}
impl Default for VkPhysicalDeviceScalarBlockLayoutFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageStencilUsageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stencilUsage: VkImageUsageFlags,
}
#[test]
fn bindgen_test_layout_VkImageStencilUsageCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageStencilUsageCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageStencilUsageCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageStencilUsageCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageStencilUsageCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageStencilUsageCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageStencilUsageCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageStencilUsageCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilUsage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageStencilUsageCreateInfo),
            "::",
            stringify!(stencilUsage)
        )
    );
}
impl Default for VkImageStencilUsageCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSamplerReductionModeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub reductionMode: VkSamplerReductionMode,
}
#[test]
fn bindgen_test_layout_VkSamplerReductionModeCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSamplerReductionModeCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSamplerReductionModeCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkSamplerReductionModeCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerReductionModeCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerReductionModeCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerReductionModeCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerReductionModeCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reductionMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerReductionModeCreateInfo),
            "::",
            stringify!(reductionMode)
        )
    );
}
impl Default for VkSamplerReductionModeCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub filterMinmaxSingleComponentFormats: VkBool32,
    pub filterMinmaxImageComponentMapping: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSamplerFilterMinmaxProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSamplerFilterMinmaxProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSamplerFilterMinmaxProperties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSamplerFilterMinmaxProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filterMinmaxSingleComponentFormats) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties),
            "::",
            stringify!(filterMinmaxSingleComponentFormats)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).filterMinmaxImageComponentMapping) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSamplerFilterMinmaxProperties),
            "::",
            stringify!(filterMinmaxImageComponentMapping)
        )
    );
}
impl Default for VkPhysicalDeviceSamplerFilterMinmaxProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vulkanMemoryModel: VkBool32,
    pub vulkanMemoryModelDeviceScope: VkBool32,
    pub vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkanMemoryModelFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVulkanMemoryModelFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkanMemoryModelFeatures>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkanMemoryModelFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vulkanMemoryModel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures),
            "::",
            stringify!(vulkanMemoryModel)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vulkanMemoryModelDeviceScope) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures),
            "::",
            stringify!(vulkanMemoryModelDeviceScope)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vulkanMemoryModelAvailabilityVisibilityChains) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkanMemoryModelFeatures),
            "::",
            stringify!(vulkanMemoryModelAvailabilityVisibilityChains)
        )
    );
}
impl Default for VkPhysicalDeviceVulkanMemoryModelFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImagelessFramebufferFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imagelessFramebuffer: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImagelessFramebufferFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImagelessFramebufferFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImagelessFramebufferFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImagelessFramebufferFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImagelessFramebufferFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImagelessFramebufferFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImagelessFramebufferFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImagelessFramebufferFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imagelessFramebuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImagelessFramebufferFeatures),
            "::",
            stringify!(imagelessFramebuffer)
        )
    );
}
impl Default for VkPhysicalDeviceImagelessFramebufferFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFramebufferAttachmentImageInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageCreateFlags,
    pub usage: VkImageUsageFlags,
    pub width: u32,
    pub height: u32,
    pub layerCount: u32,
    pub viewFormatCount: u32,
    pub pViewFormats: *const VkFormat,
}
#[test]
fn bindgen_test_layout_VkFramebufferAttachmentImageInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkFramebufferAttachmentImageInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFramebufferAttachmentImageInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkFramebufferAttachmentImageInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFramebufferAttachmentImageInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkFramebufferAttachmentImageInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(layerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewFormatCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(viewFormatCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pViewFormats) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentImageInfo),
            "::",
            stringify!(pViewFormats)
        )
    );
}
impl Default for VkFramebufferAttachmentImageInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFramebufferAttachmentsCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentImageInfoCount: u32,
    pub pAttachmentImageInfos: *const VkFramebufferAttachmentImageInfo,
}
#[test]
fn bindgen_test_layout_VkFramebufferAttachmentsCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkFramebufferAttachmentsCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFramebufferAttachmentsCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkFramebufferAttachmentsCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFramebufferAttachmentsCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkFramebufferAttachmentsCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentsCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentsCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachmentImageInfoCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentsCreateInfo),
            "::",
            stringify!(attachmentImageInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAttachmentImageInfos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferAttachmentsCreateInfo),
            "::",
            stringify!(pAttachmentImageInfos)
        )
    );
}
impl Default for VkFramebufferAttachmentsCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassAttachmentBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentCount: u32,
    pub pAttachments: *const VkImageView,
}
#[test]
fn bindgen_test_layout_VkRenderPassAttachmentBeginInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassAttachmentBeginInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassAttachmentBeginInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkRenderPassAttachmentBeginInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassAttachmentBeginInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassAttachmentBeginInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassAttachmentBeginInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassAttachmentBeginInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachmentCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassAttachmentBeginInfo),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAttachments) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassAttachmentBeginInfo),
            "::",
            stringify!(pAttachments)
        )
    );
}
impl Default for VkRenderPassAttachmentBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub uniformBufferStandardLayout: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceUniformBufferStandardLayoutFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceUniformBufferStandardLayoutFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceUniformBufferStandardLayoutFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceUniformBufferStandardLayoutFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceUniformBufferStandardLayoutFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceUniformBufferStandardLayoutFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniformBufferStandardLayout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceUniformBufferStandardLayoutFeatures),
            "::",
            stringify!(uniformBufferStandardLayout)
        )
    );
}
impl Default for VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSubgroupExtendedTypes: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderSubgroupExtendedTypes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures),
            "::",
            stringify!(shaderSubgroupExtendedTypes)
        )
    );
}
impl Default for VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub separateDepthStencilLayouts: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separateDepthStencilLayouts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures),
            "::",
            stringify!(separateDepthStencilLayouts)
        )
    );
}
impl Default for VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAttachmentReferenceStencilLayout {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stencilLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkAttachmentReferenceStencilLayout() {
    const UNINIT: ::std::mem::MaybeUninit<VkAttachmentReferenceStencilLayout> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentReferenceStencilLayout>(),
        24usize,
        concat!("Size of: ", stringify!(VkAttachmentReferenceStencilLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentReferenceStencilLayout>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAttachmentReferenceStencilLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReferenceStencilLayout),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReferenceStencilLayout),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilLayout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentReferenceStencilLayout),
            "::",
            stringify!(stencilLayout)
        )
    );
}
impl Default for VkAttachmentReferenceStencilLayout {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAttachmentDescriptionStencilLayout {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stencilInitialLayout: VkImageLayout,
    pub stencilFinalLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkAttachmentDescriptionStencilLayout() {
    const UNINIT: ::std::mem::MaybeUninit<VkAttachmentDescriptionStencilLayout> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentDescriptionStencilLayout>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkAttachmentDescriptionStencilLayout)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentDescriptionStencilLayout>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAttachmentDescriptionStencilLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescriptionStencilLayout),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescriptionStencilLayout),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilInitialLayout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescriptionStencilLayout),
            "::",
            stringify!(stencilInitialLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilFinalLayout) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentDescriptionStencilLayout),
            "::",
            stringify!(stencilFinalLayout)
        )
    );
}
impl Default for VkAttachmentDescriptionStencilLayout {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceHostQueryResetFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hostQueryReset: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceHostQueryResetFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceHostQueryResetFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceHostQueryResetFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceHostQueryResetFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceHostQueryResetFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceHostQueryResetFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceHostQueryResetFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceHostQueryResetFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostQueryReset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceHostQueryResetFeatures),
            "::",
            stringify!(hostQueryReset)
        )
    );
}
impl Default for VkPhysicalDeviceHostQueryResetFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub timelineSemaphore: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTimelineSemaphoreFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceTimelineSemaphoreFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTimelineSemaphoreFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTimelineSemaphoreFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timelineSemaphore) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreFeatures),
            "::",
            stringify!(timelineSemaphore)
        )
    );
}
impl Default for VkPhysicalDeviceTimelineSemaphoreFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceTimelineSemaphoreProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxTimelineSemaphoreValueDifference: u64,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTimelineSemaphoreProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceTimelineSemaphoreProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTimelineSemaphoreProperties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTimelineSemaphoreProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTimelineSemaphoreValueDifference) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTimelineSemaphoreProperties),
            "::",
            stringify!(maxTimelineSemaphoreValueDifference)
        )
    );
}
impl Default for VkPhysicalDeviceTimelineSemaphoreProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSemaphoreTypeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphoreType: VkSemaphoreType,
    pub initialValue: u64,
}
#[test]
fn bindgen_test_layout_VkSemaphoreTypeCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSemaphoreTypeCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreTypeCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkSemaphoreTypeCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreTypeCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreTypeCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreTypeCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreTypeCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semaphoreType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreTypeCreateInfo),
            "::",
            stringify!(semaphoreType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialValue) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreTypeCreateInfo),
            "::",
            stringify!(initialValue)
        )
    );
}
impl Default for VkSemaphoreTypeCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkTimelineSemaphoreSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreValueCount: u32,
    pub pWaitSemaphoreValues: *const u64,
    pub signalSemaphoreValueCount: u32,
    pub pSignalSemaphoreValues: *const u64,
}
#[test]
fn bindgen_test_layout_VkTimelineSemaphoreSubmitInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkTimelineSemaphoreSubmitInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkTimelineSemaphoreSubmitInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkTimelineSemaphoreSubmitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkTimelineSemaphoreSubmitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkTimelineSemaphoreSubmitInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitSemaphoreValueCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(waitSemaphoreValueCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWaitSemaphoreValues) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(pWaitSemaphoreValues)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signalSemaphoreValueCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(signalSemaphoreValueCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSignalSemaphoreValues) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTimelineSemaphoreSubmitInfo),
            "::",
            stringify!(pSignalSemaphoreValues)
        )
    );
}
impl Default for VkTimelineSemaphoreSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSemaphoreWaitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSemaphoreWaitFlags,
    pub semaphoreCount: u32,
    pub pSemaphores: *const VkSemaphore,
    pub pValues: *const u64,
}
#[test]
fn bindgen_test_layout_VkSemaphoreWaitInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSemaphoreWaitInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreWaitInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkSemaphoreWaitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreWaitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreWaitInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semaphoreCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(semaphoreCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSemaphores) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(pSemaphores)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pValues) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreWaitInfo),
            "::",
            stringify!(pValues)
        )
    );
}
impl Default for VkSemaphoreWaitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSemaphoreSignalInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_VkSemaphoreSignalInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSemaphoreSignalInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreSignalInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkSemaphoreSignalInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreSignalInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreSignalInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSignalInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSignalInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semaphore) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSignalInfo),
            "::",
            stringify!(semaphore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSignalInfo),
            "::",
            stringify!(value)
        )
    );
}
impl Default for VkSemaphoreSignalInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceBufferDeviceAddressFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceBufferDeviceAddressFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceBufferDeviceAddressFeatures>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceBufferDeviceAddressFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferDeviceAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures),
            "::",
            stringify!(bufferDeviceAddress)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bufferDeviceAddressCaptureReplay) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures),
            "::",
            stringify!(bufferDeviceAddressCaptureReplay)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bufferDeviceAddressMultiDevice) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeatures),
            "::",
            stringify!(bufferDeviceAddressMultiDevice)
        )
    );
}
impl Default for VkPhysicalDeviceBufferDeviceAddressFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferDeviceAddressInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkBufferDeviceAddressInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferDeviceAddressInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferDeviceAddressInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferDeviceAddressInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferDeviceAddressInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferDeviceAddressInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressInfo),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for VkBufferDeviceAddressInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferOpaqueCaptureAddressCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub opaqueCaptureAddress: u64,
}
#[test]
fn bindgen_test_layout_VkBufferOpaqueCaptureAddressCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferOpaqueCaptureAddressCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferOpaqueCaptureAddressCreateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkBufferOpaqueCaptureAddressCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferOpaqueCaptureAddressCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBufferOpaqueCaptureAddressCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferOpaqueCaptureAddressCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferOpaqueCaptureAddressCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaqueCaptureAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferOpaqueCaptureAddressCreateInfo),
            "::",
            stringify!(opaqueCaptureAddress)
        )
    );
}
impl Default for VkBufferOpaqueCaptureAddressCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub opaqueCaptureAddress: u64,
}
#[test]
fn bindgen_test_layout_VkMemoryOpaqueCaptureAddressAllocateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryOpaqueCaptureAddressAllocateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryOpaqueCaptureAddressAllocateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkMemoryOpaqueCaptureAddressAllocateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryOpaqueCaptureAddressAllocateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkMemoryOpaqueCaptureAddressAllocateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryOpaqueCaptureAddressAllocateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryOpaqueCaptureAddressAllocateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaqueCaptureAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryOpaqueCaptureAddressAllocateInfo),
            "::",
            stringify!(opaqueCaptureAddress)
        )
    );
}
impl Default for VkMemoryOpaqueCaptureAddressAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
}
#[test]
fn bindgen_test_layout_VkDeviceMemoryOpaqueCaptureAddressInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceMemoryOpaqueCaptureAddressInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceMemoryOpaqueCaptureAddressInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceMemoryOpaqueCaptureAddressInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOpaqueCaptureAddressInfo),
            "::",
            stringify!(memory)
        )
    );
}
impl Default for VkDeviceMemoryOpaqueCaptureAddressInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdDrawIndirectCount = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCount = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCreateRenderPass2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkCmdBeginRenderPass2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    ),
>;
pub type PFN_vkCmdNextSubpass2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    ),
>;
pub type PFN_vkCmdEndRenderPass2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pSubpassEndInfo: *const VkSubpassEndInfo),
>;
pub type PFN_vkResetQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
pub type PFN_vkGetSemaphoreCounterValue = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, semaphore: VkSemaphore, pValue: *mut u64) -> VkResult,
>;
pub type PFN_vkWaitSemaphores = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkSignalSemaphore = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pSignalInfo: *const VkSemaphoreSignalInfo) -> VkResult,
>;
pub type PFN_vkGetBufferDeviceAddress = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkGetBufferOpaqueCaptureAddress = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> u64,
>;
pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64,
>;
extern "system" {
    pub fn vkCmdDrawIndirectCount(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndexedIndirectCount(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCreateRenderPass2(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdBeginRenderPass2(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    );
}
extern "system" {
    pub fn vkCmdNextSubpass2(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
extern "system" {
    pub fn vkCmdEndRenderPass2(
        commandBuffer: VkCommandBuffer,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
extern "system" {
    pub fn vkResetQueryPool(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    );
}
extern "system" {
    pub fn vkGetSemaphoreCounterValue(
        device: VkDevice,
        semaphore: VkSemaphore,
        pValue: *mut u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkWaitSemaphores(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkSignalSemaphore(
        device: VkDevice,
        pSignalInfo: *const VkSemaphoreSignalInfo,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetBufferDeviceAddress(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress;
}
extern "system" {
    pub fn vkGetBufferOpaqueCaptureAddress(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> u64;
}
extern "system" {
    pub fn vkGetDeviceMemoryOpaqueCaptureAddress(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64;
}
pub type VkFlags64 = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPrivateDataSlot_T {
    _unused: [u8; 0],
}
pub type VkPrivateDataSlot = *mut VkPrivateDataSlot_T;
impl VkPipelineCreationFeedbackFlagBits {
    pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT: VkPipelineCreationFeedbackFlagBits =
        VkPipelineCreationFeedbackFlagBits::VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT;
}
impl VkPipelineCreationFeedbackFlagBits {
    pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT : VkPipelineCreationFeedbackFlagBits = VkPipelineCreationFeedbackFlagBits :: VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT ;
}
impl VkPipelineCreationFeedbackFlagBits {
    pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT : VkPipelineCreationFeedbackFlagBits = VkPipelineCreationFeedbackFlagBits :: VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT ;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineCreationFeedbackFlagBits {
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4,
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkPipelineCreationFeedbackFlags = VkFlags;
impl VkToolPurposeFlagBits {
    pub const VK_TOOL_PURPOSE_VALIDATION_BIT_EXT: VkToolPurposeFlagBits =
        VkToolPurposeFlagBits::VK_TOOL_PURPOSE_VALIDATION_BIT;
}
impl VkToolPurposeFlagBits {
    pub const VK_TOOL_PURPOSE_PROFILING_BIT_EXT: VkToolPurposeFlagBits =
        VkToolPurposeFlagBits::VK_TOOL_PURPOSE_PROFILING_BIT;
}
impl VkToolPurposeFlagBits {
    pub const VK_TOOL_PURPOSE_TRACING_BIT_EXT: VkToolPurposeFlagBits =
        VkToolPurposeFlagBits::VK_TOOL_PURPOSE_TRACING_BIT;
}
impl VkToolPurposeFlagBits {
    pub const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT: VkToolPurposeFlagBits =
        VkToolPurposeFlagBits::VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT;
}
impl VkToolPurposeFlagBits {
    pub const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT: VkToolPurposeFlagBits =
        VkToolPurposeFlagBits::VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkToolPurposeFlagBits {
    VK_TOOL_PURPOSE_VALIDATION_BIT = 1,
    VK_TOOL_PURPOSE_PROFILING_BIT = 2,
    VK_TOOL_PURPOSE_TRACING_BIT = 4,
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8,
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16,
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32,
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64,
    VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkToolPurposeFlags = VkFlags;
pub type VkPrivateDataSlotCreateFlags = VkFlags;
pub type VkPipelineStageFlags2 = VkFlags64;
pub type VkPipelineStageFlagBits2 = VkFlags64;
pub const VK_PIPELINE_STAGE_2_NONE: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_NONE_KHR: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = 256;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = 256;
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = 512;
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = 512;
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT: VkPipelineStageFlagBits2 = 1024;
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR: VkPipelineStageFlagBits2 = 1024;
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits2 = 2048;
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 2048;
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 8192;
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 8192;
pub const VK_PIPELINE_STAGE_2_HOST_BIT: VkPipelineStageFlagBits2 = 16384;
pub const VK_PIPELINE_STAGE_2_HOST_BIT_KHR: VkPipelineStageFlagBits2 = 16384;
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits2 = 32768;
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR: VkPipelineStageFlagBits2 = 32768;
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT: VkPipelineStageFlagBits2 = 65536;
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR: VkPipelineStageFlagBits2 = 65536;
pub const VK_PIPELINE_STAGE_2_COPY_BIT: VkPipelineStageFlagBits2 = 4294967296;
pub const VK_PIPELINE_STAGE_2_COPY_BIT_KHR: VkPipelineStageFlagBits2 = 4294967296;
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT: VkPipelineStageFlagBits2 = 8589934592;
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR: VkPipelineStageFlagBits2 = 8589934592;
pub const VK_PIPELINE_STAGE_2_BLIT_BIT: VkPipelineStageFlagBits2 = 17179869184;
pub const VK_PIPELINE_STAGE_2_BLIT_BIT_KHR: VkPipelineStageFlagBits2 = 17179869184;
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT: VkPipelineStageFlagBits2 = 34359738368;
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR: VkPipelineStageFlagBits2 = 34359738368;
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT: VkPipelineStageFlagBits2 = 68719476736;
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 68719476736;
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT: VkPipelineStageFlagBits2 = 137438953472;
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR: VkPipelineStageFlagBits2 =
    137438953472;
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT: VkPipelineStageFlagBits2 =
    274877906944;
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR: VkPipelineStageFlagBits2 =
    274877906944;
pub const VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR: VkPipelineStageFlagBits2 = 67108864;
pub const VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT: VkPipelineStageFlagBits2 = 16777216;
pub const VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkPipelineStageFlagBits2 = 262144;
pub const VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV: VkPipelineStageFlagBits2 = 131072;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineStageFlagBits2 =
    4194304;
pub const VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits2 = 4194304;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: VkPipelineStageFlagBits2 =
    33554432;
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 2097152;
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 2097152;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits2 =
    33554432;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT: VkPipelineStageFlagBits2 = 8388608;
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 524288;
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 1048576;
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = 524288;
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = 1048576;
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI: VkPipelineStageFlagBits2 = 549755813888;
pub const VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI: VkPipelineStageFlagBits2 = 1099511627776;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR: VkPipelineStageFlagBits2 =
    268435456;
pub const VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT: VkPipelineStageFlagBits2 = 1073741824;
pub const VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 =
    2199023255552;
pub const VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV: VkPipelineStageFlagBits2 = 536870912;
pub type VkAccessFlags2 = VkFlags64;
pub type VkAccessFlagBits2 = VkFlags64;
pub const VK_ACCESS_2_NONE: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_NONE_KHR: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDEX_READ_BIT: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_INDEX_READ_BIT_KHR: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_UNIFORM_READ_BIT: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_UNIFORM_READ_BIT_KHR: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_SHADER_READ_BIT: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_READ_BIT_KHR: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_WRITE_BIT: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_SHADER_WRITE_BIT_KHR: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = 256;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = 256;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 512;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 512;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = 1024;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = 1024;
pub const VK_ACCESS_2_TRANSFER_READ_BIT: VkAccessFlagBits2 = 2048;
pub const VK_ACCESS_2_TRANSFER_READ_BIT_KHR: VkAccessFlagBits2 = 2048;
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT: VkAccessFlagBits2 = 4096;
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR: VkAccessFlagBits2 = 4096;
pub const VK_ACCESS_2_HOST_READ_BIT: VkAccessFlagBits2 = 8192;
pub const VK_ACCESS_2_HOST_READ_BIT_KHR: VkAccessFlagBits2 = 8192;
pub const VK_ACCESS_2_HOST_WRITE_BIT: VkAccessFlagBits2 = 16384;
pub const VK_ACCESS_2_HOST_WRITE_BIT_KHR: VkAccessFlagBits2 = 16384;
pub const VK_ACCESS_2_MEMORY_READ_BIT: VkAccessFlagBits2 = 32768;
pub const VK_ACCESS_2_MEMORY_READ_BIT_KHR: VkAccessFlagBits2 = 32768;
pub const VK_ACCESS_2_MEMORY_WRITE_BIT: VkAccessFlagBits2 = 65536;
pub const VK_ACCESS_2_MEMORY_WRITE_BIT_KHR: VkAccessFlagBits2 = 65536;
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT: VkAccessFlagBits2 = 4294967296;
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR: VkAccessFlagBits2 = 4294967296;
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT: VkAccessFlagBits2 = 8589934592;
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR: VkAccessFlagBits2 = 8589934592;
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT: VkAccessFlagBits2 = 17179869184;
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR: VkAccessFlagBits2 = 17179869184;
pub const VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR: VkAccessFlagBits2 = 34359738368;
pub const VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR: VkAccessFlagBits2 = 68719476736;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits2 = 33554432;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits2 = 67108864;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits2 = 134217728;
pub const VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits2 = 1048576;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits2 = 131072;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits2 = 262144;
pub const VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 8388608;
pub const VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits2 = 8388608;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits2 = 2097152;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits2 = 4194304;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits2 = 2097152;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits2 = 4194304;
pub const VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits2 = 16777216;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits2 = 524288;
pub const VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT: VkAccessFlagBits2 = 2199023255552;
pub const VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI: VkAccessFlagBits2 = 549755813888;
pub const VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR: VkAccessFlagBits2 = 1099511627776;
pub const VK_ACCESS_2_MICROMAP_READ_BIT_EXT: VkAccessFlagBits2 = 17592186044416;
pub const VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT: VkAccessFlagBits2 = 35184372088832;
pub const VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV: VkAccessFlagBits2 = 4398046511104;
pub const VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV: VkAccessFlagBits2 = 8796093022208;
impl VkSubmitFlagBits {
    pub const VK_SUBMIT_PROTECTED_BIT_KHR: VkSubmitFlagBits =
        VkSubmitFlagBits::VK_SUBMIT_PROTECTED_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSubmitFlagBits {
    VK_SUBMIT_PROTECTED_BIT = 1,
    VK_SUBMIT_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkSubmitFlags = VkFlags;
impl VkRenderingFlagBits {
    pub const VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR: VkRenderingFlagBits =
        VkRenderingFlagBits::VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT;
}
impl VkRenderingFlagBits {
    pub const VK_RENDERING_SUSPENDING_BIT_KHR: VkRenderingFlagBits =
        VkRenderingFlagBits::VK_RENDERING_SUSPENDING_BIT;
}
impl VkRenderingFlagBits {
    pub const VK_RENDERING_RESUMING_BIT_KHR: VkRenderingFlagBits =
        VkRenderingFlagBits::VK_RENDERING_RESUMING_BIT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkRenderingFlagBits {
    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1,
    VK_RENDERING_SUSPENDING_BIT = 2,
    VK_RENDERING_RESUMING_BIT = 4,
    VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 8,
    VK_RENDERING_FLAG_BITS_MAX_ENUM = 2147483647,
}
pub type VkRenderingFlags = VkFlags;
pub type VkFormatFeatureFlags2 = VkFlags64;
pub type VkFormatFeatureFlagBits2 = VkFlags64;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT: VkFormatFeatureFlagBits2 = 256;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR: VkFormatFeatureFlagBits2 = 256;
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 512;
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 512;
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT: VkFormatFeatureFlagBits2 = 1024;
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = 1024;
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT: VkFormatFeatureFlagBits2 = 2048;
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR: VkFormatFeatureFlagBits2 = 2048;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT: VkFormatFeatureFlagBits2 = 4096;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR: VkFormatFeatureFlagBits2 = 4096;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT: VkFormatFeatureFlagBits2 = 8192;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: VkFormatFeatureFlagBits2 = 8192;
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits2 = 16384;
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = 16384;
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT: VkFormatFeatureFlagBits2 = 32768;
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits2 = 32768;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT: VkFormatFeatureFlagBits2 = 65536;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR: VkFormatFeatureFlagBits2 = 65536;
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = 131072;
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = 131072;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT:
    VkFormatFeatureFlagBits2 = 262144;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR:
    VkFormatFeatureFlagBits2 = 262144;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT:
    VkFormatFeatureFlagBits2 = 524288;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR : VkFormatFeatureFlagBits2 = 524288 ;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT:
    VkFormatFeatureFlagBits2 = 1048576;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR : VkFormatFeatureFlagBits2 = 1048576 ;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT : VkFormatFeatureFlagBits2 = 2097152 ;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR : VkFormatFeatureFlagBits2 = 2097152 ;
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT: VkFormatFeatureFlagBits2 = 4194304;
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits2 = 4194304;
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = 8388608;
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = 8388608;
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 =
    2147483648;
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 =
    2147483648;
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 =
    4294967296;
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 =
    4294967296;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT: VkFormatFeatureFlagBits2 =
    8589934592;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR: VkFormatFeatureFlagBits2 =
    8589934592;
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR: VkFormatFeatureFlagBits2 = 33554432;
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = 67108864;
pub const VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR:
    VkFormatFeatureFlagBits2 = 536870912;
pub const VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT: VkFormatFeatureFlagBits2 = 16777216;
pub const VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 =
    1073741824;
pub const VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV: VkFormatFeatureFlagBits2 =
    274877906944;
pub const VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = 17179869184;
pub const VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = 34359738368;
pub const VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM: VkFormatFeatureFlagBits2 = 68719476736;
pub const VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM: VkFormatFeatureFlagBits2 = 137438953472;
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV: VkFormatFeatureFlagBits2 = 1099511627776;
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV: VkFormatFeatureFlagBits2 = 2199023255552;
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV: VkFormatFeatureFlagBits2 = 4398046511104;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVulkan13Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustImageAccess: VkBool32,
    pub inlineUniformBlock: VkBool32,
    pub descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
    pub pipelineCreationCacheControl: VkBool32,
    pub privateData: VkBool32,
    pub shaderDemoteToHelperInvocation: VkBool32,
    pub shaderTerminateInvocation: VkBool32,
    pub subgroupSizeControl: VkBool32,
    pub computeFullSubgroups: VkBool32,
    pub synchronization2: VkBool32,
    pub textureCompressionASTC_HDR: VkBool32,
    pub shaderZeroInitializeWorkgroupMemory: VkBool32,
    pub dynamicRendering: VkBool32,
    pub shaderIntegerDotProduct: VkBool32,
    pub maintenance4: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkan13Features() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVulkan13Features> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkan13Features>(),
        80usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVulkan13Features))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkan13Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkan13Features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).robustImageAccess) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(robustImageAccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inlineUniformBlock) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(inlineUniformBlock)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingInlineUniformBlockUpdateAfterBind) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(descriptorBindingInlineUniformBlockUpdateAfterBind)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pipelineCreationCacheControl) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(pipelineCreationCacheControl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).privateData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(privateData)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderDemoteToHelperInvocation) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(shaderDemoteToHelperInvocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderTerminateInvocation) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(shaderTerminateInvocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subgroupSizeControl) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(subgroupSizeControl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).computeFullSubgroups) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(computeFullSubgroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).synchronization2) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(synchronization2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureCompressionASTC_HDR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(textureCompressionASTC_HDR)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderZeroInitializeWorkgroupMemory) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(shaderZeroInitializeWorkgroupMemory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicRendering) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(dynamicRendering)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderIntegerDotProduct) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(shaderIntegerDotProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maintenance4) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Features),
            "::",
            stringify!(maintenance4)
        )
    );
}
impl Default for VkPhysicalDeviceVulkan13Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVulkan13Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minSubgroupSize: u32,
    pub maxSubgroupSize: u32,
    pub maxComputeWorkgroupSubgroups: u32,
    pub requiredSubgroupSizeStages: VkShaderStageFlags,
    pub maxInlineUniformBlockSize: u32,
    pub maxPerStageDescriptorInlineUniformBlocks: u32,
    pub maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    pub maxDescriptorSetInlineUniformBlocks: u32,
    pub maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
    pub maxInlineUniformTotalSize: u32,
    pub integerDotProduct8BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct8BitSignedAccelerated: VkBool32,
    pub integerDotProduct8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct16BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct16BitSignedAccelerated: VkBool32,
    pub integerDotProduct16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct32BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct32BitSignedAccelerated: VkBool32,
    pub integerDotProduct32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct64BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct64BitSignedAccelerated: VkBool32,
    pub integerDotProduct64BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32,
    pub storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    pub uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
    pub maxBufferSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVulkan13Properties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVulkan13Properties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVulkan13Properties>(),
        216usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVulkan13Properties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVulkan13Properties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVulkan13Properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minSubgroupSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(minSubgroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSubgroupSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(maxSubgroupSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxComputeWorkgroupSubgroups) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(maxComputeWorkgroupSubgroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredSubgroupSizeStages) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(requiredSubgroupSizeStages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxInlineUniformBlockSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(maxInlineUniformBlockSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorInlineUniformBlocks) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(maxPerStageDescriptorInlineUniformBlocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)
                as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetInlineUniformBlocks) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(maxDescriptorSetInlineUniformBlocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindInlineUniformBlocks) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindInlineUniformBlocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxInlineUniformTotalSize) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(maxInlineUniformTotalSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct8BitUnsignedAccelerated) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct8BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct8BitSignedAccelerated) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct8BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct8BitMixedSignednessAccelerated) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct8BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct4x8BitPackedUnsignedAccelerated) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct4x8BitPackedUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct4x8BitPackedSignedAccelerated) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct4x8BitPackedSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct4x8BitPackedMixedSignednessAccelerated)
                as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct4x8BitPackedMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct16BitUnsignedAccelerated) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct16BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct16BitSignedAccelerated) as usize
                - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct16BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct16BitMixedSignednessAccelerated) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct16BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct32BitUnsignedAccelerated) as usize
                - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct32BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct32BitSignedAccelerated) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct32BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct32BitMixedSignednessAccelerated) as usize
                - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct32BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct64BitUnsignedAccelerated) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct64BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct64BitSignedAccelerated) as usize
                - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct64BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct64BitMixedSignednessAccelerated) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProduct64BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating8BitUnsignedAccelerated
            ) as usize
                - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating8BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating8BitSignedAccelerated
            ) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating8BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated
            ) as usize
                - ptr as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated
            ) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated
            ) as usize
                - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr)
                    .integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
            ) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(
                integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
            )
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating16BitUnsignedAccelerated
            ) as usize
                - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating16BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating16BitSignedAccelerated
            ) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating16BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated
            ) as usize
                - ptr as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating32BitUnsignedAccelerated
            ) as usize
                - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating32BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating32BitSignedAccelerated
            ) as usize
                - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating32BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated
            ) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating64BitUnsignedAccelerated
            ) as usize
                - ptr as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating64BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating64BitSignedAccelerated
            ) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating64BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated
            ) as usize
                - ptr as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).storageTexelBufferOffsetAlignmentBytes) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(storageTexelBufferOffsetAlignmentBytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).storageTexelBufferOffsetSingleTexelAlignment) as usize
                - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(storageTexelBufferOffsetSingleTexelAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uniformTexelBufferOffsetAlignmentBytes) as usize
                - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(uniformTexelBufferOffsetAlignmentBytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uniformTexelBufferOffsetSingleTexelAlignment) as usize
                - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(uniformTexelBufferOffsetSingleTexelAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBufferSize) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVulkan13Properties),
            "::",
            stringify!(maxBufferSize)
        )
    );
}
impl Default for VkPhysicalDeviceVulkan13Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineCreationFeedback {
    pub flags: VkPipelineCreationFeedbackFlags,
    pub duration: u64,
}
#[test]
fn bindgen_test_layout_VkPipelineCreationFeedback() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineCreationFeedback> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCreationFeedback>(),
        16usize,
        concat!("Size of: ", stringify!(VkPipelineCreationFeedback))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCreationFeedback>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineCreationFeedback))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedback),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedback),
            "::",
            stringify!(duration)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineCreationFeedbackCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pPipelineCreationFeedback: *mut VkPipelineCreationFeedback,
    pub pipelineStageCreationFeedbackCount: u32,
    pub pPipelineStageCreationFeedbacks: *mut VkPipelineCreationFeedback,
}
#[test]
fn bindgen_test_layout_VkPipelineCreationFeedbackCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineCreationFeedbackCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCreationFeedbackCreateInfo>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineCreationFeedbackCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCreationFeedbackCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineCreationFeedbackCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPipelineCreationFeedback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackCreateInfo),
            "::",
            stringify!(pPipelineCreationFeedback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pipelineStageCreationFeedbackCount) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackCreateInfo),
            "::",
            stringify!(pipelineStageCreationFeedbackCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pPipelineStageCreationFeedbacks) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCreationFeedbackCreateInfo),
            "::",
            stringify!(pPipelineStageCreationFeedbacks)
        )
    );
}
impl Default for VkPipelineCreationFeedbackCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderTerminateInvocationFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderTerminateInvocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderTerminateInvocationFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderTerminateInvocationFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderTerminateInvocationFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderTerminateInvocationFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderTerminateInvocationFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderTerminateInvocationFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTerminateInvocationFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTerminateInvocationFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderTerminateInvocation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTerminateInvocationFeatures),
            "::",
            stringify!(shaderTerminateInvocation)
        )
    );
}
impl Default for VkPhysicalDeviceShaderTerminateInvocationFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceToolProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub version: [::std::os::raw::c_char; 256usize],
    pub purposes: VkToolPurposeFlags,
    pub description: [::std::os::raw::c_char; 256usize],
    pub layer: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceToolProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceToolProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceToolProperties>(),
        1048usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceToolProperties))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceToolProperties>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceToolProperties))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolProperties),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolProperties),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purposes) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolProperties),
            "::",
            stringify!(purposes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolProperties),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        788usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceToolProperties),
            "::",
            stringify!(layer)
        )
    );
}
impl Default for VkPhysicalDeviceToolProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderDemoteToHelperInvocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderDemoteToHelperInvocation) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures),
            "::",
            stringify!(shaderDemoteToHelperInvocation)
        )
    );
}
impl Default for VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePrivateDataFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub privateData: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePrivateDataFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePrivateDataFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePrivateDataFeatures>(),
        24usize,
        concat!("Size of: ", stringify!(VkPhysicalDevicePrivateDataFeatures))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePrivateDataFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePrivateDataFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrivateDataFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrivateDataFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).privateData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrivateDataFeatures),
            "::",
            stringify!(privateData)
        )
    );
}
impl Default for VkPhysicalDevicePrivateDataFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDevicePrivateDataCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub privateDataSlotRequestCount: u32,
}
#[test]
fn bindgen_test_layout_VkDevicePrivateDataCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDevicePrivateDataCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDevicePrivateDataCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkDevicePrivateDataCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDevicePrivateDataCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDevicePrivateDataCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDevicePrivateDataCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDevicePrivateDataCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).privateDataSlotRequestCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDevicePrivateDataCreateInfo),
            "::",
            stringify!(privateDataSlotRequestCount)
        )
    );
}
impl Default for VkDevicePrivateDataCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPrivateDataSlotCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPrivateDataSlotCreateFlags,
}
#[test]
fn bindgen_test_layout_VkPrivateDataSlotCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPrivateDataSlotCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPrivateDataSlotCreateInfo>(),
        24usize,
        concat!("Size of: ", stringify!(VkPrivateDataSlotCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPrivateDataSlotCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPrivateDataSlotCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPrivateDataSlotCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPrivateDataSlotCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPrivateDataSlotCreateInfo),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkPrivateDataSlotCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePipelineCreationCacheControlFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineCreationCacheControl: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePipelineCreationCacheControlFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePipelineCreationCacheControlFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePipelineCreationCacheControlFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePipelineCreationCacheControlFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePipelineCreationCacheControlFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePipelineCreationCacheControlFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineCreationCacheControlFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineCreationCacheControlFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pipelineCreationCacheControl) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineCreationCacheControlFeatures),
            "::",
            stringify!(pipelineCreationCacheControl)
        )
    );
}
impl Default for VkPhysicalDevicePipelineCreationCacheControlFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryBarrier2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcStageMask: VkPipelineStageFlags2,
    pub srcAccessMask: VkAccessFlags2,
    pub dstStageMask: VkPipelineStageFlags2,
    pub dstAccessMask: VkAccessFlags2,
}
#[test]
fn bindgen_test_layout_VkMemoryBarrier2() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryBarrier2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryBarrier2>(),
        48usize,
        concat!("Size of: ", stringify!(VkMemoryBarrier2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryBarrier2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryBarrier2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcStageMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier2),
            "::",
            stringify!(srcStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAccessMask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier2),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstStageMask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier2),
            "::",
            stringify!(dstStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAccessMask) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryBarrier2),
            "::",
            stringify!(dstAccessMask)
        )
    );
}
impl Default for VkMemoryBarrier2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferMemoryBarrier2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcStageMask: VkPipelineStageFlags2,
    pub srcAccessMask: VkAccessFlags2,
    pub dstStageMask: VkPipelineStageFlags2,
    pub dstAccessMask: VkAccessFlags2,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBufferMemoryBarrier2() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferMemoryBarrier2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferMemoryBarrier2>(),
        80usize,
        concat!("Size of: ", stringify!(VkBufferMemoryBarrier2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferMemoryBarrier2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferMemoryBarrier2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcStageMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(srcStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAccessMask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstStageMask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(dstStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAccessMask) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(dstAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcQueueFamilyIndex) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(srcQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstQueueFamilyIndex) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(dstQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferMemoryBarrier2),
            "::",
            stringify!(size)
        )
    );
}
impl Default for VkBufferMemoryBarrier2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageMemoryBarrier2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcStageMask: VkPipelineStageFlags2,
    pub srcAccessMask: VkAccessFlags2,
    pub dstStageMask: VkPipelineStageFlags2,
    pub dstAccessMask: VkAccessFlags2,
    pub oldLayout: VkImageLayout,
    pub newLayout: VkImageLayout,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub image: VkImage,
    pub subresourceRange: VkImageSubresourceRange,
}
#[test]
fn bindgen_test_layout_VkImageMemoryBarrier2() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageMemoryBarrier2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageMemoryBarrier2>(),
        96usize,
        concat!("Size of: ", stringify!(VkImageMemoryBarrier2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageMemoryBarrier2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageMemoryBarrier2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcStageMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(srcStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAccessMask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(srcAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstStageMask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(dstStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAccessMask) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(dstAccessMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldLayout) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(oldLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newLayout) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(newLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcQueueFamilyIndex) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(srcQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstQueueFamilyIndex) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(dstQueueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subresourceRange) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageMemoryBarrier2),
            "::",
            stringify!(subresourceRange)
        )
    );
}
impl Default for VkImageMemoryBarrier2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDependencyInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dependencyFlags: VkDependencyFlags,
    pub memoryBarrierCount: u32,
    pub pMemoryBarriers: *const VkMemoryBarrier2,
    pub bufferMemoryBarrierCount: u32,
    pub pBufferMemoryBarriers: *const VkBufferMemoryBarrier2,
    pub imageMemoryBarrierCount: u32,
    pub pImageMemoryBarriers: *const VkImageMemoryBarrier2,
}
#[test]
fn bindgen_test_layout_VkDependencyInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDependencyInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDependencyInfo>(),
        64usize,
        concat!("Size of: ", stringify!(VkDependencyInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDependencyInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDependencyInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDependencyInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDependencyInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dependencyFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDependencyInfo),
            "::",
            stringify!(dependencyFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryBarrierCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDependencyInfo),
            "::",
            stringify!(memoryBarrierCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMemoryBarriers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDependencyInfo),
            "::",
            stringify!(pMemoryBarriers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferMemoryBarrierCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDependencyInfo),
            "::",
            stringify!(bufferMemoryBarrierCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pBufferMemoryBarriers) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDependencyInfo),
            "::",
            stringify!(pBufferMemoryBarriers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMemoryBarrierCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDependencyInfo),
            "::",
            stringify!(imageMemoryBarrierCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pImageMemoryBarriers) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDependencyInfo),
            "::",
            stringify!(pImageMemoryBarriers)
        )
    );
}
impl Default for VkDependencyInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSemaphoreSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub value: u64,
    pub stageMask: VkPipelineStageFlags2,
    pub deviceIndex: u32,
}
#[test]
fn bindgen_test_layout_VkSemaphoreSubmitInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkSemaphoreSubmitInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreSubmitInfo>(),
        48usize,
        concat!("Size of: ", stringify!(VkSemaphoreSubmitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreSubmitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreSubmitInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSubmitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSubmitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semaphore) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSubmitInfo),
            "::",
            stringify!(semaphore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSubmitInfo),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stageMask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSubmitInfo),
            "::",
            stringify!(stageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceIndex) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreSubmitInfo),
            "::",
            stringify!(deviceIndex)
        )
    );
}
impl Default for VkSemaphoreSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCommandBufferSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub commandBuffer: VkCommandBuffer,
    pub deviceMask: u32,
}
#[test]
fn bindgen_test_layout_VkCommandBufferSubmitInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkCommandBufferSubmitInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferSubmitInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkCommandBufferSubmitInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferSubmitInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCommandBufferSubmitInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferSubmitInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferSubmitInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferSubmitInfo),
            "::",
            stringify!(commandBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceMask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferSubmitInfo),
            "::",
            stringify!(deviceMask)
        )
    );
}
impl Default for VkCommandBufferSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubmitInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSubmitFlags,
    pub waitSemaphoreInfoCount: u32,
    pub pWaitSemaphoreInfos: *const VkSemaphoreSubmitInfo,
    pub commandBufferInfoCount: u32,
    pub pCommandBufferInfos: *const VkCommandBufferSubmitInfo,
    pub signalSemaphoreInfoCount: u32,
    pub pSignalSemaphoreInfos: *const VkSemaphoreSubmitInfo,
}
#[test]
fn bindgen_test_layout_VkSubmitInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubmitInfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubmitInfo2>(),
        64usize,
        concat!("Size of: ", stringify!(VkSubmitInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubmitInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubmitInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitSemaphoreInfoCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo2),
            "::",
            stringify!(waitSemaphoreInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWaitSemaphoreInfos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo2),
            "::",
            stringify!(pWaitSemaphoreInfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandBufferInfoCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo2),
            "::",
            stringify!(commandBufferInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCommandBufferInfos) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo2),
            "::",
            stringify!(pCommandBufferInfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signalSemaphoreInfoCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo2),
            "::",
            stringify!(signalSemaphoreInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSignalSemaphoreInfos) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubmitInfo2),
            "::",
            stringify!(pSignalSemaphoreInfos)
        )
    );
}
impl Default for VkSubmitInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSynchronization2Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub synchronization2: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSynchronization2Features() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSynchronization2Features> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSynchronization2Features>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSynchronization2Features)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSynchronization2Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSynchronization2Features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSynchronization2Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSynchronization2Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).synchronization2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSynchronization2Features),
            "::",
            stringify!(synchronization2)
        )
    );
}
impl Default for VkPhysicalDeviceSynchronization2Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderZeroInitializeWorkgroupMemory: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderZeroInitializeWorkgroupMemory) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures),
            "::",
            stringify!(shaderZeroInitializeWorkgroupMemory)
        )
    );
}
impl Default for VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImageRobustnessFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustImageAccess: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageRobustnessFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImageRobustnessFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageRobustnessFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageRobustnessFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageRobustnessFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageRobustnessFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageRobustnessFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageRobustnessFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).robustImageAccess) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageRobustnessFeatures),
            "::",
            stringify!(robustImageAccess)
        )
    );
}
impl Default for VkPhysicalDeviceImageRobustnessFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferCopy2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcOffset: VkDeviceSize,
    pub dstOffset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBufferCopy2() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferCopy2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferCopy2>(),
        40usize,
        concat!("Size of: ", stringify!(VkBufferCopy2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferCopy2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferCopy2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy2),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy2),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCopy2),
            "::",
            stringify!(size)
        )
    );
}
impl Default for VkBufferCopy2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCopyBufferInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcBuffer: VkBuffer,
    pub dstBuffer: VkBuffer,
    pub regionCount: u32,
    pub pRegions: *const VkBufferCopy2,
}
#[test]
fn bindgen_test_layout_VkCopyBufferInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyBufferInfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyBufferInfo2>(),
        48usize,
        concat!("Size of: ", stringify!(VkCopyBufferInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyBufferInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyBufferInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferInfo2),
            "::",
            stringify!(srcBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstBuffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferInfo2),
            "::",
            stringify!(dstBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regionCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferInfo2),
            "::",
            stringify!(regionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRegions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferInfo2),
            "::",
            stringify!(pRegions)
        )
    );
}
impl Default for VkCopyBufferInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageCopy2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkImageCopy2() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageCopy2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageCopy2>(),
        88usize,
        concat!("Size of: ", stringify!(VkImageCopy2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageCopy2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageCopy2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcSubresource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy2),
            "::",
            stringify!(srcSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy2),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSubresource) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy2),
            "::",
            stringify!(dstSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy2),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCopy2),
            "::",
            stringify!(extent)
        )
    );
}
impl Default for VkImageCopy2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCopyImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageCopy2,
}
#[test]
fn bindgen_test_layout_VkCopyImageInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyImageInfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyImageInfo2>(),
        56usize,
        concat!("Size of: ", stringify!(VkCopyImageInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyImageInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyImageInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageInfo2),
            "::",
            stringify!(srcImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcImageLayout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageInfo2),
            "::",
            stringify!(srcImageLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstImage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageInfo2),
            "::",
            stringify!(dstImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstImageLayout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageInfo2),
            "::",
            stringify!(dstImageLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regionCount) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageInfo2),
            "::",
            stringify!(regionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRegions) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageInfo2),
            "::",
            stringify!(pRegions)
        )
    );
}
impl Default for VkCopyImageInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferImageCopy2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub bufferOffset: VkDeviceSize,
    pub bufferRowLength: u32,
    pub bufferImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkBufferImageCopy2() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferImageCopy2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferImageCopy2>(),
        72usize,
        concat!("Size of: ", stringify!(VkBufferImageCopy2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferImageCopy2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBufferImageCopy2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy2),
            "::",
            stringify!(bufferOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferRowLength) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy2),
            "::",
            stringify!(bufferRowLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferImageHeight) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy2),
            "::",
            stringify!(bufferImageHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSubresource) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy2),
            "::",
            stringify!(imageSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageOffset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy2),
            "::",
            stringify!(imageOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageExtent) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferImageCopy2),
            "::",
            stringify!(imageExtent)
        )
    );
}
impl Default for VkBufferImageCopy2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCopyBufferToImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcBuffer: VkBuffer,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkBufferImageCopy2,
}
#[test]
fn bindgen_test_layout_VkCopyBufferToImageInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyBufferToImageInfo2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyBufferToImageInfo2>(),
        48usize,
        concat!("Size of: ", stringify!(VkCopyBufferToImageInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyBufferToImageInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyBufferToImageInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferToImageInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferToImageInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferToImageInfo2),
            "::",
            stringify!(srcBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstImage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferToImageInfo2),
            "::",
            stringify!(dstImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstImageLayout) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferToImageInfo2),
            "::",
            stringify!(dstImageLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regionCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferToImageInfo2),
            "::",
            stringify!(regionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRegions) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyBufferToImageInfo2),
            "::",
            stringify!(pRegions)
        )
    );
}
impl Default for VkCopyBufferToImageInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCopyImageToBufferInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstBuffer: VkBuffer,
    pub regionCount: u32,
    pub pRegions: *const VkBufferImageCopy2,
}
#[test]
fn bindgen_test_layout_VkCopyImageToBufferInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyImageToBufferInfo2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyImageToBufferInfo2>(),
        56usize,
        concat!("Size of: ", stringify!(VkCopyImageToBufferInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyImageToBufferInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyImageToBufferInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageToBufferInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageToBufferInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageToBufferInfo2),
            "::",
            stringify!(srcImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcImageLayout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageToBufferInfo2),
            "::",
            stringify!(srcImageLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstBuffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageToBufferInfo2),
            "::",
            stringify!(dstBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regionCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageToBufferInfo2),
            "::",
            stringify!(regionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRegions) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyImageToBufferInfo2),
            "::",
            stringify!(pRegions)
        )
    );
}
impl Default for VkCopyImageToBufferInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageBlit2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffsets: [VkOffset3D; 2usize],
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffsets: [VkOffset3D; 2usize],
}
#[test]
fn bindgen_test_layout_VkImageBlit2() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageBlit2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageBlit2>(),
        96usize,
        concat!("Size of: ", stringify!(VkImageBlit2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageBlit2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageBlit2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcSubresource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit2),
            "::",
            stringify!(srcSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffsets) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit2),
            "::",
            stringify!(srcOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSubresource) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit2),
            "::",
            stringify!(dstSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffsets) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageBlit2),
            "::",
            stringify!(dstOffsets)
        )
    );
}
impl Default for VkImageBlit2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBlitImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageBlit2,
    pub filter: VkFilter,
}
#[test]
fn bindgen_test_layout_VkBlitImageInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkBlitImageInfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBlitImageInfo2>(),
        64usize,
        concat!("Size of: ", stringify!(VkBlitImageInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBlitImageInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBlitImageInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBlitImageInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBlitImageInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBlitImageInfo2),
            "::",
            stringify!(srcImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcImageLayout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBlitImageInfo2),
            "::",
            stringify!(srcImageLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstImage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBlitImageInfo2),
            "::",
            stringify!(dstImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstImageLayout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBlitImageInfo2),
            "::",
            stringify!(dstImageLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regionCount) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBlitImageInfo2),
            "::",
            stringify!(regionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRegions) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBlitImageInfo2),
            "::",
            stringify!(pRegions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBlitImageInfo2),
            "::",
            stringify!(filter)
        )
    );
}
impl Default for VkBlitImageInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageResolve2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkImageResolve2() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageResolve2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageResolve2>(),
        88usize,
        concat!("Size of: ", stringify!(VkImageResolve2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageResolve2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageResolve2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcSubresource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve2),
            "::",
            stringify!(srcSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve2),
            "::",
            stringify!(srcOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstSubresource) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve2),
            "::",
            stringify!(dstSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstOffset) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve2),
            "::",
            stringify!(dstOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageResolve2),
            "::",
            stringify!(extent)
        )
    );
}
impl Default for VkImageResolve2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkResolveImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageResolve2,
}
#[test]
fn bindgen_test_layout_VkResolveImageInfo2() {
    const UNINIT: ::std::mem::MaybeUninit<VkResolveImageInfo2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkResolveImageInfo2>(),
        56usize,
        concat!("Size of: ", stringify!(VkResolveImageInfo2))
    );
    assert_eq!(
        ::std::mem::align_of::<VkResolveImageInfo2>(),
        8usize,
        concat!("Alignment of ", stringify!(VkResolveImageInfo2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkResolveImageInfo2),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkResolveImageInfo2),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkResolveImageInfo2),
            "::",
            stringify!(srcImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcImageLayout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkResolveImageInfo2),
            "::",
            stringify!(srcImageLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstImage) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkResolveImageInfo2),
            "::",
            stringify!(dstImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstImageLayout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkResolveImageInfo2),
            "::",
            stringify!(dstImageLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regionCount) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkResolveImageInfo2),
            "::",
            stringify!(regionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRegions) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkResolveImageInfo2),
            "::",
            stringify!(pRegions)
        )
    );
}
impl Default for VkResolveImageInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSubgroupSizeControlFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subgroupSizeControl: VkBool32,
    pub computeFullSubgroups: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSubgroupSizeControlFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSubgroupSizeControlFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSubgroupSizeControlFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSubgroupSizeControlFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subgroupSizeControl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeatures),
            "::",
            stringify!(subgroupSizeControl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).computeFullSubgroups) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlFeatures),
            "::",
            stringify!(computeFullSubgroups)
        )
    );
}
impl Default for VkPhysicalDeviceSubgroupSizeControlFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSubgroupSizeControlProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minSubgroupSize: u32,
    pub maxSubgroupSize: u32,
    pub maxComputeWorkgroupSubgroups: u32,
    pub requiredSubgroupSizeStages: VkShaderStageFlags,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSubgroupSizeControlProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSubgroupSizeControlProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSubgroupSizeControlProperties>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSubgroupSizeControlProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minSubgroupSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlProperties),
            "::",
            stringify!(minSubgroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSubgroupSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlProperties),
            "::",
            stringify!(maxSubgroupSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxComputeWorkgroupSubgroups) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlProperties),
            "::",
            stringify!(maxComputeWorkgroupSubgroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredSubgroupSizeStages) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubgroupSizeControlProperties),
            "::",
            stringify!(requiredSubgroupSizeStages)
        )
    );
}
impl Default for VkPhysicalDeviceSubgroupSizeControlProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub requiredSubgroupSize: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineShaderStageRequiredSubgroupSizeCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).requiredSubgroupSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo),
            "::",
            stringify!(requiredSubgroupSize)
        )
    );
}
impl Default for VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceInlineUniformBlockFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub inlineUniformBlock: VkBool32,
    pub descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceInlineUniformBlockFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceInlineUniformBlockFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceInlineUniformBlockFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceInlineUniformBlockFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inlineUniformBlock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeatures),
            "::",
            stringify!(inlineUniformBlock)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingInlineUniformBlockUpdateAfterBind) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockFeatures),
            "::",
            stringify!(descriptorBindingInlineUniformBlockUpdateAfterBind)
        )
    );
}
impl Default for VkPhysicalDeviceInlineUniformBlockFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceInlineUniformBlockProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxInlineUniformBlockSize: u32,
    pub maxPerStageDescriptorInlineUniformBlocks: u32,
    pub maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    pub maxDescriptorSetInlineUniformBlocks: u32,
    pub maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceInlineUniformBlockProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceInlineUniformBlockProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceInlineUniformBlockProperties>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceInlineUniformBlockProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceInlineUniformBlockProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxInlineUniformBlockSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockProperties),
            "::",
            stringify!(maxInlineUniformBlockSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorInlineUniformBlocks) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockProperties),
            "::",
            stringify!(maxPerStageDescriptorInlineUniformBlocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)
                as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockProperties),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetInlineUniformBlocks) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockProperties),
            "::",
            stringify!(maxDescriptorSetInlineUniformBlocks)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindInlineUniformBlocks) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInlineUniformBlockProperties),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindInlineUniformBlocks)
        )
    );
}
impl Default for VkPhysicalDeviceInlineUniformBlockProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkWriteDescriptorSetInlineUniformBlock {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dataSize: u32,
    pub pData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkWriteDescriptorSetInlineUniformBlock() {
    const UNINIT: ::std::mem::MaybeUninit<VkWriteDescriptorSetInlineUniformBlock> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkWriteDescriptorSetInlineUniformBlock>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkWriteDescriptorSetInlineUniformBlock)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkWriteDescriptorSetInlineUniformBlock>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkWriteDescriptorSetInlineUniformBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetInlineUniformBlock),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetInlineUniformBlock),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetInlineUniformBlock),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetInlineUniformBlock),
            "::",
            stringify!(pData)
        )
    );
}
impl Default for VkWriteDescriptorSetInlineUniformBlock {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorPoolInlineUniformBlockCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxInlineUniformBlockBindings: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorPoolInlineUniformBlockCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorPoolInlineUniformBlockCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorPoolInlineUniformBlockCreateInfo>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorPoolInlineUniformBlockCreateInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorPoolInlineUniformBlockCreateInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorPoolInlineUniformBlockCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolInlineUniformBlockCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolInlineUniformBlockCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxInlineUniformBlockBindings) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorPoolInlineUniformBlockCreateInfo),
            "::",
            stringify!(maxInlineUniformBlockBindings)
        )
    );
}
impl Default for VkDescriptorPoolInlineUniformBlockCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub textureCompressionASTC_HDR: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTextureCompressionASTCHDRFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceTextureCompressionASTCHDRFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTextureCompressionASTCHDRFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTextureCompressionASTCHDRFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTextureCompressionASTCHDRFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTextureCompressionASTCHDRFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTextureCompressionASTCHDRFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTextureCompressionASTCHDRFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureCompressionASTC_HDR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTextureCompressionASTCHDRFeatures),
            "::",
            stringify!(textureCompressionASTC_HDR)
        )
    );
}
impl Default for VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderingAttachmentInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
    pub resolveMode: VkResolveModeFlagBits,
    pub resolveImageView: VkImageView,
    pub resolveImageLayout: VkImageLayout,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub clearValue: VkClearValue,
}
#[test]
fn bindgen_test_layout_VkRenderingAttachmentInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderingAttachmentInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderingAttachmentInfo>(),
        72usize,
        concat!("Size of: ", stringify!(VkRenderingAttachmentInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderingAttachmentInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderingAttachmentInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingAttachmentInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingAttachmentInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageView) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingAttachmentInfo),
            "::",
            stringify!(imageView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageLayout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingAttachmentInfo),
            "::",
            stringify!(imageLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolveMode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingAttachmentInfo),
            "::",
            stringify!(resolveMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolveImageView) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingAttachmentInfo),
            "::",
            stringify!(resolveImageView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resolveImageLayout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingAttachmentInfo),
            "::",
            stringify!(resolveImageLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loadOp) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingAttachmentInfo),
            "::",
            stringify!(loadOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storeOp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingAttachmentInfo),
            "::",
            stringify!(storeOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clearValue) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingAttachmentInfo),
            "::",
            stringify!(clearValue)
        )
    );
}
impl Default for VkRenderingAttachmentInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderingInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkRenderingFlags,
    pub renderArea: VkRect2D,
    pub layerCount: u32,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkRenderingAttachmentInfo,
    pub pDepthAttachment: *const VkRenderingAttachmentInfo,
    pub pStencilAttachment: *const VkRenderingAttachmentInfo,
}
#[test]
fn bindgen_test_layout_VkRenderingInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderingInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderingInfo>(),
        72usize,
        concat!("Size of: ", stringify!(VkRenderingInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderingInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderingInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderArea) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingInfo),
            "::",
            stringify!(renderArea)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingInfo),
            "::",
            stringify!(layerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewMask) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingInfo),
            "::",
            stringify!(viewMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorAttachmentCount) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingInfo),
            "::",
            stringify!(colorAttachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pColorAttachments) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingInfo),
            "::",
            stringify!(pColorAttachments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDepthAttachment) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingInfo),
            "::",
            stringify!(pDepthAttachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStencilAttachment) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingInfo),
            "::",
            stringify!(pStencilAttachment)
        )
    );
}
impl Default for VkRenderingInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineRenderingCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentFormats: *const VkFormat,
    pub depthAttachmentFormat: VkFormat,
    pub stencilAttachmentFormat: VkFormat,
}
#[test]
fn bindgen_test_layout_VkPipelineRenderingCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineRenderingCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRenderingCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkPipelineRenderingCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRenderingCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineRenderingCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRenderingCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRenderingCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRenderingCreateInfo),
            "::",
            stringify!(viewMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorAttachmentCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRenderingCreateInfo),
            "::",
            stringify!(colorAttachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pColorAttachmentFormats) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRenderingCreateInfo),
            "::",
            stringify!(pColorAttachmentFormats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthAttachmentFormat) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRenderingCreateInfo),
            "::",
            stringify!(depthAttachmentFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilAttachmentFormat) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRenderingCreateInfo),
            "::",
            stringify!(stencilAttachmentFormat)
        )
    );
}
impl Default for VkPipelineRenderingCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDynamicRenderingFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub dynamicRendering: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDynamicRenderingFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDynamicRenderingFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDynamicRenderingFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDynamicRenderingFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDynamicRenderingFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDynamicRenderingFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDynamicRenderingFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDynamicRenderingFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynamicRendering) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDynamicRenderingFeatures),
            "::",
            stringify!(dynamicRendering)
        )
    );
}
impl Default for VkPhysicalDeviceDynamicRenderingFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCommandBufferInheritanceRenderingInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkRenderingFlags,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentFormats: *const VkFormat,
    pub depthAttachmentFormat: VkFormat,
    pub stencilAttachmentFormat: VkFormat,
    pub rasterizationSamples: VkSampleCountFlagBits,
}
#[test]
fn bindgen_test_layout_VkCommandBufferInheritanceRenderingInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkCommandBufferInheritanceRenderingInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferInheritanceRenderingInfo>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkCommandBufferInheritanceRenderingInfo)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferInheritanceRenderingInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkCommandBufferInheritanceRenderingInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderingInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderingInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderingInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewMask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderingInfo),
            "::",
            stringify!(viewMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorAttachmentCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderingInfo),
            "::",
            stringify!(colorAttachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pColorAttachmentFormats) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderingInfo),
            "::",
            stringify!(pColorAttachmentFormats)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthAttachmentFormat) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderingInfo),
            "::",
            stringify!(depthAttachmentFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilAttachmentFormat) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderingInfo),
            "::",
            stringify!(stencilAttachmentFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rasterizationSamples) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderingInfo),
            "::",
            stringify!(rasterizationSamples)
        )
    );
}
impl Default for VkCommandBufferInheritanceRenderingInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderIntegerDotProductFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderIntegerDotProduct: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderIntegerDotProductFeatures() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderIntegerDotProductFeatures> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderIntegerDotProductFeatures>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductFeatures)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderIntegerDotProductFeatures>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductFeatures),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductFeatures),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderIntegerDotProduct) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductFeatures),
            "::",
            stringify!(shaderIntegerDotProduct)
        )
    );
}
impl Default for VkPhysicalDeviceShaderIntegerDotProductFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderIntegerDotProductProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub integerDotProduct8BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct8BitSignedAccelerated: VkBool32,
    pub integerDotProduct8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct16BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct16BitSignedAccelerated: VkBool32,
    pub integerDotProduct16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct32BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct32BitSignedAccelerated: VkBool32,
    pub integerDotProduct32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct64BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct64BitSignedAccelerated: VkBool32,
    pub integerDotProduct64BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderIntegerDotProductProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderIntegerDotProductProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderIntegerDotProductProperties>(),
        136usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderIntegerDotProductProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct8BitUnsignedAccelerated) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct8BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct8BitSignedAccelerated) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct8BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct8BitMixedSignednessAccelerated) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct8BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct4x8BitPackedUnsignedAccelerated) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct4x8BitPackedUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct4x8BitPackedSignedAccelerated) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct4x8BitPackedSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct4x8BitPackedMixedSignednessAccelerated)
                as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct4x8BitPackedMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct16BitUnsignedAccelerated) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct16BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct16BitSignedAccelerated) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct16BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct16BitMixedSignednessAccelerated) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct16BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct32BitUnsignedAccelerated) as usize
                - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct32BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct32BitSignedAccelerated) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct32BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct32BitMixedSignednessAccelerated) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct32BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct64BitUnsignedAccelerated) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct64BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct64BitSignedAccelerated) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct64BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).integerDotProduct64BitMixedSignednessAccelerated) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProduct64BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating8BitUnsignedAccelerated
            ) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating8BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating8BitSignedAccelerated
            ) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating8BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated
            ) as usize
                - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated
            ) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated
            ) as usize
                - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr)
                    .integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
            ) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(
                integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated
            )
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating16BitUnsignedAccelerated
            ) as usize
                - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating16BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating16BitSignedAccelerated
            ) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating16BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated
            ) as usize
                - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating32BitUnsignedAccelerated
            ) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating32BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating32BitSignedAccelerated
            ) as usize
                - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating32BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated
            ) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating64BitUnsignedAccelerated
            ) as usize
                - ptr as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating64BitUnsignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating64BitSignedAccelerated
            ) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating64BitSignedAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!(
                (*ptr).integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated
            ) as usize
                - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerDotProductProperties),
            "::",
            stringify!(integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated)
        )
    );
}
impl Default for VkPhysicalDeviceShaderIntegerDotProductProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceTexelBufferAlignmentProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    pub uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTexelBufferAlignmentProperties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceTexelBufferAlignmentProperties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTexelBufferAlignmentProperties>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentProperties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTexelBufferAlignmentProperties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentProperties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentProperties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).storageTexelBufferOffsetAlignmentBytes) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentProperties),
            "::",
            stringify!(storageTexelBufferOffsetAlignmentBytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).storageTexelBufferOffsetSingleTexelAlignment) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentProperties),
            "::",
            stringify!(storageTexelBufferOffsetSingleTexelAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uniformTexelBufferOffsetAlignmentBytes) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentProperties),
            "::",
            stringify!(uniformTexelBufferOffsetAlignmentBytes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uniformTexelBufferOffsetSingleTexelAlignment) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentProperties),
            "::",
            stringify!(uniformTexelBufferOffsetSingleTexelAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceTexelBufferAlignmentProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFormatProperties3 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub linearTilingFeatures: VkFormatFeatureFlags2,
    pub optimalTilingFeatures: VkFormatFeatureFlags2,
    pub bufferFeatures: VkFormatFeatureFlags2,
}
#[test]
fn bindgen_test_layout_VkFormatProperties3() {
    const UNINIT: ::std::mem::MaybeUninit<VkFormatProperties3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFormatProperties3>(),
        40usize,
        concat!("Size of: ", stringify!(VkFormatProperties3))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFormatProperties3>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFormatProperties3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties3),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties3),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearTilingFeatures) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties3),
            "::",
            stringify!(linearTilingFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optimalTilingFeatures) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties3),
            "::",
            stringify!(optimalTilingFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferFeatures) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFormatProperties3),
            "::",
            stringify!(bufferFeatures)
        )
    );
}
impl Default for VkFormatProperties3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMaintenance4Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maintenance4: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMaintenance4Features() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMaintenance4Features> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMaintenance4Features>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMaintenance4Features)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMaintenance4Features>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMaintenance4Features)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance4Features),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance4Features),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maintenance4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance4Features),
            "::",
            stringify!(maintenance4)
        )
    );
}
impl Default for VkPhysicalDeviceMaintenance4Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMaintenance4Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxBufferSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMaintenance4Properties() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMaintenance4Properties> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMaintenance4Properties>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMaintenance4Properties)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMaintenance4Properties>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMaintenance4Properties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance4Properties),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance4Properties),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBufferSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMaintenance4Properties),
            "::",
            stringify!(maxBufferSize)
        )
    );
}
impl Default for VkPhysicalDeviceMaintenance4Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceBufferMemoryRequirements {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pCreateInfo: *const VkBufferCreateInfo,
}
#[test]
fn bindgen_test_layout_VkDeviceBufferMemoryRequirements() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceBufferMemoryRequirements> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceBufferMemoryRequirements>(),
        24usize,
        concat!("Size of: ", stringify!(VkDeviceBufferMemoryRequirements))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceBufferMemoryRequirements>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceBufferMemoryRequirements)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceBufferMemoryRequirements),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceBufferMemoryRequirements),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCreateInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceBufferMemoryRequirements),
            "::",
            stringify!(pCreateInfo)
        )
    );
}
impl Default for VkDeviceBufferMemoryRequirements {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceImageMemoryRequirements {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pCreateInfo: *const VkImageCreateInfo,
    pub planeAspect: VkImageAspectFlagBits,
}
#[test]
fn bindgen_test_layout_VkDeviceImageMemoryRequirements() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceImageMemoryRequirements> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceImageMemoryRequirements>(),
        32usize,
        concat!("Size of: ", stringify!(VkDeviceImageMemoryRequirements))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceImageMemoryRequirements>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceImageMemoryRequirements))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceImageMemoryRequirements),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceImageMemoryRequirements),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCreateInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceImageMemoryRequirements),
            "::",
            stringify!(pCreateInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeAspect) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceImageMemoryRequirements),
            "::",
            stringify!(planeAspect)
        )
    );
}
impl Default for VkDeviceImageMemoryRequirements {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceToolProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolProperties,
    ) -> VkResult,
>;
pub type PFN_vkCreatePrivateDataSlot = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlot,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPrivateDataSlot = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlot,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSetPrivateData = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        data: u64,
    ) -> VkResult,
>;
pub type PFN_vkGetPrivateData = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        pData: *mut u64,
    ),
>;
pub type PFN_vkCmdSetEvent2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        pDependencyInfo: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdResetEvent2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags2,
    ),
>;
pub type PFN_vkCmdWaitEvents2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        pDependencyInfos: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdPipelineBarrier2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pDependencyInfo: *const VkDependencyInfo),
>;
pub type PFN_vkCmdWriteTimestamp2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        queryPool: VkQueryPool,
        query: u32,
    ),
>;
pub type PFN_vkQueueSubmit2 = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo2,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkCmdCopyBuffer2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pCopyBufferInfo: *const VkCopyBufferInfo2),
>;
pub type PFN_vkCmdCopyImage2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pCopyImageInfo: *const VkCopyImageInfo2),
>;
pub type PFN_vkCmdCopyBufferToImage2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCopyBufferToImageInfo: *const VkCopyBufferToImageInfo2,
    ),
>;
pub type PFN_vkCmdCopyImageToBuffer2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCopyImageToBufferInfo: *const VkCopyImageToBufferInfo2,
    ),
>;
pub type PFN_vkCmdBlitImage2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pBlitImageInfo: *const VkBlitImageInfo2),
>;
pub type PFN_vkCmdResolveImage2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pResolveImageInfo: *const VkResolveImageInfo2,
    ),
>;
pub type PFN_vkCmdBeginRendering = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pRenderingInfo: *const VkRenderingInfo),
>;
pub type PFN_vkCmdEndRendering =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdSetCullMode = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags),
>;
pub type PFN_vkCmdSetFrontFace = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace),
>;
pub type PFN_vkCmdSetPrimitiveTopology = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology),
>;
pub type PFN_vkCmdSetViewportWithCount = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissorWithCount = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdSetDepthTestEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthWriteEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthCompareOp = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp),
>;
pub type PFN_vkCmdSetDepthBoundsTestEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilTestEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilOp = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    ),
>;
pub type PFN_vkCmdSetRasterizerDiscardEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthBiasEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32),
>;
pub type PFN_vkCmdSetPrimitiveRestartEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32),
>;
pub type PFN_vkGetDeviceBufferMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceBufferMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageSparseMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceToolProperties(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolProperties,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreatePrivateDataSlot(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlot,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyPrivateDataSlot(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlot,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkSetPrivateData(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        data: u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPrivateData(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        pData: *mut u64,
    );
}
extern "system" {
    pub fn vkCmdSetEvent2(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        pDependencyInfo: *const VkDependencyInfo,
    );
}
extern "system" {
    pub fn vkCmdResetEvent2(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags2,
    );
}
extern "system" {
    pub fn vkCmdWaitEvents2(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        pDependencyInfos: *const VkDependencyInfo,
    );
}
extern "system" {
    pub fn vkCmdPipelineBarrier2(
        commandBuffer: VkCommandBuffer,
        pDependencyInfo: *const VkDependencyInfo,
    );
}
extern "system" {
    pub fn vkCmdWriteTimestamp2(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        queryPool: VkQueryPool,
        query: u32,
    );
}
extern "system" {
    pub fn vkQueueSubmit2(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo2,
        fence: VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdCopyBuffer2(
        commandBuffer: VkCommandBuffer,
        pCopyBufferInfo: *const VkCopyBufferInfo2,
    );
}
extern "system" {
    pub fn vkCmdCopyImage2(commandBuffer: VkCommandBuffer, pCopyImageInfo: *const VkCopyImageInfo2);
}
extern "system" {
    pub fn vkCmdCopyBufferToImage2(
        commandBuffer: VkCommandBuffer,
        pCopyBufferToImageInfo: *const VkCopyBufferToImageInfo2,
    );
}
extern "system" {
    pub fn vkCmdCopyImageToBuffer2(
        commandBuffer: VkCommandBuffer,
        pCopyImageToBufferInfo: *const VkCopyImageToBufferInfo2,
    );
}
extern "system" {
    pub fn vkCmdBlitImage2(commandBuffer: VkCommandBuffer, pBlitImageInfo: *const VkBlitImageInfo2);
}
extern "system" {
    pub fn vkCmdResolveImage2(
        commandBuffer: VkCommandBuffer,
        pResolveImageInfo: *const VkResolveImageInfo2,
    );
}
extern "system" {
    pub fn vkCmdBeginRendering(
        commandBuffer: VkCommandBuffer,
        pRenderingInfo: *const VkRenderingInfo,
    );
}
extern "system" {
    pub fn vkCmdEndRendering(commandBuffer: VkCommandBuffer);
}
extern "system" {
    pub fn vkCmdSetCullMode(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags);
}
extern "system" {
    pub fn vkCmdSetFrontFace(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace);
}
extern "system" {
    pub fn vkCmdSetPrimitiveTopology(
        commandBuffer: VkCommandBuffer,
        primitiveTopology: VkPrimitiveTopology,
    );
}
extern "system" {
    pub fn vkCmdSetViewportWithCount(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    );
}
extern "system" {
    pub fn vkCmdSetScissorWithCount(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    );
}
extern "system" {
    pub fn vkCmdBindVertexBuffers2(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdSetDepthTestEnable(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetDepthWriteEnable(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetDepthCompareOp(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp);
}
extern "system" {
    pub fn vkCmdSetDepthBoundsTestEnable(
        commandBuffer: VkCommandBuffer,
        depthBoundsTestEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilTestEnable(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetStencilOp(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    );
}
extern "system" {
    pub fn vkCmdSetRasterizerDiscardEnable(
        commandBuffer: VkCommandBuffer,
        rasterizerDiscardEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetDepthBiasEnable(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetPrimitiveRestartEnable(
        commandBuffer: VkCommandBuffer,
        primitiveRestartEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkGetDeviceBufferMemoryRequirements(
        device: VkDevice,
        pInfo: *const VkDeviceBufferMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetDeviceImageMemoryRequirements(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetDeviceImageSparseMemoryRequirements(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSurfaceKHR_T {
    _unused: [u8; 0],
}
pub type VkSurfaceKHR = *mut VkSurfaceKHR_T;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPresentModeKHR {
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
    VK_PRESENT_MODE_MAILBOX_KHR = 1,
    VK_PRESENT_MODE_FIFO_KHR = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647,
}
impl VkColorSpaceKHR {
    pub const VK_COLORSPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR =
        VkColorSpaceKHR::VK_COLOR_SPACE_SRGB_NONLINEAR_KHR;
}
impl VkColorSpaceKHR {
    pub const VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: VkColorSpaceKHR =
        VkColorSpaceKHR::VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkColorSpaceKHR {
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
    VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
    VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
    VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
    VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSurfaceTransformFlagBitsKHR {
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256,
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCompositeAlphaFlagBitsKHR {
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8,
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkCompositeAlphaFlagsKHR = VkFlags;
pub type VkSurfaceTransformFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSurfaceCapabilitiesKHR {
    pub minImageCount: u32,
    pub maxImageCount: u32,
    pub currentExtent: VkExtent2D,
    pub minImageExtent: VkExtent2D,
    pub maxImageExtent: VkExtent2D,
    pub maxImageArrayLayers: u32,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub currentTransform: VkSurfaceTransformFlagBitsKHR,
    pub supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    pub supportedUsageFlags: VkImageUsageFlags,
}
#[test]
fn bindgen_test_layout_VkSurfaceCapabilitiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkSurfaceCapabilitiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceCapabilitiesKHR>(),
        52usize,
        concat!("Size of: ", stringify!(VkSurfaceCapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceCapabilitiesKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSurfaceCapabilitiesKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minImageCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(minImageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(maxImageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentExtent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(currentExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minImageExtent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(minImageExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageExtent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(maxImageExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageArrayLayers) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(maxImageArrayLayers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedTransforms) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(supportedTransforms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentTransform) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(currentTransform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedCompositeAlpha) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(supportedCompositeAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedUsageFlags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesKHR),
            "::",
            stringify!(supportedUsageFlags)
        )
    );
}
impl Default for VkSurfaceCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSurfaceFormatKHR {
    pub format: VkFormat,
    pub colorSpace: VkColorSpaceKHR,
}
#[test]
fn bindgen_test_layout_VkSurfaceFormatKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkSurfaceFormatKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceFormatKHR>(),
        8usize,
        concat!("Size of: ", stringify!(VkSurfaceFormatKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceFormatKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSurfaceFormatKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceFormatKHR),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorSpace) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceFormatKHR),
            "::",
            stringify!(colorSpace)
        )
    );
}
impl Default for VkSurfaceFormatKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkDestroySurfaceKHR = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        surface: VkSurfaceKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        queueFamilyIndex: u32,
        surface: VkSurfaceKHR,
        pSupported: *mut VkBool32,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormatKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pPresentModeCount: *mut u32,
        pPresentModes: *mut VkPresentModeKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkDestroySurfaceKHR(
        instance: VkInstance,
        surface: VkSurfaceKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceSupportKHR(
        physicalDevice: VkPhysicalDevice,
        queueFamilyIndex: u32,
        surface: VkSurfaceKHR,
        pSupported: *mut VkBool32,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilitiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceFormatsKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormatKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceSurfacePresentModesKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pPresentModeCount: *mut u32,
        pPresentModes: *mut VkPresentModeKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkSwapchainKHR_T {
    _unused: [u8; 0],
}
pub type VkSwapchainKHR = *mut VkSwapchainKHR_T;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSwapchainCreateFlagBitsKHR {
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2,
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4,
    VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 8,
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkSwapchainCreateFlagsKHR = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDeviceGroupPresentModeFlagBitsKHR {
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8,
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkDeviceGroupPresentModeFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSwapchainCreateFlagsKHR,
    pub surface: VkSurfaceKHR,
    pub minImageCount: u32,
    pub imageFormat: VkFormat,
    pub imageColorSpace: VkColorSpaceKHR,
    pub imageExtent: VkExtent2D,
    pub imageArrayLayers: u32,
    pub imageUsage: VkImageUsageFlags,
    pub imageSharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
    pub preTransform: VkSurfaceTransformFlagBitsKHR,
    pub compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    pub presentMode: VkPresentModeKHR,
    pub clipped: VkBool32,
    pub oldSwapchain: VkSwapchainKHR,
}
#[test]
fn bindgen_test_layout_VkSwapchainCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkSwapchainCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainCreateInfoKHR>(),
        104usize,
        concat!("Size of: ", stringify!(VkSwapchainCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSwapchainCreateInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surface) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(surface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minImageCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(minImageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageFormat) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageColorSpace) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageColorSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageExtent) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageArrayLayers) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageArrayLayers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageUsage) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageUsage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSharingMode) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(imageSharingMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyIndexCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(queueFamilyIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pQueueFamilyIndices) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(pQueueFamilyIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preTransform) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(preTransform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compositeAlpha) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(compositeAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentMode) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(presentMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clipped) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(clipped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldSwapchain) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCreateInfoKHR),
            "::",
            stringify!(oldSwapchain)
        )
    );
}
impl Default for VkSwapchainCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub swapchainCount: u32,
    pub pSwapchains: *const VkSwapchainKHR,
    pub pImageIndices: *const u32,
    pub pResults: *mut VkResult,
}
#[test]
fn bindgen_test_layout_VkPresentInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPresentInfoKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPresentInfoKHR>(),
        64usize,
        concat!("Size of: ", stringify!(VkPresentInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).waitSemaphoreCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(waitSemaphoreCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pWaitSemaphores) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pWaitSemaphores)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchainCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSwapchains) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pSwapchains)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pImageIndices) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pImageIndices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pResults) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentInfoKHR),
            "::",
            stringify!(pResults)
        )
    );
}
impl Default for VkPresentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
}
#[test]
fn bindgen_test_layout_VkImageSwapchainCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageSwapchainCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageSwapchainCreateInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageSwapchainCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSwapchainCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageSwapchainCreateInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSwapchainCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSwapchainCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSwapchainCreateInfoKHR),
            "::",
            stringify!(swapchain)
        )
    );
}
impl Default for VkImageSwapchainCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindImageMemorySwapchainInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
    pub imageIndex: u32,
}
#[test]
fn bindgen_test_layout_VkBindImageMemorySwapchainInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindImageMemorySwapchainInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindImageMemorySwapchainInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkBindImageMemorySwapchainInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindImageMemorySwapchainInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindImageMemorySwapchainInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemorySwapchainInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemorySwapchainInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemorySwapchainInfoKHR),
            "::",
            stringify!(swapchain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageIndex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindImageMemorySwapchainInfoKHR),
            "::",
            stringify!(imageIndex)
        )
    );
}
impl Default for VkBindImageMemorySwapchainInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAcquireNextImageInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
    pub timeout: u64,
    pub semaphore: VkSemaphore,
    pub fence: VkFence,
    pub deviceMask: u32,
}
#[test]
fn bindgen_test_layout_VkAcquireNextImageInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAcquireNextImageInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAcquireNextImageInfoKHR>(),
        56usize,
        concat!("Size of: ", stringify!(VkAcquireNextImageInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAcquireNextImageInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAcquireNextImageInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(swapchain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semaphore) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(semaphore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceMask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireNextImageInfoKHR),
            "::",
            stringify!(deviceMask)
        )
    );
}
impl Default for VkAcquireNextImageInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceGroupPresentCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentMask: [u32; 32usize],
    pub modes: VkDeviceGroupPresentModeFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupPresentCapabilitiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceGroupPresentCapabilitiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupPresentCapabilitiesKHR>(),
        152usize,
        concat!("Size of: ", stringify!(VkDeviceGroupPresentCapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupPresentCapabilitiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceGroupPresentCapabilitiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentCapabilitiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentCapabilitiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentCapabilitiesKHR),
            "::",
            stringify!(presentMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modes) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentCapabilitiesKHR),
            "::",
            stringify!(modes)
        )
    );
}
impl Default for VkDeviceGroupPresentCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceGroupPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pDeviceMasks: *const u32,
    pub mode: VkDeviceGroupPresentModeFlagBitsKHR,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupPresentInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceGroupPresentInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupPresentInfoKHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkDeviceGroupPresentInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupPresentInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceGroupPresentInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchainCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentInfoKHR),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDeviceMasks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentInfoKHR),
            "::",
            stringify!(pDeviceMasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupPresentInfoKHR),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for VkDeviceGroupPresentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceGroupSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub modes: VkDeviceGroupPresentModeFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkDeviceGroupSwapchainCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceGroupSwapchainCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceGroupSwapchainCreateInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkDeviceGroupSwapchainCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceGroupSwapchainCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceGroupSwapchainCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSwapchainCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSwapchainCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceGroupSwapchainCreateInfoKHR),
            "::",
            stringify!(modes)
        )
    );
}
impl Default for VkDeviceGroupSwapchainCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateSwapchainKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchain: *mut VkSwapchainKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroySwapchainKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetSwapchainImagesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSwapchainImageCount: *mut u32,
        pSwapchainImages: *mut VkImage,
    ) -> VkResult,
>;
pub type PFN_vkAcquireNextImageKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        timeout: u64,
        semaphore: VkSemaphore,
        fence: VkFence,
        pImageIndex: *mut u32,
    ) -> VkResult,
>;
pub type PFN_vkQueuePresentKHR = ::std::option::Option<
    unsafe extern "system" fn(queue: VkQueue, pPresentInfo: *const VkPresentInfoKHR) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pDeviceGroupPresentCapabilities: *mut VkDeviceGroupPresentCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupSurfacePresentModesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        surface: VkSurfaceKHR,
        pModes: *mut VkDeviceGroupPresentModeFlagsKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDevicePresentRectanglesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pRectCount: *mut u32,
        pRects: *mut VkRect2D,
    ) -> VkResult,
>;
pub type PFN_vkAcquireNextImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAcquireInfo: *const VkAcquireNextImageInfoKHR,
        pImageIndex: *mut u32,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkCreateSwapchainKHR(
        device: VkDevice,
        pCreateInfo: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchain: *mut VkSwapchainKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroySwapchainKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetSwapchainImagesKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSwapchainImageCount: *mut u32,
        pSwapchainImages: *mut VkImage,
    ) -> VkResult;
}
extern "system" {
    pub fn vkAcquireNextImageKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        timeout: u64,
        semaphore: VkSemaphore,
        fence: VkFence,
        pImageIndex: *mut u32,
    ) -> VkResult;
}
extern "system" {
    pub fn vkQueuePresentKHR(queue: VkQueue, pPresentInfo: *const VkPresentInfoKHR) -> VkResult;
}
extern "system" {
    pub fn vkGetDeviceGroupPresentCapabilitiesKHR(
        device: VkDevice,
        pDeviceGroupPresentCapabilities: *mut VkDeviceGroupPresentCapabilitiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDeviceGroupSurfacePresentModesKHR(
        device: VkDevice,
        surface: VkSurfaceKHR,
        pModes: *mut VkDeviceGroupPresentModeFlagsKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDevicePresentRectanglesKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pRectCount: *mut u32,
        pRects: *mut VkRect2D,
    ) -> VkResult;
}
extern "system" {
    pub fn vkAcquireNextImage2KHR(
        device: VkDevice,
        pAcquireInfo: *const VkAcquireNextImageInfoKHR,
        pImageIndex: *mut u32,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayKHR_T {
    _unused: [u8; 0],
}
pub type VkDisplayKHR = *mut VkDisplayKHR_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDisplayModeKHR_T {
    _unused: [u8; 0],
}
pub type VkDisplayModeKHR = *mut VkDisplayModeKHR_T;
pub type VkDisplayModeCreateFlagsKHR = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDisplayPlaneAlphaFlagBitsKHR {
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8,
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub type VkDisplaySurfaceCreateFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayModeParametersKHR {
    pub visibleRegion: VkExtent2D,
    pub refreshRate: u32,
}
#[test]
fn bindgen_test_layout_VkDisplayModeParametersKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayModeParametersKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayModeParametersKHR>(),
        12usize,
        concat!("Size of: ", stringify!(VkDisplayModeParametersKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayModeParametersKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDisplayModeParametersKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visibleRegion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeParametersKHR),
            "::",
            stringify!(visibleRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refreshRate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeParametersKHR),
            "::",
            stringify!(refreshRate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayModeCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDisplayModeCreateFlagsKHR,
    pub parameters: VkDisplayModeParametersKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayModeCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayModeCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayModeCreateInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkDisplayModeCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayModeCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayModeCreateInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeCreateInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameters) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeCreateInfoKHR),
            "::",
            stringify!(parameters)
        )
    );
}
impl Default for VkDisplayModeCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayModePropertiesKHR {
    pub displayMode: VkDisplayModeKHR,
    pub parameters: VkDisplayModeParametersKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayModePropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayModePropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayModePropertiesKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkDisplayModePropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayModePropertiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayModePropertiesKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayMode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModePropertiesKHR),
            "::",
            stringify!(displayMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameters) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModePropertiesKHR),
            "::",
            stringify!(parameters)
        )
    );
}
impl Default for VkDisplayModePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayPlaneCapabilitiesKHR {
    pub supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
    pub minSrcPosition: VkOffset2D,
    pub maxSrcPosition: VkOffset2D,
    pub minSrcExtent: VkExtent2D,
    pub maxSrcExtent: VkExtent2D,
    pub minDstPosition: VkOffset2D,
    pub maxDstPosition: VkOffset2D,
    pub minDstExtent: VkExtent2D,
    pub maxDstExtent: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkDisplayPlaneCapabilitiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayPlaneCapabilitiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPlaneCapabilitiesKHR>(),
        68usize,
        concat!("Size of: ", stringify!(VkDisplayPlaneCapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPlaneCapabilitiesKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkDisplayPlaneCapabilitiesKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedAlpha) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(supportedAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minSrcPosition) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(minSrcPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSrcPosition) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(maxSrcPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minSrcExtent) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(minSrcExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSrcExtent) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(maxSrcExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minDstPosition) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(minDstPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDstPosition) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(maxDstPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minDstExtent) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(minDstExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDstExtent) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilitiesKHR),
            "::",
            stringify!(maxDstExtent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayPlanePropertiesKHR {
    pub currentDisplay: VkDisplayKHR,
    pub currentStackIndex: u32,
}
#[test]
fn bindgen_test_layout_VkDisplayPlanePropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayPlanePropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPlanePropertiesKHR>(),
        16usize,
        concat!("Size of: ", stringify!(VkDisplayPlanePropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPlanePropertiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPlanePropertiesKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentDisplay) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlanePropertiesKHR),
            "::",
            stringify!(currentDisplay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentStackIndex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlanePropertiesKHR),
            "::",
            stringify!(currentStackIndex)
        )
    );
}
impl Default for VkDisplayPlanePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayPropertiesKHR {
    pub display: VkDisplayKHR,
    pub displayName: *const ::std::os::raw::c_char,
    pub physicalDimensions: VkExtent2D,
    pub physicalResolution: VkExtent2D,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub planeReorderPossible: VkBool32,
    pub persistentContent: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDisplayPropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayPropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPropertiesKHR>(),
        48usize,
        concat!("Size of: ", stringify!(VkDisplayPropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPropertiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPropertiesKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).display) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayName) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(displayName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physicalDimensions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(physicalDimensions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physicalResolution) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(physicalResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedTransforms) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(supportedTransforms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeReorderPossible) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(planeReorderPossible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).persistentContent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPropertiesKHR),
            "::",
            stringify!(persistentContent)
        )
    );
}
impl Default for VkDisplayPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkDisplaySurfaceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDisplaySurfaceCreateFlagsKHR,
    pub displayMode: VkDisplayModeKHR,
    pub planeIndex: u32,
    pub planeStackIndex: u32,
    pub transform: VkSurfaceTransformFlagBitsKHR,
    pub globalAlpha: f32,
    pub alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
    pub imageExtent: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkDisplaySurfaceCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplaySurfaceCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplaySurfaceCreateInfoKHR>(),
        64usize,
        concat!("Size of: ", stringify!(VkDisplaySurfaceCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplaySurfaceCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplaySurfaceCreateInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayMode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(displayMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeIndex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(planeIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeStackIndex) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(planeStackIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(transform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalAlpha) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(globalAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alphaMode) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(alphaMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageExtent) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplaySurfaceCreateInfoKHR),
            "::",
            stringify!(imageExtent)
        )
    );
}
impl Default for VkDisplaySurfaceCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlanePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        planeIndex: u32,
        pDisplayCount: *mut u32,
        pDisplays: *mut VkDisplayKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayModePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateDisplayModeKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pCreateInfo: *const VkDisplayModeCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pMode: *mut VkDisplayModeKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        mode: VkDisplayModeKHR,
        planeIndex: u32,
        pCapabilities: *mut VkDisplayPlaneCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateDisplayPlaneSurfaceKHR = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDisplaySurfaceCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceDisplayPropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPropertiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlanePropertiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDisplayPlaneSupportedDisplaysKHR(
        physicalDevice: VkPhysicalDevice,
        planeIndex: u32,
        pDisplayCount: *mut u32,
        pDisplays: *mut VkDisplayKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDisplayModePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModePropertiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateDisplayModeKHR(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pCreateInfo: *const VkDisplayModeCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pMode: *mut VkDisplayModeKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDisplayPlaneCapabilitiesKHR(
        physicalDevice: VkPhysicalDevice,
        mode: VkDisplayModeKHR,
        planeIndex: u32,
        pCapabilities: *mut VkDisplayPlaneCapabilitiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateDisplayPlaneSurfaceKHR(
        instance: VkInstance,
        pCreateInfo: *const VkDisplaySurfaceCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcRect: VkRect2D,
    pub dstRect: VkRect2D,
    pub persistent: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDisplayPresentInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayPresentInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPresentInfoKHR>(),
        56usize,
        concat!("Size of: ", stringify!(VkDisplayPresentInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPresentInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPresentInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPresentInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPresentInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcRect) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPresentInfoKHR),
            "::",
            stringify!(srcRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstRect) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPresentInfoKHR),
            "::",
            stringify!(dstRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).persistent) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPresentInfoKHR),
            "::",
            stringify!(persistent)
        )
    );
}
impl Default for VkDisplayPresentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateSharedSwapchainsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchainCount: u32,
        pCreateInfos: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchains: *mut VkSwapchainKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkCreateSharedSwapchainsKHR(
        device: VkDevice,
        swapchainCount: u32,
        pCreateInfos: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchains: *mut VkSwapchainKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoSessionKHR_T {
    _unused: [u8; 0],
}
pub type VkVideoSessionKHR = *mut VkVideoSessionKHR_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkVideoSessionParametersKHR_T {
    _unused: [u8; 0],
}
pub type VkVideoSessionParametersKHR = *mut VkVideoSessionParametersKHR_T;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkQueryResultStatusKHR {
    VK_QUERY_RESULT_STATUS_ERROR_KHR = -1,
    VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0,
    VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1,
    VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVideoCodecOperationFlagBitsKHR {
    VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0,
    VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 1,
    VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 2,
    VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkVideoCodecOperationFlagsKHR = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVideoChromaSubsamplingFlagBitsKHR {
    VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0,
    VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1,
    VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2,
    VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4,
    VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8,
    VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkVideoChromaSubsamplingFlagsKHR = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVideoComponentBitDepthFlagBitsKHR {
    VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0,
    VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1,
    VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4,
    VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16,
    VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkVideoComponentBitDepthFlagsKHR = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVideoCapabilityFlagBitsKHR {
    VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1,
    VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2,
    VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkVideoCapabilityFlagsKHR = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVideoSessionCreateFlagBitsKHR {
    VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1,
    VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkVideoSessionCreateFlagsKHR = VkFlags;
pub type VkVideoSessionParametersCreateFlagsKHR = VkFlags;
pub type VkVideoBeginCodingFlagsKHR = VkFlags;
pub type VkVideoEndCodingFlagsKHR = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVideoCodingControlFlagBitsKHR {
    VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1,
    VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkVideoCodingControlFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueueFamilyQueryResultStatusPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub queryResultStatusSupport: VkBool32,
}
#[test]
fn bindgen_test_layout_VkQueueFamilyQueryResultStatusPropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueueFamilyQueryResultStatusPropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueueFamilyQueryResultStatusPropertiesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkQueueFamilyQueryResultStatusPropertiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueueFamilyQueryResultStatusPropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkQueueFamilyQueryResultStatusPropertiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyQueryResultStatusPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyQueryResultStatusPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queryResultStatusSupport) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyQueryResultStatusPropertiesKHR),
            "::",
            stringify!(queryResultStatusSupport)
        )
    );
}
impl Default for VkQueueFamilyQueryResultStatusPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueueFamilyVideoPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub videoCodecOperations: VkVideoCodecOperationFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkQueueFamilyVideoPropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueueFamilyVideoPropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueueFamilyVideoPropertiesKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkQueueFamilyVideoPropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueueFamilyVideoPropertiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkQueueFamilyVideoPropertiesKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyVideoPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyVideoPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoCodecOperations) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyVideoPropertiesKHR),
            "::",
            stringify!(videoCodecOperations)
        )
    );
}
impl Default for VkQueueFamilyVideoPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub videoCodecOperation: VkVideoCodecOperationFlagBitsKHR,
    pub chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR,
    pub lumaBitDepth: VkVideoComponentBitDepthFlagsKHR,
    pub chromaBitDepth: VkVideoComponentBitDepthFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkVideoProfileInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoProfileInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoProfileInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkVideoProfileInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoProfileInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoProfileInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoProfileInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoProfileInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoCodecOperation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoProfileInfoKHR),
            "::",
            stringify!(videoCodecOperation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chromaSubsampling) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoProfileInfoKHR),
            "::",
            stringify!(chromaSubsampling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lumaBitDepth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoProfileInfoKHR),
            "::",
            stringify!(lumaBitDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chromaBitDepth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoProfileInfoKHR),
            "::",
            stringify!(chromaBitDepth)
        )
    );
}
impl Default for VkVideoProfileInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoProfileListInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub profileCount: u32,
    pub pProfiles: *const VkVideoProfileInfoKHR,
}
#[test]
fn bindgen_test_layout_VkVideoProfileListInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoProfileListInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoProfileListInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkVideoProfileListInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoProfileListInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoProfileListInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoProfileListInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoProfileListInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profileCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoProfileListInfoKHR),
            "::",
            stringify!(profileCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pProfiles) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoProfileListInfoKHR),
            "::",
            stringify!(pProfiles)
        )
    );
}
impl Default for VkVideoProfileListInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkVideoCapabilityFlagsKHR,
    pub minBitstreamBufferOffsetAlignment: VkDeviceSize,
    pub minBitstreamBufferSizeAlignment: VkDeviceSize,
    pub pictureAccessGranularity: VkExtent2D,
    pub minCodedExtent: VkExtent2D,
    pub maxCodedExtent: VkExtent2D,
    pub maxDpbSlots: u32,
    pub maxActiveReferencePictures: u32,
    pub stdHeaderVersion: VkExtensionProperties,
}
#[test]
fn bindgen_test_layout_VkVideoCapabilitiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoCapabilitiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoCapabilitiesKHR>(),
        336usize,
        concat!("Size of: ", stringify!(VkVideoCapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoCapabilitiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoCapabilitiesKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minBitstreamBufferOffsetAlignment) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(minBitstreamBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minBitstreamBufferSizeAlignment) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(minBitstreamBufferSizeAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pictureAccessGranularity) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(pictureAccessGranularity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minCodedExtent) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(minCodedExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxCodedExtent) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(maxCodedExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDpbSlots) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(maxDpbSlots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxActiveReferencePictures) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(maxActiveReferencePictures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdHeaderVersion) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCapabilitiesKHR),
            "::",
            stringify!(stdHeaderVersion)
        )
    );
}
impl Default for VkVideoCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVideoFormatInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageUsage: VkImageUsageFlags,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVideoFormatInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVideoFormatInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVideoFormatInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceVideoFormatInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVideoFormatInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVideoFormatInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVideoFormatInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVideoFormatInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageUsage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVideoFormatInfoKHR),
            "::",
            stringify!(imageUsage)
        )
    );
}
impl Default for VkPhysicalDeviceVideoFormatInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoFormatPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub format: VkFormat,
    pub componentMapping: VkComponentMapping,
    pub imageCreateFlags: VkImageCreateFlags,
    pub imageType: VkImageType,
    pub imageTiling: VkImageTiling,
    pub imageUsageFlags: VkImageUsageFlags,
}
#[test]
fn bindgen_test_layout_VkVideoFormatPropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoFormatPropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoFormatPropertiesKHR>(),
        56usize,
        concat!("Size of: ", stringify!(VkVideoFormatPropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoFormatPropertiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoFormatPropertiesKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoFormatPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoFormatPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoFormatPropertiesKHR),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentMapping) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoFormatPropertiesKHR),
            "::",
            stringify!(componentMapping)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageCreateFlags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoFormatPropertiesKHR),
            "::",
            stringify!(imageCreateFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageType) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoFormatPropertiesKHR),
            "::",
            stringify!(imageType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageTiling) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoFormatPropertiesKHR),
            "::",
            stringify!(imageTiling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageUsageFlags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoFormatPropertiesKHR),
            "::",
            stringify!(imageUsageFlags)
        )
    );
}
impl Default for VkVideoFormatPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoPictureResourceInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub codedOffset: VkOffset2D,
    pub codedExtent: VkExtent2D,
    pub baseArrayLayer: u32,
    pub imageViewBinding: VkImageView,
}
#[test]
fn bindgen_test_layout_VkVideoPictureResourceInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoPictureResourceInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoPictureResourceInfoKHR>(),
        48usize,
        concat!("Size of: ", stringify!(VkVideoPictureResourceInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoPictureResourceInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoPictureResourceInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoPictureResourceInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoPictureResourceInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codedOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoPictureResourceInfoKHR),
            "::",
            stringify!(codedOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codedExtent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoPictureResourceInfoKHR),
            "::",
            stringify!(codedExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseArrayLayer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoPictureResourceInfoKHR),
            "::",
            stringify!(baseArrayLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageViewBinding) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoPictureResourceInfoKHR),
            "::",
            stringify!(imageViewBinding)
        )
    );
}
impl Default for VkVideoPictureResourceInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoReferenceSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub slotIndex: i32,
    pub pPictureResource: *const VkVideoPictureResourceInfoKHR,
}
#[test]
fn bindgen_test_layout_VkVideoReferenceSlotInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoReferenceSlotInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoReferenceSlotInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkVideoReferenceSlotInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoReferenceSlotInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoReferenceSlotInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoReferenceSlotInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoReferenceSlotInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slotIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoReferenceSlotInfoKHR),
            "::",
            stringify!(slotIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPictureResource) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoReferenceSlotInfoKHR),
            "::",
            stringify!(pPictureResource)
        )
    );
}
impl Default for VkVideoReferenceSlotInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoSessionMemoryRequirementsKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryBindIndex: u32,
    pub memoryRequirements: VkMemoryRequirements,
}
#[test]
fn bindgen_test_layout_VkVideoSessionMemoryRequirementsKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoSessionMemoryRequirementsKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoSessionMemoryRequirementsKHR>(),
        48usize,
        concat!("Size of: ", stringify!(VkVideoSessionMemoryRequirementsKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoSessionMemoryRequirementsKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVideoSessionMemoryRequirementsKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionMemoryRequirementsKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionMemoryRequirementsKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryBindIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionMemoryRequirementsKHR),
            "::",
            stringify!(memoryBindIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryRequirements) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionMemoryRequirementsKHR),
            "::",
            stringify!(memoryRequirements)
        )
    );
}
impl Default for VkVideoSessionMemoryRequirementsKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindVideoSessionMemoryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memoryBindIndex: u32,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub memorySize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkBindVideoSessionMemoryInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindVideoSessionMemoryInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindVideoSessionMemoryInfoKHR>(),
        48usize,
        concat!("Size of: ", stringify!(VkBindVideoSessionMemoryInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindVideoSessionMemoryInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkBindVideoSessionMemoryInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVideoSessionMemoryInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVideoSessionMemoryInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryBindIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVideoSessionMemoryInfoKHR),
            "::",
            stringify!(memoryBindIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVideoSessionMemoryInfoKHR),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVideoSessionMemoryInfoKHR),
            "::",
            stringify!(memoryOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memorySize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVideoSessionMemoryInfoKHR),
            "::",
            stringify!(memorySize)
        )
    );
}
impl Default for VkBindVideoSessionMemoryInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoSessionCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub queueFamilyIndex: u32,
    pub flags: VkVideoSessionCreateFlagsKHR,
    pub pVideoProfile: *const VkVideoProfileInfoKHR,
    pub pictureFormat: VkFormat,
    pub maxCodedExtent: VkExtent2D,
    pub referencePictureFormat: VkFormat,
    pub maxDpbSlots: u32,
    pub maxActiveReferencePictures: u32,
    pub pStdHeaderVersion: *const VkExtensionProperties,
}
#[test]
fn bindgen_test_layout_VkVideoSessionCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoSessionCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoSessionCreateInfoKHR>(),
        64usize,
        concat!("Size of: ", stringify!(VkVideoSessionCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoSessionCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoSessionCreateInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(queueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVideoProfile) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(pVideoProfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pictureFormat) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(pictureFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxCodedExtent) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(maxCodedExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referencePictureFormat) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(referencePictureFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDpbSlots) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(maxDpbSlots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxActiveReferencePictures) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(maxActiveReferencePictures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStdHeaderVersion) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionCreateInfoKHR),
            "::",
            stringify!(pStdHeaderVersion)
        )
    );
}
impl Default for VkVideoSessionCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoSessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoSessionParametersCreateFlagsKHR,
    pub videoSessionParametersTemplate: VkVideoSessionParametersKHR,
    pub videoSession: VkVideoSessionKHR,
}
#[test]
fn bindgen_test_layout_VkVideoSessionParametersCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoSessionParametersCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoSessionParametersCreateInfoKHR>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkVideoSessionParametersCreateInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoSessionParametersCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVideoSessionParametersCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionParametersCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionParametersCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionParametersCreateInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).videoSessionParametersTemplate) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionParametersCreateInfoKHR),
            "::",
            stringify!(videoSessionParametersTemplate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoSession) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionParametersCreateInfoKHR),
            "::",
            stringify!(videoSession)
        )
    );
}
impl Default for VkVideoSessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoSessionParametersUpdateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub updateSequenceCount: u32,
}
#[test]
fn bindgen_test_layout_VkVideoSessionParametersUpdateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoSessionParametersUpdateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoSessionParametersUpdateInfoKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkVideoSessionParametersUpdateInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoSessionParametersUpdateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVideoSessionParametersUpdateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionParametersUpdateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionParametersUpdateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updateSequenceCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoSessionParametersUpdateInfoKHR),
            "::",
            stringify!(updateSequenceCount)
        )
    );
}
impl Default for VkVideoSessionParametersUpdateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoBeginCodingInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoBeginCodingFlagsKHR,
    pub videoSession: VkVideoSessionKHR,
    pub videoSessionParameters: VkVideoSessionParametersKHR,
    pub referenceSlotCount: u32,
    pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR,
}
#[test]
fn bindgen_test_layout_VkVideoBeginCodingInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoBeginCodingInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoBeginCodingInfoKHR>(),
        56usize,
        concat!("Size of: ", stringify!(VkVideoBeginCodingInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoBeginCodingInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoBeginCodingInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoBeginCodingInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoBeginCodingInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoBeginCodingInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoSession) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoBeginCodingInfoKHR),
            "::",
            stringify!(videoSession)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoSessionParameters) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoBeginCodingInfoKHR),
            "::",
            stringify!(videoSessionParameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referenceSlotCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoBeginCodingInfoKHR),
            "::",
            stringify!(referenceSlotCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pReferenceSlots) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoBeginCodingInfoKHR),
            "::",
            stringify!(pReferenceSlots)
        )
    );
}
impl Default for VkVideoBeginCodingInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoEndCodingInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoEndCodingFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkVideoEndCodingInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoEndCodingInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoEndCodingInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkVideoEndCodingInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoEndCodingInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoEndCodingInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoEndCodingInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoEndCodingInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoEndCodingInfoKHR),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkVideoEndCodingInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoCodingControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoCodingControlFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkVideoCodingControlInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoCodingControlInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoCodingControlInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkVideoCodingControlInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoCodingControlInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoCodingControlInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCodingControlInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCodingControlInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoCodingControlInfoKHR),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkVideoCodingControlInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pVideoProfile: *const VkVideoProfileInfoKHR,
        pCapabilities: *mut VkVideoCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pVideoFormatInfo: *const VkPhysicalDeviceVideoFormatInfoKHR,
        pVideoFormatPropertyCount: *mut u32,
        pVideoFormatProperties: *mut VkVideoFormatPropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateVideoSessionKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkVideoSessionCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pVideoSession: *mut VkVideoSessionKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyVideoSessionKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetVideoSessionMemoryRequirementsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        pMemoryRequirementsCount: *mut u32,
        pMemoryRequirements: *mut VkVideoSessionMemoryRequirementsKHR,
    ) -> VkResult,
>;
pub type PFN_vkBindVideoSessionMemoryKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        bindSessionMemoryInfoCount: u32,
        pBindSessionMemoryInfos: *const VkBindVideoSessionMemoryInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateVideoSessionParametersKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkVideoSessionParametersCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pVideoSessionParameters: *mut VkVideoSessionParametersKHR,
    ) -> VkResult,
>;
pub type PFN_vkUpdateVideoSessionParametersKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        videoSessionParameters: VkVideoSessionParametersKHR,
        pUpdateInfo: *const VkVideoSessionParametersUpdateInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyVideoSessionParametersKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        videoSessionParameters: VkVideoSessionParametersKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdBeginVideoCodingKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkVideoBeginCodingInfoKHR,
    ),
>;
pub type PFN_vkCmdEndVideoCodingKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pEndCodingInfo: *const VkVideoEndCodingInfoKHR,
    ),
>;
pub type PFN_vkCmdControlVideoCodingKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCodingControlInfo: *const VkVideoCodingControlInfoKHR,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceVideoCapabilitiesKHR(
        physicalDevice: VkPhysicalDevice,
        pVideoProfile: *const VkVideoProfileInfoKHR,
        pCapabilities: *mut VkVideoCapabilitiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceVideoFormatPropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pVideoFormatInfo: *const VkPhysicalDeviceVideoFormatInfoKHR,
        pVideoFormatPropertyCount: *mut u32,
        pVideoFormatProperties: *mut VkVideoFormatPropertiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateVideoSessionKHR(
        device: VkDevice,
        pCreateInfo: *const VkVideoSessionCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pVideoSession: *mut VkVideoSessionKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyVideoSessionKHR(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetVideoSessionMemoryRequirementsKHR(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        pMemoryRequirementsCount: *mut u32,
        pMemoryRequirements: *mut VkVideoSessionMemoryRequirementsKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkBindVideoSessionMemoryKHR(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        bindSessionMemoryInfoCount: u32,
        pBindSessionMemoryInfos: *const VkBindVideoSessionMemoryInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateVideoSessionParametersKHR(
        device: VkDevice,
        pCreateInfo: *const VkVideoSessionParametersCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pVideoSessionParameters: *mut VkVideoSessionParametersKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkUpdateVideoSessionParametersKHR(
        device: VkDevice,
        videoSessionParameters: VkVideoSessionParametersKHR,
        pUpdateInfo: *const VkVideoSessionParametersUpdateInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyVideoSessionParametersKHR(
        device: VkDevice,
        videoSessionParameters: VkVideoSessionParametersKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCmdBeginVideoCodingKHR(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkVideoBeginCodingInfoKHR,
    );
}
extern "system" {
    pub fn vkCmdEndVideoCodingKHR(
        commandBuffer: VkCommandBuffer,
        pEndCodingInfo: *const VkVideoEndCodingInfoKHR,
    );
}
extern "system" {
    pub fn vkCmdControlVideoCodingKHR(
        commandBuffer: VkCommandBuffer,
        pCodingControlInfo: *const VkVideoCodingControlInfoKHR,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVideoDecodeCapabilityFlagBitsKHR {
    VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1,
    VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2,
    VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkVideoDecodeCapabilityFlagsKHR = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVideoDecodeUsageFlagBitsKHR {
    VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0,
    VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1,
    VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2,
    VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4,
    VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkVideoDecodeUsageFlagsKHR = VkFlags;
pub type VkVideoDecodeFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkVideoDecodeCapabilityFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeCapabilitiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeCapabilitiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeCapabilitiesKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkVideoDecodeCapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeCapabilitiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoDecodeCapabilitiesKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeCapabilitiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeCapabilitiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeCapabilitiesKHR),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkVideoDecodeCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeUsageInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub videoUsageHints: VkVideoDecodeUsageFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeUsageInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeUsageInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeUsageInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkVideoDecodeUsageInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeUsageInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoDecodeUsageInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeUsageInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeUsageInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).videoUsageHints) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeUsageInfoKHR),
            "::",
            stringify!(videoUsageHints)
        )
    );
}
impl Default for VkVideoDecodeUsageInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoDecodeFlagsKHR,
    pub srcBuffer: VkBuffer,
    pub srcBufferOffset: VkDeviceSize,
    pub srcBufferRange: VkDeviceSize,
    pub dstPictureResource: VkVideoPictureResourceInfoKHR,
    pub pSetupReferenceSlot: *const VkVideoReferenceSlotInfoKHR,
    pub referenceSlotCount: u32,
    pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeInfoKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeInfoKHR>(),
        120usize,
        concat!("Size of: ", stringify!(VkVideoDecodeInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoDecodeInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcBuffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeInfoKHR),
            "::",
            stringify!(srcBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcBufferOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeInfoKHR),
            "::",
            stringify!(srcBufferOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcBufferRange) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeInfoKHR),
            "::",
            stringify!(srcBufferRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPictureResource) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeInfoKHR),
            "::",
            stringify!(dstPictureResource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSetupReferenceSlot) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeInfoKHR),
            "::",
            stringify!(pSetupReferenceSlot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).referenceSlotCount) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeInfoKHR),
            "::",
            stringify!(referenceSlotCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pReferenceSlots) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeInfoKHR),
            "::",
            stringify!(pReferenceSlots)
        )
    );
}
impl Default for VkVideoDecodeInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdDecodeVideoKHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pDecodeInfo: *const VkVideoDecodeInfoKHR),
>;
extern "system" {
    pub fn vkCmdDecodeVideoKHR(
        commandBuffer: VkCommandBuffer,
        pDecodeInfo: *const VkVideoDecodeInfoKHR,
    );
}
impl StdVideoH264ChromaFormatIdc {
    pub const STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM: StdVideoH264ChromaFormatIdc =
        StdVideoH264ChromaFormatIdc::STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264ChromaFormatIdc {
    STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = 0,
    STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = 1,
    STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = 2,
    STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = 3,
    STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = 2147483647,
}
impl StdVideoH264ProfileIdc {
    pub const STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM: StdVideoH264ProfileIdc =
        StdVideoH264ProfileIdc::STD_VIDEO_H264_PROFILE_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264ProfileIdc {
    STD_VIDEO_H264_PROFILE_IDC_BASELINE = 66,
    STD_VIDEO_H264_PROFILE_IDC_MAIN = 77,
    STD_VIDEO_H264_PROFILE_IDC_HIGH = 100,
    STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = 244,
    STD_VIDEO_H264_PROFILE_IDC_INVALID = 2147483647,
}
impl StdVideoH264LevelIdc {
    pub const STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM: StdVideoH264LevelIdc =
        StdVideoH264LevelIdc::STD_VIDEO_H264_LEVEL_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264LevelIdc {
    STD_VIDEO_H264_LEVEL_IDC_1_0 = 0,
    STD_VIDEO_H264_LEVEL_IDC_1_1 = 1,
    STD_VIDEO_H264_LEVEL_IDC_1_2 = 2,
    STD_VIDEO_H264_LEVEL_IDC_1_3 = 3,
    STD_VIDEO_H264_LEVEL_IDC_2_0 = 4,
    STD_VIDEO_H264_LEVEL_IDC_2_1 = 5,
    STD_VIDEO_H264_LEVEL_IDC_2_2 = 6,
    STD_VIDEO_H264_LEVEL_IDC_3_0 = 7,
    STD_VIDEO_H264_LEVEL_IDC_3_1 = 8,
    STD_VIDEO_H264_LEVEL_IDC_3_2 = 9,
    STD_VIDEO_H264_LEVEL_IDC_4_0 = 10,
    STD_VIDEO_H264_LEVEL_IDC_4_1 = 11,
    STD_VIDEO_H264_LEVEL_IDC_4_2 = 12,
    STD_VIDEO_H264_LEVEL_IDC_5_0 = 13,
    STD_VIDEO_H264_LEVEL_IDC_5_1 = 14,
    STD_VIDEO_H264_LEVEL_IDC_5_2 = 15,
    STD_VIDEO_H264_LEVEL_IDC_6_0 = 16,
    STD_VIDEO_H264_LEVEL_IDC_6_1 = 17,
    STD_VIDEO_H264_LEVEL_IDC_6_2 = 18,
    STD_VIDEO_H264_LEVEL_IDC_INVALID = 2147483647,
}
impl StdVideoH264PocType {
    pub const STD_VIDEO_H264_POC_TYPE_MAX_ENUM: StdVideoH264PocType =
        StdVideoH264PocType::STD_VIDEO_H264_POC_TYPE_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264PocType {
    STD_VIDEO_H264_POC_TYPE_0 = 0,
    STD_VIDEO_H264_POC_TYPE_1 = 1,
    STD_VIDEO_H264_POC_TYPE_2 = 2,
    STD_VIDEO_H264_POC_TYPE_INVALID = 2147483647,
}
impl StdVideoH264AspectRatioIdc {
    pub const STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM: StdVideoH264AspectRatioIdc =
        StdVideoH264AspectRatioIdc::STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264AspectRatioIdc {
    STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = 0,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = 1,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = 2,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = 3,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = 4,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = 5,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = 6,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = 7,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = 8,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = 9,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = 10,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = 11,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = 12,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = 13,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = 14,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = 15,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = 16,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = 255,
    STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = 2147483647,
}
impl StdVideoH264WeightedBipredIdc {
    pub const STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM: StdVideoH264WeightedBipredIdc =
        StdVideoH264WeightedBipredIdc::STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264WeightedBipredIdc {
    STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = 0,
    STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = 1,
    STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = 2,
    STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = 2147483647,
}
impl StdVideoH264ModificationOfPicNumsIdc {
    pub const STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM:
        StdVideoH264ModificationOfPicNumsIdc =
        StdVideoH264ModificationOfPicNumsIdc::STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264ModificationOfPicNumsIdc {
    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = 0,
    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = 1,
    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = 2,
    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = 3,
    STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = 2147483647,
}
impl StdVideoH264MemMgmtControlOp {
    pub const STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM: StdVideoH264MemMgmtControlOp =
        StdVideoH264MemMgmtControlOp::STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264MemMgmtControlOp {
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = 0,
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = 1,
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = 2,
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = 3,
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = 4,
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = 5,
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = 6,
    STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = 2147483647,
}
impl StdVideoH264CabacInitIdc {
    pub const STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM: StdVideoH264CabacInitIdc =
        StdVideoH264CabacInitIdc::STD_VIDEO_H264_CABAC_INIT_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264CabacInitIdc {
    STD_VIDEO_H264_CABAC_INIT_IDC_0 = 0,
    STD_VIDEO_H264_CABAC_INIT_IDC_1 = 1,
    STD_VIDEO_H264_CABAC_INIT_IDC_2 = 2,
    STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = 2147483647,
}
impl StdVideoH264DisableDeblockingFilterIdc {
    pub const STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM : StdVideoH264DisableDeblockingFilterIdc = StdVideoH264DisableDeblockingFilterIdc :: STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID ;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264DisableDeblockingFilterIdc {
    STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = 0,
    STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = 1,
    STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = 2,
    STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = 2147483647,
}
impl StdVideoH264SliceType {
    pub const STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM: StdVideoH264SliceType =
        StdVideoH264SliceType::STD_VIDEO_H264_SLICE_TYPE_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264SliceType {
    STD_VIDEO_H264_SLICE_TYPE_P = 0,
    STD_VIDEO_H264_SLICE_TYPE_B = 1,
    STD_VIDEO_H264_SLICE_TYPE_I = 2,
    STD_VIDEO_H264_SLICE_TYPE_INVALID = 2147483647,
}
impl StdVideoH264PictureType {
    pub const STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM: StdVideoH264PictureType =
        StdVideoH264PictureType::STD_VIDEO_H264_PICTURE_TYPE_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264PictureType {
    STD_VIDEO_H264_PICTURE_TYPE_P = 0,
    STD_VIDEO_H264_PICTURE_TYPE_B = 1,
    STD_VIDEO_H264_PICTURE_TYPE_I = 2,
    STD_VIDEO_H264_PICTURE_TYPE_IDR = 5,
    STD_VIDEO_H264_PICTURE_TYPE_INVALID = 2147483647,
}
impl StdVideoH264NonVclNaluType {
    pub const STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM: StdVideoH264NonVclNaluType =
        StdVideoH264NonVclNaluType::STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH264NonVclNaluType {
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = 0,
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = 1,
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = 2,
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = 3,
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = 4,
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = 5,
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = 6,
    STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = 2147483647,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH264SpsVuiFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[test]
fn bindgen_test_layout_StdVideoH264SpsVuiFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoH264SpsVuiFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoH264SpsVuiFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH264SpsVuiFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH264SpsVuiFlags))
    );
}
impl StdVideoH264SpsVuiFlags {
    #[inline]
    pub fn aspect_ratio_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aspect_ratio_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn overscan_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn overscan_appropriate_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_appropriate_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn video_signal_type_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_signal_type_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn video_full_range_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_full_range_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn color_description_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_color_description_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma_loc_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_loc_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn timing_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fixed_frame_rate_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fixed_frame_rate_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitstream_restriction_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitstream_restriction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nal_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nal_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vcl_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vcl_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        aspect_ratio_info_present_flag: u32,
        overscan_info_present_flag: u32,
        overscan_appropriate_flag: u32,
        video_signal_type_present_flag: u32,
        video_full_range_flag: u32,
        color_description_present_flag: u32,
        chroma_loc_info_present_flag: u32,
        timing_info_present_flag: u32,
        fixed_frame_rate_flag: u32,
        bitstream_restriction_flag: u32,
        nal_hrd_parameters_present_flag: u32,
        vcl_hrd_parameters_present_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let aspect_ratio_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(aspect_ratio_info_present_flag) };
            aspect_ratio_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let overscan_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(overscan_info_present_flag) };
            overscan_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let overscan_appropriate_flag: u32 =
                unsafe { ::std::mem::transmute(overscan_appropriate_flag) };
            overscan_appropriate_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let video_signal_type_present_flag: u32 =
                unsafe { ::std::mem::transmute(video_signal_type_present_flag) };
            video_signal_type_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let video_full_range_flag: u32 =
                unsafe { ::std::mem::transmute(video_full_range_flag) };
            video_full_range_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let color_description_present_flag: u32 =
                unsafe { ::std::mem::transmute(color_description_present_flag) };
            color_description_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let chroma_loc_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(chroma_loc_info_present_flag) };
            chroma_loc_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let timing_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(timing_info_present_flag) };
            timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fixed_frame_rate_flag: u32 =
                unsafe { ::std::mem::transmute(fixed_frame_rate_flag) };
            fixed_frame_rate_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bitstream_restriction_flag: u32 =
                unsafe { ::std::mem::transmute(bitstream_restriction_flag) };
            bitstream_restriction_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let nal_hrd_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(nal_hrd_parameters_present_flag) };
            nal_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let vcl_hrd_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(vcl_hrd_parameters_present_flag) };
            vcl_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH264HrdParameters {
    pub cpb_cnt_minus1: u8,
    pub bit_rate_scale: u8,
    pub cpb_size_scale: u8,
    pub reserved1: u8,
    pub bit_rate_value_minus1: [u32; 32usize],
    pub cpb_size_value_minus1: [u32; 32usize],
    pub cbr_flag: [u8; 32usize],
    pub initial_cpb_removal_delay_length_minus1: u32,
    pub cpb_removal_delay_length_minus1: u32,
    pub dpb_output_delay_length_minus1: u32,
    pub time_offset_length: u32,
}
#[test]
fn bindgen_test_layout_StdVideoH264HrdParameters() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH264HrdParameters> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH264HrdParameters>(),
        308usize,
        concat!("Size of: ", stringify!(StdVideoH264HrdParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH264HrdParameters>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH264HrdParameters))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpb_cnt_minus1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(cpb_cnt_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_rate_scale) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(bit_rate_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpb_size_scale) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(cpb_size_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_rate_value_minus1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(bit_rate_value_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpb_size_value_minus1) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(cpb_size_value_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbr_flag) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(cbr_flag)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).initial_cpb_removal_delay_length_minus1) as usize
                - ptr as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(initial_cpb_removal_delay_length_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cpb_removal_delay_length_minus1) as usize - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(cpb_removal_delay_length_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dpb_output_delay_length_minus1) as usize - ptr as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(dpb_output_delay_length_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_offset_length) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264HrdParameters),
            "::",
            stringify!(time_offset_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH264SequenceParameterSetVui {
    pub flags: StdVideoH264SpsVuiFlags,
    pub aspect_ratio_idc: StdVideoH264AspectRatioIdc,
    pub sar_width: u16,
    pub sar_height: u16,
    pub video_format: u8,
    pub colour_primaries: u8,
    pub transfer_characteristics: u8,
    pub matrix_coefficients: u8,
    pub num_units_in_tick: u32,
    pub time_scale: u32,
    pub max_num_reorder_frames: u8,
    pub max_dec_frame_buffering: u8,
    pub chroma_sample_loc_type_top_field: u8,
    pub chroma_sample_loc_type_bottom_field: u8,
    pub reserved1: u32,
    pub pHrdParameters: *const StdVideoH264HrdParameters,
}
#[test]
fn bindgen_test_layout_StdVideoH264SequenceParameterSetVui() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH264SequenceParameterSetVui> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH264SequenceParameterSetVui>(),
        40usize,
        concat!("Size of: ", stringify!(StdVideoH264SequenceParameterSetVui))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH264SequenceParameterSetVui>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoH264SequenceParameterSetVui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspect_ratio_idc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(aspect_ratio_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sar_width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(sar_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sar_height) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(sar_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).video_format) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(video_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colour_primaries) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(colour_primaries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transfer_characteristics) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(transfer_characteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matrix_coefficients) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(matrix_coefficients)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_units_in_tick) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(num_units_in_tick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_scale) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(time_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_num_reorder_frames) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(max_num_reorder_frames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_dec_frame_buffering) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(max_dec_frame_buffering)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chroma_sample_loc_type_top_field) as usize - ptr as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(chroma_sample_loc_type_top_field)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chroma_sample_loc_type_bottom_field) as usize - ptr as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(chroma_sample_loc_type_bottom_field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHrdParameters) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSetVui),
            "::",
            stringify!(pHrdParameters)
        )
    );
}
impl Default for StdVideoH264SequenceParameterSetVui {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH264SpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[test]
fn bindgen_test_layout_StdVideoH264SpsFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoH264SpsFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoH264SpsFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH264SpsFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH264SpsFlags))
    );
}
impl StdVideoH264SpsFlags {
    #[inline]
    pub fn constraint_set0_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set0_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn constraint_set1_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set1_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn constraint_set2_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set2_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn constraint_set3_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set3_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn constraint_set4_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set4_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn constraint_set5_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set5_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn direct_8x8_inference_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_8x8_inference_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mb_adaptive_frame_field_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_adaptive_frame_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_mbs_only_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_mbs_only_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_pic_order_always_zero_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_pic_order_always_zero_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn separate_colour_plane_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_separate_colour_plane_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gaps_in_frame_num_value_allowed_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gaps_in_frame_num_value_allowed_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn qpprime_y_zero_transform_bypass_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_qpprime_y_zero_transform_bypass_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_cropping_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_cropping_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seq_scaling_matrix_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seq_scaling_matrix_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vui_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        constraint_set0_flag: u32,
        constraint_set1_flag: u32,
        constraint_set2_flag: u32,
        constraint_set3_flag: u32,
        constraint_set4_flag: u32,
        constraint_set5_flag: u32,
        direct_8x8_inference_flag: u32,
        mb_adaptive_frame_field_flag: u32,
        frame_mbs_only_flag: u32,
        delta_pic_order_always_zero_flag: u32,
        separate_colour_plane_flag: u32,
        gaps_in_frame_num_value_allowed_flag: u32,
        qpprime_y_zero_transform_bypass_flag: u32,
        frame_cropping_flag: u32,
        seq_scaling_matrix_present_flag: u32,
        vui_parameters_present_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let constraint_set0_flag: u32 = unsafe { ::std::mem::transmute(constraint_set0_flag) };
            constraint_set0_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let constraint_set1_flag: u32 = unsafe { ::std::mem::transmute(constraint_set1_flag) };
            constraint_set1_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let constraint_set2_flag: u32 = unsafe { ::std::mem::transmute(constraint_set2_flag) };
            constraint_set2_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let constraint_set3_flag: u32 = unsafe { ::std::mem::transmute(constraint_set3_flag) };
            constraint_set3_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let constraint_set4_flag: u32 = unsafe { ::std::mem::transmute(constraint_set4_flag) };
            constraint_set4_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let constraint_set5_flag: u32 = unsafe { ::std::mem::transmute(constraint_set5_flag) };
            constraint_set5_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let direct_8x8_inference_flag: u32 =
                unsafe { ::std::mem::transmute(direct_8x8_inference_flag) };
            direct_8x8_inference_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let mb_adaptive_frame_field_flag: u32 =
                unsafe { ::std::mem::transmute(mb_adaptive_frame_field_flag) };
            mb_adaptive_frame_field_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let frame_mbs_only_flag: u32 = unsafe { ::std::mem::transmute(frame_mbs_only_flag) };
            frame_mbs_only_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let delta_pic_order_always_zero_flag: u32 =
                unsafe { ::std::mem::transmute(delta_pic_order_always_zero_flag) };
            delta_pic_order_always_zero_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let separate_colour_plane_flag: u32 =
                unsafe { ::std::mem::transmute(separate_colour_plane_flag) };
            separate_colour_plane_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let gaps_in_frame_num_value_allowed_flag: u32 =
                unsafe { ::std::mem::transmute(gaps_in_frame_num_value_allowed_flag) };
            gaps_in_frame_num_value_allowed_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let qpprime_y_zero_transform_bypass_flag: u32 =
                unsafe { ::std::mem::transmute(qpprime_y_zero_transform_bypass_flag) };
            qpprime_y_zero_transform_bypass_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let frame_cropping_flag: u32 = unsafe { ::std::mem::transmute(frame_cropping_flag) };
            frame_cropping_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let seq_scaling_matrix_present_flag: u32 =
                unsafe { ::std::mem::transmute(seq_scaling_matrix_present_flag) };
            seq_scaling_matrix_present_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let vui_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(vui_parameters_present_flag) };
            vui_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH264ScalingLists {
    pub scaling_list_present_mask: u16,
    pub use_default_scaling_matrix_mask: u16,
    pub ScalingList4x4: [[u8; 16usize]; 6usize],
    pub ScalingList8x8: [[u8; 64usize]; 6usize],
}
#[test]
fn bindgen_test_layout_StdVideoH264ScalingLists() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH264ScalingLists> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH264ScalingLists>(),
        484usize,
        concat!("Size of: ", stringify!(StdVideoH264ScalingLists))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH264ScalingLists>(),
        2usize,
        concat!("Alignment of ", stringify!(StdVideoH264ScalingLists))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scaling_list_present_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264ScalingLists),
            "::",
            stringify!(scaling_list_present_mask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).use_default_scaling_matrix_mask) as usize - ptr as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264ScalingLists),
            "::",
            stringify!(use_default_scaling_matrix_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScalingList4x4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264ScalingLists),
            "::",
            stringify!(ScalingList4x4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScalingList8x8) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264ScalingLists),
            "::",
            stringify!(ScalingList8x8)
        )
    );
}
impl Default for StdVideoH264ScalingLists {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH264SequenceParameterSet {
    pub flags: StdVideoH264SpsFlags,
    pub profile_idc: StdVideoH264ProfileIdc,
    pub level_idc: StdVideoH264LevelIdc,
    pub chroma_format_idc: StdVideoH264ChromaFormatIdc,
    pub seq_parameter_set_id: u8,
    pub bit_depth_luma_minus8: u8,
    pub bit_depth_chroma_minus8: u8,
    pub log2_max_frame_num_minus4: u8,
    pub pic_order_cnt_type: StdVideoH264PocType,
    pub offset_for_non_ref_pic: i32,
    pub offset_for_top_to_bottom_field: i32,
    pub log2_max_pic_order_cnt_lsb_minus4: u8,
    pub num_ref_frames_in_pic_order_cnt_cycle: u8,
    pub max_num_ref_frames: u8,
    pub reserved1: u8,
    pub pic_width_in_mbs_minus1: u32,
    pub pic_height_in_map_units_minus1: u32,
    pub frame_crop_left_offset: u32,
    pub frame_crop_right_offset: u32,
    pub frame_crop_top_offset: u32,
    pub frame_crop_bottom_offset: u32,
    pub reserved2: u32,
    pub pOffsetForRefFrame: *const i32,
    pub pScalingLists: *const StdVideoH264ScalingLists,
    pub pSequenceParameterSetVui: *const StdVideoH264SequenceParameterSetVui,
}
#[test]
fn bindgen_test_layout_StdVideoH264SequenceParameterSet() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH264SequenceParameterSet> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH264SequenceParameterSet>(),
        88usize,
        concat!("Size of: ", stringify!(StdVideoH264SequenceParameterSet))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH264SequenceParameterSet>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoH264SequenceParameterSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile_idc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(profile_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level_idc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(level_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_format_idc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(chroma_format_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_parameter_set_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(seq_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_depth_luma_minus8) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(bit_depth_luma_minus8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_depth_chroma_minus8) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(bit_depth_chroma_minus8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log2_max_frame_num_minus4) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(log2_max_frame_num_minus4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_order_cnt_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(pic_order_cnt_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset_for_non_ref_pic) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(offset_for_non_ref_pic)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).offset_for_top_to_bottom_field) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(offset_for_top_to_bottom_field)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_max_pic_order_cnt_lsb_minus4) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(log2_max_pic_order_cnt_lsb_minus4)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ref_frames_in_pic_order_cnt_cycle) as usize
                - ptr as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(num_ref_frames_in_pic_order_cnt_cycle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_num_ref_frames) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(max_num_ref_frames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_width_in_mbs_minus1) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(pic_width_in_mbs_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pic_height_in_map_units_minus1) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(pic_height_in_map_units_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_crop_left_offset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(frame_crop_left_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_crop_right_offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(frame_crop_right_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_crop_top_offset) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(frame_crop_top_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_crop_bottom_offset) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(frame_crop_bottom_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pOffsetForRefFrame) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(pOffsetForRefFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pScalingLists) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(pScalingLists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSequenceParameterSetVui) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264SequenceParameterSet),
            "::",
            stringify!(pSequenceParameterSetVui)
        )
    );
}
impl Default for StdVideoH264SequenceParameterSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH264PpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_StdVideoH264PpsFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoH264PpsFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoH264PpsFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH264PpsFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH264PpsFlags))
    );
}
impl StdVideoH264PpsFlags {
    #[inline]
    pub fn transform_8x8_mode_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_8x8_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn redundant_pic_cnt_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_redundant_pic_cnt_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn constrained_intra_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deblocking_filter_control_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_control_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bottom_field_pic_order_in_frame_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bottom_field_pic_order_in_frame_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn entropy_coding_mode_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entropy_coding_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pic_scaling_matrix_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pic_scaling_matrix_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        transform_8x8_mode_flag: u32,
        redundant_pic_cnt_present_flag: u32,
        constrained_intra_pred_flag: u32,
        deblocking_filter_control_present_flag: u32,
        weighted_pred_flag: u32,
        bottom_field_pic_order_in_frame_present_flag: u32,
        entropy_coding_mode_flag: u32,
        pic_scaling_matrix_present_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let transform_8x8_mode_flag: u32 =
                unsafe { ::std::mem::transmute(transform_8x8_mode_flag) };
            transform_8x8_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let redundant_pic_cnt_present_flag: u32 =
                unsafe { ::std::mem::transmute(redundant_pic_cnt_present_flag) };
            redundant_pic_cnt_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let constrained_intra_pred_flag: u32 =
                unsafe { ::std::mem::transmute(constrained_intra_pred_flag) };
            constrained_intra_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let deblocking_filter_control_present_flag: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_control_present_flag) };
            deblocking_filter_control_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let weighted_pred_flag: u32 = unsafe { ::std::mem::transmute(weighted_pred_flag) };
            weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bottom_field_pic_order_in_frame_present_flag: u32 =
                unsafe { ::std::mem::transmute(bottom_field_pic_order_in_frame_present_flag) };
            bottom_field_pic_order_in_frame_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let entropy_coding_mode_flag: u32 =
                unsafe { ::std::mem::transmute(entropy_coding_mode_flag) };
            entropy_coding_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pic_scaling_matrix_present_flag: u32 =
                unsafe { ::std::mem::transmute(pic_scaling_matrix_present_flag) };
            pic_scaling_matrix_present_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH264PictureParameterSet {
    pub flags: StdVideoH264PpsFlags,
    pub seq_parameter_set_id: u8,
    pub pic_parameter_set_id: u8,
    pub num_ref_idx_l0_default_active_minus1: u8,
    pub num_ref_idx_l1_default_active_minus1: u8,
    pub weighted_bipred_idc: StdVideoH264WeightedBipredIdc,
    pub pic_init_qp_minus26: i8,
    pub pic_init_qs_minus26: i8,
    pub chroma_qp_index_offset: i8,
    pub second_chroma_qp_index_offset: i8,
    pub pScalingLists: *const StdVideoH264ScalingLists,
}
#[test]
fn bindgen_test_layout_StdVideoH264PictureParameterSet() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH264PictureParameterSet> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH264PictureParameterSet>(),
        24usize,
        concat!("Size of: ", stringify!(StdVideoH264PictureParameterSet))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH264PictureParameterSet>(),
        8usize,
        concat!("Alignment of ", stringify!(StdVideoH264PictureParameterSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_parameter_set_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(seq_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_parameter_set_id) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(pic_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ref_idx_l0_default_active_minus1) as usize
                - ptr as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(num_ref_idx_l0_default_active_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ref_idx_l1_default_active_minus1) as usize
                - ptr as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(num_ref_idx_l1_default_active_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weighted_bipred_idc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(weighted_bipred_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_init_qp_minus26) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(pic_init_qp_minus26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_init_qs_minus26) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(pic_init_qs_minus26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_qp_index_offset) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(chroma_qp_index_offset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).second_chroma_qp_index_offset) as usize - ptr as usize
        },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(second_chroma_qp_index_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pScalingLists) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH264PictureParameterSet),
            "::",
            stringify!(pScalingLists)
        )
    );
}
impl Default for StdVideoH264PictureParameterSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl StdVideoDecodeH264FieldOrderCount {
    pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM: StdVideoDecodeH264FieldOrderCount =
        StdVideoDecodeH264FieldOrderCount::STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoDecodeH264FieldOrderCount {
    STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP = 0,
    STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM = 1,
    STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID = 2147483647,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoDecodeH264PictureInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_StdVideoDecodeH264PictureInfoFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoDecodeH264PictureInfoFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoDecodeH264PictureInfoFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoDecodeH264PictureInfoFlags>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoDecodeH264PictureInfoFlags)
        )
    );
}
impl StdVideoDecodeH264PictureInfoFlags {
    #[inline]
    pub fn field_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IdrPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IdrPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bottom_field_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bottom_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn complementary_field_pair(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_complementary_field_pair(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        field_pic_flag: u32,
        is_intra: u32,
        IdrPicFlag: u32,
        bottom_field_flag: u32,
        is_reference: u32,
        complementary_field_pair: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let field_pic_flag: u32 = unsafe { ::std::mem::transmute(field_pic_flag) };
            field_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_intra: u32 = unsafe { ::std::mem::transmute(is_intra) };
            is_intra as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IdrPicFlag: u32 = unsafe { ::std::mem::transmute(IdrPicFlag) };
            IdrPicFlag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bottom_field_flag: u32 = unsafe { ::std::mem::transmute(bottom_field_flag) };
            bottom_field_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_reference: u32 = unsafe { ::std::mem::transmute(is_reference) };
            is_reference as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let complementary_field_pair: u32 =
                unsafe { ::std::mem::transmute(complementary_field_pair) };
            complementary_field_pair as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoDecodeH264PictureInfo {
    pub flags: StdVideoDecodeH264PictureInfoFlags,
    pub seq_parameter_set_id: u8,
    pub pic_parameter_set_id: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub frame_num: u16,
    pub idr_pic_id: u16,
    pub PicOrderCnt: [i32; 2usize],
}
#[test]
fn bindgen_test_layout_StdVideoDecodeH264PictureInfo() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoDecodeH264PictureInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoDecodeH264PictureInfo>(),
        20usize,
        concat!("Size of: ", stringify!(StdVideoDecodeH264PictureInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoDecodeH264PictureInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoDecodeH264PictureInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264PictureInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_parameter_set_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264PictureInfo),
            "::",
            stringify!(seq_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_parameter_set_id) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264PictureInfo),
            "::",
            stringify!(pic_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264PictureInfo),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264PictureInfo),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264PictureInfo),
            "::",
            stringify!(frame_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idr_pic_id) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264PictureInfo),
            "::",
            stringify!(idr_pic_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PicOrderCnt) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264PictureInfo),
            "::",
            stringify!(PicOrderCnt)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoDecodeH264ReferenceInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_StdVideoDecodeH264ReferenceInfoFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoDecodeH264ReferenceInfoFlags>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(StdVideoDecodeH264ReferenceInfoFlags)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoDecodeH264ReferenceInfoFlags>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoDecodeH264ReferenceInfoFlags)
        )
    );
}
impl StdVideoDecodeH264ReferenceInfoFlags {
    #[inline]
    pub fn top_field_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_top_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bottom_field_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bottom_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_non_existing(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_non_existing(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        top_field_flag: u32,
        bottom_field_flag: u32,
        used_for_long_term_reference: u32,
        is_non_existing: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let top_field_flag: u32 = unsafe { ::std::mem::transmute(top_field_flag) };
            top_field_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bottom_field_flag: u32 = unsafe { ::std::mem::transmute(bottom_field_flag) };
            bottom_field_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::std::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_non_existing: u32 = unsafe { ::std::mem::transmute(is_non_existing) };
            is_non_existing as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoDecodeH264ReferenceInfo {
    pub flags: StdVideoDecodeH264ReferenceInfoFlags,
    pub FrameNum: u16,
    pub reserved: u16,
    pub PicOrderCnt: [i32; 2usize],
}
#[test]
fn bindgen_test_layout_StdVideoDecodeH264ReferenceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoDecodeH264ReferenceInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoDecodeH264ReferenceInfo>(),
        16usize,
        concat!("Size of: ", stringify!(StdVideoDecodeH264ReferenceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoDecodeH264ReferenceInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoDecodeH264ReferenceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264ReferenceInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameNum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264ReferenceInfo),
            "::",
            stringify!(FrameNum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264ReferenceInfo),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PicOrderCnt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH264ReferenceInfo),
            "::",
            stringify!(PicOrderCnt)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkVideoDecodeH264PictureLayoutFlagBitsKHR {
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0,
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 1,
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 2,
    VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkVideoDecodeH264PictureLayoutFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH264ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdProfileIdc: StdVideoH264ProfileIdc,
    pub pictureLayout: VkVideoDecodeH264PictureLayoutFlagBitsKHR,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH264ProfileInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH264ProfileInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH264ProfileInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkVideoDecodeH264ProfileInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH264ProfileInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoDecodeH264ProfileInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264ProfileInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264ProfileInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdProfileIdc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264ProfileInfoKHR),
            "::",
            stringify!(stdProfileIdc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pictureLayout) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264ProfileInfoKHR),
            "::",
            stringify!(pictureLayout)
        )
    );
}
impl Default for VkVideoDecodeH264ProfileInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH264CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxLevelIdc: StdVideoH264LevelIdc,
    pub fieldOffsetGranularity: VkOffset2D,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH264CapabilitiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH264CapabilitiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH264CapabilitiesKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkVideoDecodeH264CapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH264CapabilitiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVideoDecodeH264CapabilitiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264CapabilitiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264CapabilitiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxLevelIdc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264CapabilitiesKHR),
            "::",
            stringify!(maxLevelIdc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fieldOffsetGranularity) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264CapabilitiesKHR),
            "::",
            stringify!(fieldOffsetGranularity)
        )
    );
}
impl Default for VkVideoDecodeH264CapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH264SessionParametersAddInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdSPSCount: u32,
    pub pStdSPSs: *const StdVideoH264SequenceParameterSet,
    pub stdPPSCount: u32,
    pub pStdPPSs: *const StdVideoH264PictureParameterSet,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH264SessionParametersAddInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH264SessionParametersAddInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH264SessionParametersAddInfoKHR>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkVideoDecodeH264SessionParametersAddInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH264SessionParametersAddInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVideoDecodeH264SessionParametersAddInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersAddInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersAddInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdSPSCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersAddInfoKHR),
            "::",
            stringify!(stdSPSCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStdSPSs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersAddInfoKHR),
            "::",
            stringify!(pStdSPSs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdPPSCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersAddInfoKHR),
            "::",
            stringify!(stdPPSCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStdPPSs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersAddInfoKHR),
            "::",
            stringify!(pStdPPSs)
        )
    );
}
impl Default for VkVideoDecodeH264SessionParametersAddInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH264SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxStdSPSCount: u32,
    pub maxStdPPSCount: u32,
    pub pParametersAddInfo: *const VkVideoDecodeH264SessionParametersAddInfoKHR,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH264SessionParametersCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH264SessionParametersCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH264SessionParametersCreateInfoKHR>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkVideoDecodeH264SessionParametersCreateInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH264SessionParametersCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVideoDecodeH264SessionParametersCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxStdSPSCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersCreateInfoKHR),
            "::",
            stringify!(maxStdSPSCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxStdPPSCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersCreateInfoKHR),
            "::",
            stringify!(maxStdPPSCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pParametersAddInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264SessionParametersCreateInfoKHR),
            "::",
            stringify!(pParametersAddInfo)
        )
    );
}
impl Default for VkVideoDecodeH264SessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH264PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdPictureInfo: *const StdVideoDecodeH264PictureInfo,
    pub sliceCount: u32,
    pub pSliceOffsets: *const u32,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH264PictureInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH264PictureInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH264PictureInfoKHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkVideoDecodeH264PictureInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH264PictureInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoDecodeH264PictureInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264PictureInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264PictureInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStdPictureInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264PictureInfoKHR),
            "::",
            stringify!(pStdPictureInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sliceCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264PictureInfoKHR),
            "::",
            stringify!(sliceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSliceOffsets) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264PictureInfoKHR),
            "::",
            stringify!(pSliceOffsets)
        )
    );
}
impl Default for VkVideoDecodeH264PictureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH264DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdReferenceInfo: *const StdVideoDecodeH264ReferenceInfo,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH264DpbSlotInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH264DpbSlotInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH264DpbSlotInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkVideoDecodeH264DpbSlotInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH264DpbSlotInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoDecodeH264DpbSlotInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264DpbSlotInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264DpbSlotInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStdReferenceInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH264DpbSlotInfoKHR),
            "::",
            stringify!(pStdReferenceInfo)
        )
    );
}
impl Default for VkVideoDecodeH264DpbSlotInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkRenderingFlagsKHR = VkRenderingFlags;
pub use self::VkRenderingFlagBits as VkRenderingFlagBitsKHR;
pub type VkRenderingInfoKHR = VkRenderingInfo;
pub type VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo;
pub type VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo;
pub type VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures;
pub type VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderingFragmentShadingRateAttachmentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
    pub shadingRateAttachmentTexelSize: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkRenderingFragmentShadingRateAttachmentInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderingFragmentShadingRateAttachmentInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderingFragmentShadingRateAttachmentInfoKHR>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkRenderingFragmentShadingRateAttachmentInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderingFragmentShadingRateAttachmentInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderingFragmentShadingRateAttachmentInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingFragmentShadingRateAttachmentInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingFragmentShadingRateAttachmentInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageView) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingFragmentShadingRateAttachmentInfoKHR),
            "::",
            stringify!(imageView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageLayout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingFragmentShadingRateAttachmentInfoKHR),
            "::",
            stringify!(imageLayout)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shadingRateAttachmentTexelSize) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingFragmentShadingRateAttachmentInfoKHR),
            "::",
            stringify!(shadingRateAttachmentTexelSize)
        )
    );
}
impl Default for VkRenderingFragmentShadingRateAttachmentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderingFragmentDensityMapAttachmentInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
}
#[test]
fn bindgen_test_layout_VkRenderingFragmentDensityMapAttachmentInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderingFragmentDensityMapAttachmentInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderingFragmentDensityMapAttachmentInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkRenderingFragmentDensityMapAttachmentInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderingFragmentDensityMapAttachmentInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderingFragmentDensityMapAttachmentInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingFragmentDensityMapAttachmentInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingFragmentDensityMapAttachmentInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageView) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingFragmentDensityMapAttachmentInfoEXT),
            "::",
            stringify!(imageView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageLayout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderingFragmentDensityMapAttachmentInfoEXT),
            "::",
            stringify!(imageLayout)
        )
    );
}
impl Default for VkRenderingFragmentDensityMapAttachmentInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAttachmentSampleCountInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentSamples: *const VkSampleCountFlagBits,
    pub depthStencilAttachmentSamples: VkSampleCountFlagBits,
}
#[test]
fn bindgen_test_layout_VkAttachmentSampleCountInfoAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkAttachmentSampleCountInfoAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentSampleCountInfoAMD>(),
        40usize,
        concat!("Size of: ", stringify!(VkAttachmentSampleCountInfoAMD))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentSampleCountInfoAMD>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAttachmentSampleCountInfoAMD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentSampleCountInfoAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentSampleCountInfoAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorAttachmentCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentSampleCountInfoAMD),
            "::",
            stringify!(colorAttachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pColorAttachmentSamples) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentSampleCountInfoAMD),
            "::",
            stringify!(pColorAttachmentSamples)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).depthStencilAttachmentSamples) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentSampleCountInfoAMD),
            "::",
            stringify!(depthStencilAttachmentSamples)
        )
    );
}
impl Default for VkAttachmentSampleCountInfoAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMultiviewPerViewAttributesInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub perViewAttributes: VkBool32,
    pub perViewAttributesPositionXOnly: VkBool32,
}
#[test]
fn bindgen_test_layout_VkMultiviewPerViewAttributesInfoNVX() {
    const UNINIT: ::std::mem::MaybeUninit<VkMultiviewPerViewAttributesInfoNVX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMultiviewPerViewAttributesInfoNVX>(),
        24usize,
        concat!("Size of: ", stringify!(VkMultiviewPerViewAttributesInfoNVX))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMultiviewPerViewAttributesInfoNVX>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkMultiviewPerViewAttributesInfoNVX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiviewPerViewAttributesInfoNVX),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiviewPerViewAttributesInfoNVX),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perViewAttributes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiviewPerViewAttributesInfoNVX),
            "::",
            stringify!(perViewAttributes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).perViewAttributesPositionXOnly) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiviewPerViewAttributesInfoNVX),
            "::",
            stringify!(perViewAttributesPositionXOnly)
        )
    );
}
impl Default for VkMultiviewPerViewAttributesInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdBeginRenderingKHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pRenderingInfo: *const VkRenderingInfo),
>;
pub type PFN_vkCmdEndRenderingKHR =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
extern "system" {
    pub fn vkCmdBeginRenderingKHR(
        commandBuffer: VkCommandBuffer,
        pRenderingInfo: *const VkRenderingInfo,
    );
}
extern "system" {
    pub fn vkCmdEndRenderingKHR(commandBuffer: VkCommandBuffer);
}
pub type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;
pub type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;
pub type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;
pub type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;
pub type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;
pub type VkFormatProperties2KHR = VkFormatProperties2;
pub type VkImageFormatProperties2KHR = VkImageFormatProperties2;
pub type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;
pub type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;
pub type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;
pub type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;
pub type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;
pub type PFN_vkGetPhysicalDeviceFeatures2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceFeatures2KHR(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceFormatProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceImageFormatProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceMemoryProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    );
}
pub type VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub use self::VkPeerMemoryFeatureFlagBits as VkPeerMemoryFeatureFlagBitsKHR;
pub type VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub use self::VkMemoryAllocateFlagBits as VkMemoryAllocateFlagBitsKHR;
pub type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;
pub type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;
pub type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;
pub type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;
pub type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;
pub type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;
pub type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;
pub type PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    ),
>;
pub type PFN_vkCmdSetDeviceMaskKHR =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, deviceMask: u32)>;
pub type PFN_vkCmdDispatchBaseKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
extern "system" {
    pub fn vkGetDeviceGroupPeerMemoryFeaturesKHR(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    );
}
extern "system" {
    pub fn vkCmdSetDeviceMaskKHR(commandBuffer: VkCommandBuffer, deviceMask: u32);
}
extern "system" {
    pub fn vkCmdDispatchBaseKHR(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
pub type VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub type PFN_vkTrimCommandPoolKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    ),
>;
extern "system" {
    pub fn vkTrimCommandPoolKHR(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    );
}
pub type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;
pub type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;
pub type PFN_vkEnumeratePhysicalDeviceGroupsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkEnumeratePhysicalDeviceGroupsKHR(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult;
}
pub type VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub use self::VkExternalMemoryHandleTypeFlagBits as VkExternalMemoryHandleTypeFlagBitsKHR;
pub type VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub use self::VkExternalMemoryFeatureFlagBits as VkExternalMemoryFeatureFlagBitsKHR;
pub type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;
pub type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
pub type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;
pub type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;
pub type VkExternalBufferPropertiesKHR = VkExternalBufferProperties;
pub type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;
pub type PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceExternalBufferPropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    );
}
pub type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;
pub type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;
pub type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImportMemoryFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_VkImportMemoryFdInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkImportMemoryFdInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImportMemoryFdInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkImportMemoryFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImportMemoryFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImportMemoryFdInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryFdInfoKHR),
            "::",
            stringify!(fd)
        )
    );
}
impl Default for VkImportMemoryFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryFdPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryTypeBits: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryFdPropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryFdPropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryFdPropertiesKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryFdPropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryFdPropertiesKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryFdPropertiesKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryFdPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryFdPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryTypeBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryFdPropertiesKHR),
            "::",
            stringify!(memoryTypeBits)
        )
    );
}
impl Default for VkMemoryFdPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkMemoryGetFdInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryGetFdInfoKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryGetFdInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkMemoryGetFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryGetFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryGetFdInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetFdInfoKHR),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkMemoryGetFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetMemoryFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pGetFdInfo: *const VkMemoryGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult,
>;
pub type PFN_vkGetMemoryFdPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        fd: ::std::os::raw::c_int,
        pMemoryFdProperties: *mut VkMemoryFdPropertiesKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetMemoryFdKHR(
        device: VkDevice,
        pGetFdInfo: *const VkMemoryGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetMemoryFdPropertiesKHR(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        fd: ::std::os::raw::c_int,
        pMemoryFdProperties: *mut VkMemoryFdPropertiesKHR,
    ) -> VkResult;
}
pub type VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub use self::VkExternalSemaphoreHandleTypeFlagBits as VkExternalSemaphoreHandleTypeFlagBitsKHR;
pub type VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub use self::VkExternalSemaphoreFeatureFlagBits as VkExternalSemaphoreFeatureFlagBitsKHR;
pub type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
pub type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;
pub type PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    );
}
pub type VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub use self::VkSemaphoreImportFlagBits as VkSemaphoreImportFlagBitsKHR;
pub type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImportSemaphoreFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub flags: VkSemaphoreImportFlags,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_VkImportSemaphoreFdInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkImportSemaphoreFdInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImportSemaphoreFdInfoKHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkImportSemaphoreFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImportSemaphoreFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImportSemaphoreFdInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semaphore) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(semaphore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportSemaphoreFdInfoKHR),
            "::",
            stringify!(fd)
        )
    );
}
impl Default for VkImportSemaphoreFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSemaphoreGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkSemaphoreGetFdInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkSemaphoreGetFdInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSemaphoreGetFdInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkSemaphoreGetFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSemaphoreGetFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSemaphoreGetFdInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreGetFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreGetFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).semaphore) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreGetFdInfoKHR),
            "::",
            stringify!(semaphore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSemaphoreGetFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkSemaphoreGetFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkImportSemaphoreFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pImportSemaphoreFdInfo: *const VkImportSemaphoreFdInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetSemaphoreFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pGetFdInfo: *const VkSemaphoreGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkImportSemaphoreFdKHR(
        device: VkDevice,
        pImportSemaphoreFdInfo: *const VkImportSemaphoreFdInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetSemaphoreFdKHR(
        device: VkDevice,
        pGetFdInfo: *const VkSemaphoreGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePushDescriptorPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxPushDescriptors: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePushDescriptorPropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePushDescriptorPropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePushDescriptorPropertiesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePushDescriptorPropertiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePushDescriptorPropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePushDescriptorPropertiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePushDescriptorPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePushDescriptorPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPushDescriptors) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePushDescriptorPropertiesKHR),
            "::",
            stringify!(maxPushDescriptors)
        )
    );
}
impl Default for VkPhysicalDevicePushDescriptorPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdPushDescriptorSetKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::std::os::raw::c_void,
    ),
>;
extern "system" {
    pub fn vkCmdPushDescriptorSetKHR(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    );
}
extern "system" {
    pub fn vkCmdPushDescriptorSetWithTemplateKHR(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::std::os::raw::c_void,
    );
}
pub type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRectLayerKHR {
    pub offset: VkOffset2D,
    pub extent: VkExtent2D,
    pub layer: u32,
}
#[test]
fn bindgen_test_layout_VkRectLayerKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkRectLayerKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRectLayerKHR>(),
        20usize,
        concat!("Size of: ", stringify!(VkRectLayerKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRectLayerKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkRectLayerKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRectLayerKHR),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRectLayerKHR),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRectLayerKHR),
            "::",
            stringify!(layer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPresentRegionKHR {
    pub rectangleCount: u32,
    pub pRectangles: *const VkRectLayerKHR,
}
#[test]
fn bindgen_test_layout_VkPresentRegionKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPresentRegionKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPresentRegionKHR>(),
        16usize,
        concat!("Size of: ", stringify!(VkPresentRegionKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentRegionKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentRegionKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rectangleCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionKHR),
            "::",
            stringify!(rectangleCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRectangles) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionKHR),
            "::",
            stringify!(pRectangles)
        )
    );
}
impl Default for VkPresentRegionKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPresentRegionsKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pRegions: *const VkPresentRegionKHR,
}
#[test]
fn bindgen_test_layout_VkPresentRegionsKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPresentRegionsKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPresentRegionsKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkPresentRegionsKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentRegionsKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentRegionsKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionsKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionsKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchainCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionsKHR),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRegions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentRegionsKHR),
            "::",
            stringify!(pRegions)
        )
    );
}
impl Default for VkPresentRegionsKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
pub use self::VkDescriptorUpdateTemplateType as VkDescriptorUpdateTemplateTypeKHR;
pub type VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;
pub type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;
pub type PFN_vkCreateDescriptorUpdateTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorUpdateTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateDescriptorSetWithTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    ),
>;
extern "system" {
    pub fn vkCreateDescriptorUpdateTemplateKHR(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDescriptorUpdateTemplateKHR(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkUpdateDescriptorSetWithTemplateKHR(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    );
}
pub type VkPhysicalDeviceImagelessFramebufferFeaturesKHR =
    VkPhysicalDeviceImagelessFramebufferFeatures;
pub type VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;
pub type VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;
pub type VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;
pub type VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;
pub type VkAttachmentDescription2KHR = VkAttachmentDescription2;
pub type VkAttachmentReference2KHR = VkAttachmentReference2;
pub type VkSubpassDescription2KHR = VkSubpassDescription2;
pub type VkSubpassDependency2KHR = VkSubpassDependency2;
pub type VkSubpassBeginInfoKHR = VkSubpassBeginInfo;
pub type VkSubpassEndInfoKHR = VkSubpassEndInfo;
pub type PFN_vkCreateRenderPass2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkCmdBeginRenderPass2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    ),
>;
pub type PFN_vkCmdNextSubpass2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    ),
>;
pub type PFN_vkCmdEndRenderPass2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pSubpassEndInfo: *const VkSubpassEndInfo),
>;
extern "system" {
    pub fn vkCreateRenderPass2KHR(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdBeginRenderPass2KHR(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    );
}
extern "system" {
    pub fn vkCmdNextSubpass2KHR(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
extern "system" {
    pub fn vkCmdEndRenderPass2KHR(
        commandBuffer: VkCommandBuffer,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSharedPresentSurfaceCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub sharedPresentSupportedUsageFlags: VkImageUsageFlags,
}
#[test]
fn bindgen_test_layout_VkSharedPresentSurfaceCapabilitiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkSharedPresentSurfaceCapabilitiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSharedPresentSurfaceCapabilitiesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkSharedPresentSurfaceCapabilitiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSharedPresentSurfaceCapabilitiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSharedPresentSurfaceCapabilitiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSharedPresentSurfaceCapabilitiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSharedPresentSurfaceCapabilitiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sharedPresentSupportedUsageFlags) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSharedPresentSurfaceCapabilitiesKHR),
            "::",
            stringify!(sharedPresentSupportedUsageFlags)
        )
    );
}
impl Default for VkSharedPresentSurfaceCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetSwapchainStatusKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult,
>;
extern "system" {
    pub fn vkGetSwapchainStatusKHR(device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult;
}
pub type VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub use self::VkExternalFenceHandleTypeFlagBits as VkExternalFenceHandleTypeFlagBitsKHR;
pub type VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub use self::VkExternalFenceFeatureFlagBits as VkExternalFenceFeatureFlagBitsKHR;
pub type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
pub type VkExternalFencePropertiesKHR = VkExternalFenceProperties;
pub type PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceExternalFencePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    );
}
pub type VkFenceImportFlagsKHR = VkFenceImportFlags;
pub use self::VkFenceImportFlagBits as VkFenceImportFlagBitsKHR;
pub type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImportFenceFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fence: VkFence,
    pub flags: VkFenceImportFlags,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_VkImportFenceFdInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkImportFenceFdInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImportFenceFdInfoKHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkImportFenceFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImportFenceFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImportFenceFdInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportFenceFdInfoKHR),
            "::",
            stringify!(fd)
        )
    );
}
impl Default for VkImportFenceFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFenceGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fence: VkFence,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkFenceGetFdInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkFenceGetFdInfoKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFenceGetFdInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkFenceGetFdInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkFenceGetFdInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkFenceGetFdInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceGetFdInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceGetFdInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceGetFdInfoKHR),
            "::",
            stringify!(fence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFenceGetFdInfoKHR),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkFenceGetFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkImportFenceFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pImportFenceFdInfo: *const VkImportFenceFdInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetFenceFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pGetFdInfo: *const VkFenceGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkImportFenceFdKHR(
        device: VkDevice,
        pImportFenceFdInfo: *const VkImportFenceFdInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetFenceFdKHR(
        device: VkDevice,
        pGetFdInfo: *const VkFenceGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPerformanceCounterUnitKHR {
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
    VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 2147483647,
}
impl VkPerformanceCounterScopeKHR {
    pub const VK_QUERY_SCOPE_COMMAND_BUFFER_KHR: VkPerformanceCounterScopeKHR =
        VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR;
}
impl VkPerformanceCounterScopeKHR {
    pub const VK_QUERY_SCOPE_RENDER_PASS_KHR: VkPerformanceCounterScopeKHR =
        VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR;
}
impl VkPerformanceCounterScopeKHR {
    pub const VK_QUERY_SCOPE_COMMAND_KHR: VkPerformanceCounterScopeKHR =
        VkPerformanceCounterScopeKHR::VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPerformanceCounterScopeKHR {
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
    VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPerformanceCounterStorageKHR {
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
    VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 2147483647,
}
impl VkPerformanceCounterDescriptionFlagBitsKHR {
    pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = VkPerformanceCounterDescriptionFlagBitsKHR :: VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR ;
}
impl VkPerformanceCounterDescriptionFlagBitsKHR {
    pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = VkPerformanceCounterDescriptionFlagBitsKHR :: VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR ;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPerformanceCounterDescriptionFlagBitsKHR {
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAcquireProfilingLockFlagBitsKHR {
    VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkAcquireProfilingLockFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub performanceCounterQueryPools: VkBool32,
    pub performanceCounterMultipleQueryPools: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePerformanceQueryFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePerformanceQueryFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePerformanceQueryFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePerformanceQueryFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).performanceCounterQueryPools) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR),
            "::",
            stringify!(performanceCounterQueryPools)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).performanceCounterMultipleQueryPools) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryFeaturesKHR),
            "::",
            stringify!(performanceCounterMultipleQueryPools)
        )
    );
}
impl Default for VkPhysicalDevicePerformanceQueryFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub allowCommandBufferQueryCopies: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePerformanceQueryPropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePerformanceQueryPropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePerformanceQueryPropertiesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePerformanceQueryPropertiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePerformanceQueryPropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePerformanceQueryPropertiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).allowCommandBufferQueryCopies) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePerformanceQueryPropertiesKHR),
            "::",
            stringify!(allowCommandBufferQueryCopies)
        )
    );
}
impl Default for VkPhysicalDevicePerformanceQueryPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPerformanceCounterKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub unit: VkPerformanceCounterUnitKHR,
    pub scope: VkPerformanceCounterScopeKHR,
    pub storage: VkPerformanceCounterStorageKHR,
    pub uuid: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_VkPerformanceCounterKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPerformanceCounterKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceCounterKHR>(),
        48usize,
        concat!("Size of: ", stringify!(VkPerformanceCounterKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceCounterKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceCounterKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(storage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterKHR),
            "::",
            stringify!(uuid)
        )
    );
}
impl Default for VkPerformanceCounterKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPerformanceCounterDescriptionKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkPerformanceCounterDescriptionFlagsKHR,
    pub name: [::std::os::raw::c_char; 256usize],
    pub category: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_VkPerformanceCounterDescriptionKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPerformanceCounterDescriptionKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceCounterDescriptionKHR>(),
        792usize,
        concat!("Size of: ", stringify!(VkPerformanceCounterDescriptionKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceCounterDescriptionKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPerformanceCounterDescriptionKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).category) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(category)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterDescriptionKHR),
            "::",
            stringify!(description)
        )
    );
}
impl Default for VkPerformanceCounterDescriptionKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueryPoolPerformanceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub queueFamilyIndex: u32,
    pub counterIndexCount: u32,
    pub pCounterIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkQueryPoolPerformanceCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueryPoolPerformanceCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueryPoolPerformanceCreateInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkQueryPoolPerformanceCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueryPoolPerformanceCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR),
            "::",
            stringify!(queueFamilyIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterIndexCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR),
            "::",
            stringify!(counterIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCounterIndices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceCreateInfoKHR),
            "::",
            stringify!(pCounterIndices)
        )
    );
}
impl Default for VkQueryPoolPerformanceCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceCounterResultKHR {
    pub int32: i32,
    pub int64: i64,
    pub uint32: u32,
    pub uint64: u64,
    pub float32: f32,
    pub float64: f64,
}
#[test]
fn bindgen_test_layout_VkPerformanceCounterResultKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPerformanceCounterResultKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceCounterResultKHR>(),
        8usize,
        concat!("Size of: ", stringify!(VkPerformanceCounterResultKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceCounterResultKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceCounterResultKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(int64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(uint32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uint64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(uint64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(float32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceCounterResultKHR),
            "::",
            stringify!(float64)
        )
    );
}
impl Default for VkPerformanceCounterResultKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAcquireProfilingLockInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkAcquireProfilingLockFlagsKHR,
    pub timeout: u64,
}
#[test]
fn bindgen_test_layout_VkAcquireProfilingLockInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAcquireProfilingLockInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAcquireProfilingLockInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkAcquireProfilingLockInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAcquireProfilingLockInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAcquireProfilingLockInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireProfilingLockInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireProfilingLockInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireProfilingLockInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAcquireProfilingLockInfoKHR),
            "::",
            stringify!(timeout)
        )
    );
}
impl Default for VkAcquireProfilingLockInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPerformanceQuerySubmitInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub counterPassIndex: u32,
}
#[test]
fn bindgen_test_layout_VkPerformanceQuerySubmitInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPerformanceQuerySubmitInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceQuerySubmitInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkPerformanceQuerySubmitInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceQuerySubmitInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceQuerySubmitInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceQuerySubmitInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceQuerySubmitInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counterPassIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceQuerySubmitInfoKHR),
            "::",
            stringify!(counterPassIndex)
        )
    );
}
impl Default for VkPerformanceQuerySubmitInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR =
    ::std::option::Option<
        unsafe extern "system" fn(
            physicalDevice: VkPhysicalDevice,
            queueFamilyIndex: u32,
            pCounterCount: *mut u32,
            pCounters: *mut VkPerformanceCounterKHR,
            pCounterDescriptions: *mut VkPerformanceCounterDescriptionKHR,
        ) -> VkResult,
    >;
pub type PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPerformanceQueryCreateInfo: *const VkQueryPoolPerformanceCreateInfoKHR,
        pNumPasses: *mut u32,
    ),
>;
pub type PFN_vkAcquireProfilingLockKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkAcquireProfilingLockInfoKHR) -> VkResult,
>;
pub type PFN_vkReleaseProfilingLockKHR =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice)>;
extern "system" {
    pub fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        physicalDevice: VkPhysicalDevice,
        queueFamilyIndex: u32,
        pCounterCount: *mut u32,
        pCounters: *mut VkPerformanceCounterKHR,
        pCounterDescriptions: *mut VkPerformanceCounterDescriptionKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        physicalDevice: VkPhysicalDevice,
        pPerformanceQueryCreateInfo: *const VkQueryPoolPerformanceCreateInfoKHR,
        pNumPasses: *mut u32,
    );
}
extern "system" {
    pub fn vkAcquireProfilingLockKHR(
        device: VkDevice,
        pInfo: *const VkAcquireProfilingLockInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkReleaseProfilingLockKHR(device: VkDevice);
}
pub use self::VkPointClippingBehavior as VkPointClippingBehaviorKHR;
pub use self::VkTessellationDomainOrigin as VkTessellationDomainOriginKHR;
pub type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;
pub type VkRenderPassInputAttachmentAspectCreateInfoKHR =
    VkRenderPassInputAttachmentAspectCreateInfo;
pub type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;
pub type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;
pub type VkPipelineTessellationDomainOriginStateCreateInfoKHR =
    VkPipelineTessellationDomainOriginStateCreateInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSurfaceInfo2KHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub surface: VkSurfaceKHR,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSurfaceInfo2KHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSurfaceInfo2KHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSurfaceInfo2KHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceSurfaceInfo2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSurfaceInfo2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPhysicalDeviceSurfaceInfo2KHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSurfaceInfo2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSurfaceInfo2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSurfaceInfo2KHR),
            "::",
            stringify!(surface)
        )
    );
}
impl Default for VkPhysicalDeviceSurfaceInfo2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSurfaceCapabilities2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub surfaceCapabilities: VkSurfaceCapabilitiesKHR,
}
#[test]
fn bindgen_test_layout_VkSurfaceCapabilities2KHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkSurfaceCapabilities2KHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceCapabilities2KHR>(),
        72usize,
        concat!("Size of: ", stringify!(VkSurfaceCapabilities2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceCapabilities2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSurfaceCapabilities2KHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surfaceCapabilities) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2KHR),
            "::",
            stringify!(surfaceCapabilities)
        )
    );
}
impl Default for VkSurfaceCapabilities2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSurfaceFormat2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub surfaceFormat: VkSurfaceFormatKHR,
}
#[test]
fn bindgen_test_layout_VkSurfaceFormat2KHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkSurfaceFormat2KHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceFormat2KHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkSurfaceFormat2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceFormat2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSurfaceFormat2KHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceFormat2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceFormat2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surfaceFormat) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceFormat2KHR),
            "::",
            stringify!(surfaceFormat)
        )
    );
}
impl Default for VkSurfaceFormat2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormat2KHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2KHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceFormats2KHR(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormat2KHR,
    ) -> VkResult;
}
pub type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub displayProperties: VkDisplayPropertiesKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayProperties2KHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayProperties2KHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayProperties2KHR>(),
        64usize,
        concat!("Size of: ", stringify!(VkDisplayProperties2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayProperties2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayProperties2KHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayProperties2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayProperties2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayProperties2KHR),
            "::",
            stringify!(displayProperties)
        )
    );
}
impl Default for VkDisplayProperties2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayPlaneProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub displayPlaneProperties: VkDisplayPlanePropertiesKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayPlaneProperties2KHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayPlaneProperties2KHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPlaneProperties2KHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkDisplayPlaneProperties2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPlaneProperties2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPlaneProperties2KHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneProperties2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneProperties2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayPlaneProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneProperties2KHR),
            "::",
            stringify!(displayPlaneProperties)
        )
    );
}
impl Default for VkDisplayPlaneProperties2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayModeProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub displayModeProperties: VkDisplayModePropertiesKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayModeProperties2KHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayModeProperties2KHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayModeProperties2KHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkDisplayModeProperties2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayModeProperties2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayModeProperties2KHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeProperties2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeProperties2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayModeProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayModeProperties2KHR),
            "::",
            stringify!(displayModeProperties)
        )
    );
}
impl Default for VkDisplayModeProperties2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayPlaneInfo2KHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub mode: VkDisplayModeKHR,
    pub planeIndex: u32,
}
#[test]
fn bindgen_test_layout_VkDisplayPlaneInfo2KHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayPlaneInfo2KHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPlaneInfo2KHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkDisplayPlaneInfo2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPlaneInfo2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPlaneInfo2KHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneInfo2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneInfo2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneInfo2KHR),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeIndex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneInfo2KHR),
            "::",
            stringify!(planeIndex)
        )
    );
}
impl Default for VkDisplayPlaneInfo2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayPlaneCapabilities2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub capabilities: VkDisplayPlaneCapabilitiesKHR,
}
#[test]
fn bindgen_test_layout_VkDisplayPlaneCapabilities2KHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayPlaneCapabilities2KHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPlaneCapabilities2KHR>(),
        88usize,
        concat!("Size of: ", stringify!(VkDisplayPlaneCapabilities2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPlaneCapabilities2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPlaneCapabilities2KHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilities2KHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilities2KHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capabilities) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPlaneCapabilities2KHR),
            "::",
            stringify!(capabilities)
        )
    );
}
impl Default for VkDisplayPlaneCapabilities2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlaneProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayModeProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModeProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneCapabilities2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pDisplayPlaneInfo: *const VkDisplayPlaneInfo2KHR,
        pCapabilities: *mut VkDisplayPlaneCapabilities2KHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceDisplayProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayProperties2KHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlaneProperties2KHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDisplayModeProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModeProperties2KHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDisplayPlaneCapabilities2KHR(
        physicalDevice: VkPhysicalDevice,
        pDisplayPlaneInfo: *const VkDisplayPlaneInfo2KHR,
        pCapabilities: *mut VkDisplayPlaneCapabilities2KHR,
    ) -> VkResult;
}
pub type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;
pub type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;
pub type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;
pub type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;
pub type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;
pub type VkMemoryRequirements2KHR = VkMemoryRequirements2;
pub type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;
pub type PFN_vkGetImageMemoryRequirements2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetBufferMemoryRequirements2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
extern "system" {
    pub fn vkGetImageMemoryRequirements2KHR(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetBufferMemoryRequirements2KHR(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetImageSparseMemoryRequirements2KHR(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    );
}
pub type VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;
pub type VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
pub use self::VkChromaLocation as VkChromaLocationKHR;
pub use self::VkSamplerYcbcrModelConversion as VkSamplerYcbcrModelConversionKHR;
pub use self::VkSamplerYcbcrRange as VkSamplerYcbcrRangeKHR;
pub type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;
pub type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;
pub type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;
pub type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;
pub type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR =
    VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub type VkSamplerYcbcrConversionImageFormatPropertiesKHR =
    VkSamplerYcbcrConversionImageFormatProperties;
pub type PFN_vkCreateSamplerYcbcrConversionKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult,
>;
pub type PFN_vkDestroySamplerYcbcrConversionKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
extern "system" {
    pub fn vkCreateSamplerYcbcrConversionKHR(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroySamplerYcbcrConversionKHR(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    );
}
pub type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;
pub type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;
pub type PFN_vkBindBufferMemory2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkBindBufferMemory2KHR(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult;
}
extern "system" {
    pub fn vkBindImageMemory2KHR(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult;
}
pub type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;
pub type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;
pub type PFN_vkGetDescriptorSetLayoutSupportKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    ),
>;
extern "system" {
    pub fn vkGetDescriptorSetLayoutSupportKHR(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    );
}
pub type PFN_vkCmdDrawIndirectCountKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCountKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
extern "system" {
    pub fn vkCmdDrawIndirectCountKHR(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndexedIndirectCountKHR(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
pub type VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR =
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub type VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;
pub type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderClockFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSubgroupClock: VkBool32,
    pub shaderDeviceClock: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderClockFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderClockFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderClockFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderClockFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderSubgroupClock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR),
            "::",
            stringify!(shaderSubgroupClock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderDeviceClock) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderClockFeaturesKHR),
            "::",
            stringify!(shaderDeviceClock)
        )
    );
}
impl Default for VkPhysicalDeviceShaderClockFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl StdVideoH265ChromaFormatIdc {
    pub const STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM: StdVideoH265ChromaFormatIdc =
        StdVideoH265ChromaFormatIdc::STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH265ChromaFormatIdc {
    STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = 0,
    STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = 1,
    STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = 2,
    STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = 3,
    STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = 2147483647,
}
impl StdVideoH265ProfileIdc {
    pub const STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM: StdVideoH265ProfileIdc =
        StdVideoH265ProfileIdc::STD_VIDEO_H265_PROFILE_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH265ProfileIdc {
    STD_VIDEO_H265_PROFILE_IDC_MAIN = 1,
    STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = 2,
    STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = 3,
    STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = 4,
    STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = 9,
    STD_VIDEO_H265_PROFILE_IDC_INVALID = 2147483647,
}
impl StdVideoH265LevelIdc {
    pub const STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM: StdVideoH265LevelIdc =
        StdVideoH265LevelIdc::STD_VIDEO_H265_LEVEL_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH265LevelIdc {
    STD_VIDEO_H265_LEVEL_IDC_1_0 = 0,
    STD_VIDEO_H265_LEVEL_IDC_2_0 = 1,
    STD_VIDEO_H265_LEVEL_IDC_2_1 = 2,
    STD_VIDEO_H265_LEVEL_IDC_3_0 = 3,
    STD_VIDEO_H265_LEVEL_IDC_3_1 = 4,
    STD_VIDEO_H265_LEVEL_IDC_4_0 = 5,
    STD_VIDEO_H265_LEVEL_IDC_4_1 = 6,
    STD_VIDEO_H265_LEVEL_IDC_5_0 = 7,
    STD_VIDEO_H265_LEVEL_IDC_5_1 = 8,
    STD_VIDEO_H265_LEVEL_IDC_5_2 = 9,
    STD_VIDEO_H265_LEVEL_IDC_6_0 = 10,
    STD_VIDEO_H265_LEVEL_IDC_6_1 = 11,
    STD_VIDEO_H265_LEVEL_IDC_6_2 = 12,
    STD_VIDEO_H265_LEVEL_IDC_INVALID = 2147483647,
}
impl StdVideoH265SliceType {
    pub const STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM: StdVideoH265SliceType =
        StdVideoH265SliceType::STD_VIDEO_H265_SLICE_TYPE_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH265SliceType {
    STD_VIDEO_H265_SLICE_TYPE_B = 0,
    STD_VIDEO_H265_SLICE_TYPE_P = 1,
    STD_VIDEO_H265_SLICE_TYPE_I = 2,
    STD_VIDEO_H265_SLICE_TYPE_INVALID = 2147483647,
}
impl StdVideoH265PictureType {
    pub const STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM: StdVideoH265PictureType =
        StdVideoH265PictureType::STD_VIDEO_H265_PICTURE_TYPE_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH265PictureType {
    STD_VIDEO_H265_PICTURE_TYPE_P = 0,
    STD_VIDEO_H265_PICTURE_TYPE_B = 1,
    STD_VIDEO_H265_PICTURE_TYPE_I = 2,
    STD_VIDEO_H265_PICTURE_TYPE_IDR = 3,
    STD_VIDEO_H265_PICTURE_TYPE_INVALID = 2147483647,
}
impl StdVideoH265AspectRatioIdc {
    pub const STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM: StdVideoH265AspectRatioIdc =
        StdVideoH265AspectRatioIdc::STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum StdVideoH265AspectRatioIdc {
    STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = 0,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = 1,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = 2,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = 3,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = 4,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = 5,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = 6,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = 7,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = 8,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = 9,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = 10,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = 11,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = 12,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = 13,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = 14,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = 15,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = 16,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = 255,
    STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = 2147483647,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265DecPicBufMgr {
    pub max_latency_increase_plus1: [u32; 7usize],
    pub max_dec_pic_buffering_minus1: [u8; 7usize],
    pub max_num_reorder_pics: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_StdVideoH265DecPicBufMgr() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265DecPicBufMgr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265DecPicBufMgr>(),
        44usize,
        concat!("Size of: ", stringify!(StdVideoH265DecPicBufMgr))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265DecPicBufMgr>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH265DecPicBufMgr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_latency_increase_plus1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265DecPicBufMgr),
            "::",
            stringify!(max_latency_increase_plus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_dec_pic_buffering_minus1) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265DecPicBufMgr),
            "::",
            stringify!(max_dec_pic_buffering_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_num_reorder_pics) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265DecPicBufMgr),
            "::",
            stringify!(max_num_reorder_pics)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265SubLayerHrdParameters {
    pub bit_rate_value_minus1: [u32; 32usize],
    pub cpb_size_value_minus1: [u32; 32usize],
    pub cpb_size_du_value_minus1: [u32; 32usize],
    pub bit_rate_du_value_minus1: [u32; 32usize],
    pub cbr_flag: u32,
}
#[test]
fn bindgen_test_layout_StdVideoH265SubLayerHrdParameters() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265SubLayerHrdParameters> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265SubLayerHrdParameters>(),
        516usize,
        concat!("Size of: ", stringify!(StdVideoH265SubLayerHrdParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265SubLayerHrdParameters>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoH265SubLayerHrdParameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_rate_value_minus1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SubLayerHrdParameters),
            "::",
            stringify!(bit_rate_value_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpb_size_value_minus1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SubLayerHrdParameters),
            "::",
            stringify!(cpb_size_value_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpb_size_du_value_minus1) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SubLayerHrdParameters),
            "::",
            stringify!(cpb_size_du_value_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_rate_du_value_minus1) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SubLayerHrdParameters),
            "::",
            stringify!(bit_rate_du_value_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbr_flag) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SubLayerHrdParameters),
            "::",
            stringify!(cbr_flag)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265HrdFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_StdVideoH265HrdFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265HrdFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoH265HrdFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265HrdFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH265HrdFlags))
    );
}
impl StdVideoH265HrdFlags {
    #[inline]
    pub fn nal_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nal_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vcl_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vcl_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_pic_hrd_params_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sub_pic_hrd_params_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sub_pic_cpb_params_in_pic_timing_sei_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sub_pic_cpb_params_in_pic_timing_sei_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fixed_pic_rate_general_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_fixed_pic_rate_general_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn fixed_pic_rate_within_cvs_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_fixed_pic_rate_within_cvs_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn low_delay_hrd_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_low_delay_hrd_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nal_hrd_parameters_present_flag: u32,
        vcl_hrd_parameters_present_flag: u32,
        sub_pic_hrd_params_present_flag: u32,
        sub_pic_cpb_params_in_pic_timing_sei_flag: u32,
        fixed_pic_rate_general_flag: u32,
        fixed_pic_rate_within_cvs_flag: u32,
        low_delay_hrd_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nal_hrd_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(nal_hrd_parameters_present_flag) };
            nal_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let vcl_hrd_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(vcl_hrd_parameters_present_flag) };
            vcl_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sub_pic_hrd_params_present_flag: u32 =
                unsafe { ::std::mem::transmute(sub_pic_hrd_params_present_flag) };
            sub_pic_hrd_params_present_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sub_pic_cpb_params_in_pic_timing_sei_flag: u32 =
                unsafe { ::std::mem::transmute(sub_pic_cpb_params_in_pic_timing_sei_flag) };
            sub_pic_cpb_params_in_pic_timing_sei_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 8u8, {
            let fixed_pic_rate_general_flag: u32 =
                unsafe { ::std::mem::transmute(fixed_pic_rate_general_flag) };
            fixed_pic_rate_general_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 8u8, {
            let fixed_pic_rate_within_cvs_flag: u32 =
                unsafe { ::std::mem::transmute(fixed_pic_rate_within_cvs_flag) };
            fixed_pic_rate_within_cvs_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 8u8, {
            let low_delay_hrd_flag: u32 = unsafe { ::std::mem::transmute(low_delay_hrd_flag) };
            low_delay_hrd_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265HrdParameters {
    pub flags: StdVideoH265HrdFlags,
    pub tick_divisor_minus2: u8,
    pub du_cpb_removal_delay_increment_length_minus1: u8,
    pub dpb_output_delay_du_length_minus1: u8,
    pub bit_rate_scale: u8,
    pub cpb_size_scale: u8,
    pub cpb_size_du_scale: u8,
    pub initial_cpb_removal_delay_length_minus1: u8,
    pub au_cpb_removal_delay_length_minus1: u8,
    pub dpb_output_delay_length_minus1: u8,
    pub cpb_cnt_minus1: [u8; 7usize],
    pub elemental_duration_in_tc_minus1: [u16; 7usize],
    pub reserved: [u16; 3usize],
    pub pSubLayerHrdParametersNal: *const StdVideoH265SubLayerHrdParameters,
    pub pSubLayerHrdParametersVcl: *const StdVideoH265SubLayerHrdParameters,
}
#[test]
fn bindgen_test_layout_StdVideoH265HrdParameters() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265HrdParameters> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265HrdParameters>(),
        56usize,
        concat!("Size of: ", stringify!(StdVideoH265HrdParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265HrdParameters>(),
        8usize,
        concat!("Alignment of ", stringify!(StdVideoH265HrdParameters))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tick_divisor_minus2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(tick_divisor_minus2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).du_cpb_removal_delay_increment_length_minus1) as usize
                - ptr as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(du_cpb_removal_delay_increment_length_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dpb_output_delay_du_length_minus1) as usize - ptr as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(dpb_output_delay_du_length_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_rate_scale) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(bit_rate_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpb_size_scale) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(cpb_size_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpb_size_du_scale) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(cpb_size_du_scale)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).initial_cpb_removal_delay_length_minus1) as usize
                - ptr as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(initial_cpb_removal_delay_length_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).au_cpb_removal_delay_length_minus1) as usize - ptr as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(au_cpb_removal_delay_length_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dpb_output_delay_length_minus1) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(dpb_output_delay_length_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpb_cnt_minus1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(cpb_cnt_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).elemental_duration_in_tc_minus1) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(elemental_duration_in_tc_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSubLayerHrdParametersNal) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(pSubLayerHrdParametersNal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSubLayerHrdParametersVcl) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265HrdParameters),
            "::",
            stringify!(pSubLayerHrdParametersVcl)
        )
    );
}
impl Default for StdVideoH265HrdParameters {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265VpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_StdVideoH265VpsFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265VpsFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoH265VpsFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265VpsFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH265VpsFlags))
    );
}
impl StdVideoH265VpsFlags {
    #[inline]
    pub fn vps_temporal_id_nesting_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_temporal_id_nesting_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vps_sub_layer_ordering_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_sub_layer_ordering_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vps_timing_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vps_poc_proportional_to_timing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_poc_proportional_to_timing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        vps_temporal_id_nesting_flag: u32,
        vps_sub_layer_ordering_info_present_flag: u32,
        vps_timing_info_present_flag: u32,
        vps_poc_proportional_to_timing_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let vps_temporal_id_nesting_flag: u32 =
                unsafe { ::std::mem::transmute(vps_temporal_id_nesting_flag) };
            vps_temporal_id_nesting_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let vps_sub_layer_ordering_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(vps_sub_layer_ordering_info_present_flag) };
            vps_sub_layer_ordering_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let vps_timing_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(vps_timing_info_present_flag) };
            vps_timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let vps_poc_proportional_to_timing_flag: u32 =
                unsafe { ::std::mem::transmute(vps_poc_proportional_to_timing_flag) };
            vps_poc_proportional_to_timing_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265ProfileTierLevelFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_StdVideoH265ProfileTierLevelFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265ProfileTierLevelFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoH265ProfileTierLevelFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265ProfileTierLevelFlags>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoH265ProfileTierLevelFlags)
        )
    );
}
impl StdVideoH265ProfileTierLevelFlags {
    #[inline]
    pub fn general_tier_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_tier_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn general_progressive_source_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_progressive_source_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn general_interlaced_source_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_interlaced_source_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn general_non_packed_constraint_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_non_packed_constraint_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn general_frame_only_constraint_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_frame_only_constraint_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        general_tier_flag: u32,
        general_progressive_source_flag: u32,
        general_interlaced_source_flag: u32,
        general_non_packed_constraint_flag: u32,
        general_frame_only_constraint_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let general_tier_flag: u32 = unsafe { ::std::mem::transmute(general_tier_flag) };
            general_tier_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let general_progressive_source_flag: u32 =
                unsafe { ::std::mem::transmute(general_progressive_source_flag) };
            general_progressive_source_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let general_interlaced_source_flag: u32 =
                unsafe { ::std::mem::transmute(general_interlaced_source_flag) };
            general_interlaced_source_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let general_non_packed_constraint_flag: u32 =
                unsafe { ::std::mem::transmute(general_non_packed_constraint_flag) };
            general_non_packed_constraint_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let general_frame_only_constraint_flag: u32 =
                unsafe { ::std::mem::transmute(general_frame_only_constraint_flag) };
            general_frame_only_constraint_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265ProfileTierLevel {
    pub flags: StdVideoH265ProfileTierLevelFlags,
    pub general_profile_idc: StdVideoH265ProfileIdc,
    pub general_level_idc: StdVideoH265LevelIdc,
}
#[test]
fn bindgen_test_layout_StdVideoH265ProfileTierLevel() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265ProfileTierLevel> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265ProfileTierLevel>(),
        12usize,
        concat!("Size of: ", stringify!(StdVideoH265ProfileTierLevel))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265ProfileTierLevel>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH265ProfileTierLevel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ProfileTierLevel),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).general_profile_idc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ProfileTierLevel),
            "::",
            stringify!(general_profile_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).general_level_idc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ProfileTierLevel),
            "::",
            stringify!(general_level_idc)
        )
    );
}
impl Default for StdVideoH265ProfileTierLevel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265VideoParameterSet {
    pub flags: StdVideoH265VpsFlags,
    pub vps_video_parameter_set_id: u8,
    pub vps_max_sub_layers_minus1: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub vps_num_units_in_tick: u32,
    pub vps_time_scale: u32,
    pub vps_num_ticks_poc_diff_one_minus1: u32,
    pub reserved3: u32,
    pub pDecPicBufMgr: *const StdVideoH265DecPicBufMgr,
    pub pHrdParameters: *const StdVideoH265HrdParameters,
    pub pProfileTierLevel: *const StdVideoH265ProfileTierLevel,
}
#[test]
fn bindgen_test_layout_StdVideoH265VideoParameterSet() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265VideoParameterSet> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265VideoParameterSet>(),
        48usize,
        concat!("Size of: ", stringify!(StdVideoH265VideoParameterSet))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265VideoParameterSet>(),
        8usize,
        concat!("Alignment of ", stringify!(StdVideoH265VideoParameterSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vps_video_parameter_set_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(vps_video_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vps_max_sub_layers_minus1) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(vps_max_sub_layers_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vps_num_units_in_tick) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(vps_num_units_in_tick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vps_time_scale) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(vps_time_scale)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vps_num_ticks_poc_diff_one_minus1) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(vps_num_ticks_poc_diff_one_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDecPicBufMgr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(pDecPicBufMgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHrdParameters) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(pHrdParameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pProfileTierLevel) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265VideoParameterSet),
            "::",
            stringify!(pProfileTierLevel)
        )
    );
}
impl Default for StdVideoH265VideoParameterSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265ScalingLists {
    pub ScalingList4x4: [[u8; 16usize]; 6usize],
    pub ScalingList8x8: [[u8; 64usize]; 6usize],
    pub ScalingList16x16: [[u8; 64usize]; 6usize],
    pub ScalingList32x32: [[u8; 64usize]; 2usize],
    pub ScalingListDCCoef16x16: [u8; 6usize],
    pub ScalingListDCCoef32x32: [u8; 2usize],
}
#[test]
fn bindgen_test_layout_StdVideoH265ScalingLists() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265ScalingLists> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265ScalingLists>(),
        1000usize,
        concat!("Size of: ", stringify!(StdVideoH265ScalingLists))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265ScalingLists>(),
        1usize,
        concat!("Alignment of ", stringify!(StdVideoH265ScalingLists))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScalingList4x4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ScalingLists),
            "::",
            stringify!(ScalingList4x4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScalingList8x8) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ScalingLists),
            "::",
            stringify!(ScalingList8x8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScalingList16x16) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ScalingLists),
            "::",
            stringify!(ScalingList16x16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScalingList32x32) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ScalingLists),
            "::",
            stringify!(ScalingList32x32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScalingListDCCoef16x16) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ScalingLists),
            "::",
            stringify!(ScalingListDCCoef16x16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScalingListDCCoef32x32) as usize - ptr as usize },
        998usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ScalingLists),
            "::",
            stringify!(ScalingListDCCoef32x32)
        )
    );
}
impl Default for StdVideoH265ScalingLists {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265SpsVuiFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[test]
fn bindgen_test_layout_StdVideoH265SpsVuiFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265SpsVuiFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoH265SpsVuiFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265SpsVuiFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH265SpsVuiFlags))
    );
}
impl StdVideoH265SpsVuiFlags {
    #[inline]
    pub fn aspect_ratio_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aspect_ratio_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn overscan_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn overscan_appropriate_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_appropriate_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn video_signal_type_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_signal_type_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn video_full_range_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_full_range_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn colour_description_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_colour_description_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma_loc_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_loc_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn neutral_chroma_indication_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_neutral_chroma_indication_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn field_seq_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_seq_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn frame_field_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_field_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn default_display_window_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_default_display_window_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vui_timing_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vui_poc_proportional_to_timing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_poc_proportional_to_timing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vui_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitstream_restriction_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitstream_restriction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tiles_fixed_structure_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tiles_fixed_structure_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn motion_vectors_over_pic_boundaries_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_motion_vectors_over_pic_boundaries_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn restricted_ref_pic_lists_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_restricted_ref_pic_lists_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        aspect_ratio_info_present_flag: u32,
        overscan_info_present_flag: u32,
        overscan_appropriate_flag: u32,
        video_signal_type_present_flag: u32,
        video_full_range_flag: u32,
        colour_description_present_flag: u32,
        chroma_loc_info_present_flag: u32,
        neutral_chroma_indication_flag: u32,
        field_seq_flag: u32,
        frame_field_info_present_flag: u32,
        default_display_window_flag: u32,
        vui_timing_info_present_flag: u32,
        vui_poc_proportional_to_timing_flag: u32,
        vui_hrd_parameters_present_flag: u32,
        bitstream_restriction_flag: u32,
        tiles_fixed_structure_flag: u32,
        motion_vectors_over_pic_boundaries_flag: u32,
        restricted_ref_pic_lists_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let aspect_ratio_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(aspect_ratio_info_present_flag) };
            aspect_ratio_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let overscan_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(overscan_info_present_flag) };
            overscan_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let overscan_appropriate_flag: u32 =
                unsafe { ::std::mem::transmute(overscan_appropriate_flag) };
            overscan_appropriate_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let video_signal_type_present_flag: u32 =
                unsafe { ::std::mem::transmute(video_signal_type_present_flag) };
            video_signal_type_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let video_full_range_flag: u32 =
                unsafe { ::std::mem::transmute(video_full_range_flag) };
            video_full_range_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let colour_description_present_flag: u32 =
                unsafe { ::std::mem::transmute(colour_description_present_flag) };
            colour_description_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let chroma_loc_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(chroma_loc_info_present_flag) };
            chroma_loc_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let neutral_chroma_indication_flag: u32 =
                unsafe { ::std::mem::transmute(neutral_chroma_indication_flag) };
            neutral_chroma_indication_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let field_seq_flag: u32 = unsafe { ::std::mem::transmute(field_seq_flag) };
            field_seq_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let frame_field_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(frame_field_info_present_flag) };
            frame_field_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let default_display_window_flag: u32 =
                unsafe { ::std::mem::transmute(default_display_window_flag) };
            default_display_window_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let vui_timing_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(vui_timing_info_present_flag) };
            vui_timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let vui_poc_proportional_to_timing_flag: u32 =
                unsafe { ::std::mem::transmute(vui_poc_proportional_to_timing_flag) };
            vui_poc_proportional_to_timing_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let vui_hrd_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(vui_hrd_parameters_present_flag) };
            vui_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bitstream_restriction_flag: u32 =
                unsafe { ::std::mem::transmute(bitstream_restriction_flag) };
            bitstream_restriction_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let tiles_fixed_structure_flag: u32 =
                unsafe { ::std::mem::transmute(tiles_fixed_structure_flag) };
            tiles_fixed_structure_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let motion_vectors_over_pic_boundaries_flag: u32 =
                unsafe { ::std::mem::transmute(motion_vectors_over_pic_boundaries_flag) };
            motion_vectors_over_pic_boundaries_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let restricted_ref_pic_lists_flag: u32 =
                unsafe { ::std::mem::transmute(restricted_ref_pic_lists_flag) };
            restricted_ref_pic_lists_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265SequenceParameterSetVui {
    pub flags: StdVideoH265SpsVuiFlags,
    pub aspect_ratio_idc: StdVideoH265AspectRatioIdc,
    pub sar_width: u16,
    pub sar_height: u16,
    pub video_format: u8,
    pub colour_primaries: u8,
    pub transfer_characteristics: u8,
    pub matrix_coeffs: u8,
    pub chroma_sample_loc_type_top_field: u8,
    pub chroma_sample_loc_type_bottom_field: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub def_disp_win_left_offset: u16,
    pub def_disp_win_right_offset: u16,
    pub def_disp_win_top_offset: u16,
    pub def_disp_win_bottom_offset: u16,
    pub vui_num_units_in_tick: u32,
    pub vui_time_scale: u32,
    pub vui_num_ticks_poc_diff_one_minus1: u32,
    pub min_spatial_segmentation_idc: u16,
    pub reserved3: u16,
    pub max_bytes_per_pic_denom: u8,
    pub max_bits_per_min_cu_denom: u8,
    pub log2_max_mv_length_horizontal: u8,
    pub log2_max_mv_length_vertical: u8,
    pub pHrdParameters: *const StdVideoH265HrdParameters,
}
#[test]
fn bindgen_test_layout_StdVideoH265SequenceParameterSetVui() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265SequenceParameterSetVui> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265SequenceParameterSetVui>(),
        56usize,
        concat!("Size of: ", stringify!(StdVideoH265SequenceParameterSetVui))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265SequenceParameterSetVui>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoH265SequenceParameterSetVui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aspect_ratio_idc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(aspect_ratio_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sar_width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(sar_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sar_height) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(sar_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).video_format) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(video_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colour_primaries) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(colour_primaries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transfer_characteristics) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(transfer_characteristics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matrix_coeffs) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(matrix_coeffs)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chroma_sample_loc_type_top_field) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(chroma_sample_loc_type_top_field)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chroma_sample_loc_type_bottom_field) as usize - ptr as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(chroma_sample_loc_type_bottom_field)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_disp_win_left_offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(def_disp_win_left_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_disp_win_right_offset) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(def_disp_win_right_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_disp_win_top_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(def_disp_win_top_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_disp_win_bottom_offset) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(def_disp_win_bottom_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vui_num_units_in_tick) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(vui_num_units_in_tick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vui_time_scale) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(vui_time_scale)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vui_num_ticks_poc_diff_one_minus1) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(vui_num_ticks_poc_diff_one_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).min_spatial_segmentation_idc) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(min_spatial_segmentation_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_bytes_per_pic_denom) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(max_bytes_per_pic_denom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_bits_per_min_cu_denom) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(max_bits_per_min_cu_denom)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_max_mv_length_horizontal) as usize - ptr as usize
        },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(log2_max_mv_length_horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log2_max_mv_length_vertical) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(log2_max_mv_length_vertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHrdParameters) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSetVui),
            "::",
            stringify!(pHrdParameters)
        )
    );
}
impl Default for StdVideoH265SequenceParameterSetVui {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265PredictorPaletteEntries {
    pub PredictorPaletteEntries: [[u16; 128usize]; 3usize],
}
#[test]
fn bindgen_test_layout_StdVideoH265PredictorPaletteEntries() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265PredictorPaletteEntries> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265PredictorPaletteEntries>(),
        768usize,
        concat!("Size of: ", stringify!(StdVideoH265PredictorPaletteEntries))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265PredictorPaletteEntries>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoH265PredictorPaletteEntries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PredictorPaletteEntries) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PredictorPaletteEntries),
            "::",
            stringify!(PredictorPaletteEntries)
        )
    );
}
impl Default for StdVideoH265PredictorPaletteEntries {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265SpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_StdVideoH265SpsFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265SpsFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoH265SpsFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265SpsFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH265SpsFlags))
    );
}
impl StdVideoH265SpsFlags {
    #[inline]
    pub fn sps_temporal_id_nesting_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_temporal_id_nesting_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn separate_colour_plane_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_separate_colour_plane_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn conformance_window_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_conformance_window_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_sub_layer_ordering_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_sub_layer_ordering_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scaling_list_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scaling_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_scaling_list_data_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_scaling_list_data_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn amp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_amp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sample_adaptive_offset_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sample_adaptive_offset_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pcm_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pcm_loop_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm_loop_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn long_term_ref_pics_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_long_term_ref_pics_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_temporal_mvp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_temporal_mvp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn strong_intra_smoothing_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_strong_intra_smoothing_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vui_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_extension_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_extension_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_range_extension_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_range_extension_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_skip_rotation_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_rotation_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_skip_context_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_context_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn implicit_rdpcm_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_implicit_rdpcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn explicit_rdpcm_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_explicit_rdpcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn extended_precision_processing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_extended_precision_processing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_smoothing_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_smoothing_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn high_precision_offsets_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_high_precision_offsets_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn persistent_rice_adaptation_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_persistent_rice_adaptation_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cabac_bypass_alignment_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_bypass_alignment_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_scc_extension_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_scc_extension_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_curr_pic_ref_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_curr_pic_ref_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn palette_mode_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_palette_mode_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sps_palette_predictor_initializers_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_palette_predictor_initializers_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn intra_boundary_filtering_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_boundary_filtering_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sps_temporal_id_nesting_flag: u32,
        separate_colour_plane_flag: u32,
        conformance_window_flag: u32,
        sps_sub_layer_ordering_info_present_flag: u32,
        scaling_list_enabled_flag: u32,
        sps_scaling_list_data_present_flag: u32,
        amp_enabled_flag: u32,
        sample_adaptive_offset_enabled_flag: u32,
        pcm_enabled_flag: u32,
        pcm_loop_filter_disabled_flag: u32,
        long_term_ref_pics_present_flag: u32,
        sps_temporal_mvp_enabled_flag: u32,
        strong_intra_smoothing_enabled_flag: u32,
        vui_parameters_present_flag: u32,
        sps_extension_present_flag: u32,
        sps_range_extension_flag: u32,
        transform_skip_rotation_enabled_flag: u32,
        transform_skip_context_enabled_flag: u32,
        implicit_rdpcm_enabled_flag: u32,
        explicit_rdpcm_enabled_flag: u32,
        extended_precision_processing_flag: u32,
        intra_smoothing_disabled_flag: u32,
        high_precision_offsets_enabled_flag: u32,
        persistent_rice_adaptation_enabled_flag: u32,
        cabac_bypass_alignment_enabled_flag: u32,
        sps_scc_extension_flag: u32,
        sps_curr_pic_ref_enabled_flag: u32,
        palette_mode_enabled_flag: u32,
        sps_palette_predictor_initializers_present_flag: u32,
        intra_boundary_filtering_disabled_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sps_temporal_id_nesting_flag: u32 =
                unsafe { ::std::mem::transmute(sps_temporal_id_nesting_flag) };
            sps_temporal_id_nesting_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let separate_colour_plane_flag: u32 =
                unsafe { ::std::mem::transmute(separate_colour_plane_flag) };
            separate_colour_plane_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let conformance_window_flag: u32 =
                unsafe { ::std::mem::transmute(conformance_window_flag) };
            conformance_window_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sps_sub_layer_ordering_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(sps_sub_layer_ordering_info_present_flag) };
            sps_sub_layer_ordering_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let scaling_list_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(scaling_list_enabled_flag) };
            scaling_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let sps_scaling_list_data_present_flag: u32 =
                unsafe { ::std::mem::transmute(sps_scaling_list_data_present_flag) };
            sps_scaling_list_data_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let amp_enabled_flag: u32 = unsafe { ::std::mem::transmute(amp_enabled_flag) };
            amp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let sample_adaptive_offset_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sample_adaptive_offset_enabled_flag) };
            sample_adaptive_offset_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let pcm_enabled_flag: u32 = unsafe { ::std::mem::transmute(pcm_enabled_flag) };
            pcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let pcm_loop_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(pcm_loop_filter_disabled_flag) };
            pcm_loop_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let long_term_ref_pics_present_flag: u32 =
                unsafe { ::std::mem::transmute(long_term_ref_pics_present_flag) };
            long_term_ref_pics_present_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let sps_temporal_mvp_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sps_temporal_mvp_enabled_flag) };
            sps_temporal_mvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let strong_intra_smoothing_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(strong_intra_smoothing_enabled_flag) };
            strong_intra_smoothing_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let vui_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(vui_parameters_present_flag) };
            vui_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let sps_extension_present_flag: u32 =
                unsafe { ::std::mem::transmute(sps_extension_present_flag) };
            sps_extension_present_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let sps_range_extension_flag: u32 =
                unsafe { ::std::mem::transmute(sps_range_extension_flag) };
            sps_range_extension_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let transform_skip_rotation_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transform_skip_rotation_enabled_flag) };
            transform_skip_rotation_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let transform_skip_context_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transform_skip_context_enabled_flag) };
            transform_skip_context_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let implicit_rdpcm_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(implicit_rdpcm_enabled_flag) };
            implicit_rdpcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let explicit_rdpcm_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(explicit_rdpcm_enabled_flag) };
            explicit_rdpcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let extended_precision_processing_flag: u32 =
                unsafe { ::std::mem::transmute(extended_precision_processing_flag) };
            extended_precision_processing_flag as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let intra_smoothing_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(intra_smoothing_disabled_flag) };
            intra_smoothing_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let high_precision_offsets_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(high_precision_offsets_enabled_flag) };
            high_precision_offsets_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let persistent_rice_adaptation_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(persistent_rice_adaptation_enabled_flag) };
            persistent_rice_adaptation_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let cabac_bypass_alignment_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cabac_bypass_alignment_enabled_flag) };
            cabac_bypass_alignment_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let sps_scc_extension_flag: u32 =
                unsafe { ::std::mem::transmute(sps_scc_extension_flag) };
            sps_scc_extension_flag as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let sps_curr_pic_ref_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sps_curr_pic_ref_enabled_flag) };
            sps_curr_pic_ref_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let palette_mode_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(palette_mode_enabled_flag) };
            palette_mode_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let sps_palette_predictor_initializers_present_flag: u32 =
                unsafe { ::std::mem::transmute(sps_palette_predictor_initializers_present_flag) };
            sps_palette_predictor_initializers_present_flag as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let intra_boundary_filtering_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(intra_boundary_filtering_disabled_flag) };
            intra_boundary_filtering_disabled_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265ShortTermRefPicSetFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_StdVideoH265ShortTermRefPicSetFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265ShortTermRefPicSetFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoH265ShortTermRefPicSetFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265ShortTermRefPicSetFlags>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoH265ShortTermRefPicSetFlags)
        )
    );
}
impl StdVideoH265ShortTermRefPicSetFlags {
    #[inline]
    pub fn inter_ref_pic_set_prediction_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inter_ref_pic_set_prediction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn delta_rps_sign(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_rps_sign(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        inter_ref_pic_set_prediction_flag: u32,
        delta_rps_sign: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let inter_ref_pic_set_prediction_flag: u32 =
                unsafe { ::std::mem::transmute(inter_ref_pic_set_prediction_flag) };
            inter_ref_pic_set_prediction_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let delta_rps_sign: u32 = unsafe { ::std::mem::transmute(delta_rps_sign) };
            delta_rps_sign as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265ShortTermRefPicSet {
    pub flags: StdVideoH265ShortTermRefPicSetFlags,
    pub delta_idx_minus1: u32,
    pub use_delta_flag: u16,
    pub abs_delta_rps_minus1: u16,
    pub used_by_curr_pic_flag: u16,
    pub used_by_curr_pic_s0_flag: u16,
    pub used_by_curr_pic_s1_flag: u16,
    pub reserved1: u16,
    pub reserved2: u8,
    pub reserved3: u8,
    pub num_negative_pics: u8,
    pub num_positive_pics: u8,
    pub delta_poc_s0_minus1: [u16; 16usize],
    pub delta_poc_s1_minus1: [u16; 16usize],
}
#[test]
fn bindgen_test_layout_StdVideoH265ShortTermRefPicSet() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265ShortTermRefPicSet> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265ShortTermRefPicSet>(),
        88usize,
        concat!("Size of: ", stringify!(StdVideoH265ShortTermRefPicSet))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265ShortTermRefPicSet>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH265ShortTermRefPicSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta_idx_minus1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(delta_idx_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_delta_flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(use_delta_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abs_delta_rps_minus1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(abs_delta_rps_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_by_curr_pic_flag) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(used_by_curr_pic_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_by_curr_pic_s0_flag) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(used_by_curr_pic_s0_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_by_curr_pic_s1_flag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(used_by_curr_pic_s1_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_negative_pics) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(num_negative_pics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_positive_pics) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(num_positive_pics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta_poc_s0_minus1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(delta_poc_s0_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta_poc_s1_minus1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265ShortTermRefPicSet),
            "::",
            stringify!(delta_poc_s1_minus1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265LongTermRefPicsSps {
    pub used_by_curr_pic_lt_sps_flag: u32,
    pub lt_ref_pic_poc_lsb_sps: [u32; 32usize],
}
#[test]
fn bindgen_test_layout_StdVideoH265LongTermRefPicsSps() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265LongTermRefPicsSps> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265LongTermRefPicsSps>(),
        132usize,
        concat!("Size of: ", stringify!(StdVideoH265LongTermRefPicsSps))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265LongTermRefPicsSps>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH265LongTermRefPicsSps))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).used_by_curr_pic_lt_sps_flag) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265LongTermRefPicsSps),
            "::",
            stringify!(used_by_curr_pic_lt_sps_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lt_ref_pic_poc_lsb_sps) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265LongTermRefPicsSps),
            "::",
            stringify!(lt_ref_pic_poc_lsb_sps)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265SequenceParameterSet {
    pub flags: StdVideoH265SpsFlags,
    pub chroma_format_idc: StdVideoH265ChromaFormatIdc,
    pub pic_width_in_luma_samples: u32,
    pub pic_height_in_luma_samples: u32,
    pub sps_video_parameter_set_id: u8,
    pub sps_max_sub_layers_minus1: u8,
    pub sps_seq_parameter_set_id: u8,
    pub bit_depth_luma_minus8: u8,
    pub bit_depth_chroma_minus8: u8,
    pub log2_max_pic_order_cnt_lsb_minus4: u8,
    pub log2_min_luma_coding_block_size_minus3: u8,
    pub log2_diff_max_min_luma_coding_block_size: u8,
    pub log2_min_luma_transform_block_size_minus2: u8,
    pub log2_diff_max_min_luma_transform_block_size: u8,
    pub max_transform_hierarchy_depth_inter: u8,
    pub max_transform_hierarchy_depth_intra: u8,
    pub num_short_term_ref_pic_sets: u8,
    pub num_long_term_ref_pics_sps: u8,
    pub pcm_sample_bit_depth_luma_minus1: u8,
    pub pcm_sample_bit_depth_chroma_minus1: u8,
    pub log2_min_pcm_luma_coding_block_size_minus3: u8,
    pub log2_diff_max_min_pcm_luma_coding_block_size: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub palette_max_size: u8,
    pub delta_palette_max_predictor_size: u8,
    pub motion_vector_resolution_control_idc: u8,
    pub sps_num_palette_predictor_initializers_minus1: u8,
    pub conf_win_left_offset: u32,
    pub conf_win_right_offset: u32,
    pub conf_win_top_offset: u32,
    pub conf_win_bottom_offset: u32,
    pub pProfileTierLevel: *const StdVideoH265ProfileTierLevel,
    pub pDecPicBufMgr: *const StdVideoH265DecPicBufMgr,
    pub pScalingLists: *const StdVideoH265ScalingLists,
    pub pShortTermRefPicSet: *const StdVideoH265ShortTermRefPicSet,
    pub pLongTermRefPicsSps: *const StdVideoH265LongTermRefPicsSps,
    pub pSequenceParameterSetVui: *const StdVideoH265SequenceParameterSetVui,
    pub pPredictorPaletteEntries: *const StdVideoH265PredictorPaletteEntries,
}
#[test]
fn bindgen_test_layout_StdVideoH265SequenceParameterSet() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265SequenceParameterSet> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265SequenceParameterSet>(),
        112usize,
        concat!("Size of: ", stringify!(StdVideoH265SequenceParameterSet))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265SequenceParameterSet>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoH265SequenceParameterSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chroma_format_idc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(chroma_format_idc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_width_in_luma_samples) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pic_width_in_luma_samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pic_height_in_luma_samples) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pic_height_in_luma_samples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sps_video_parameter_set_id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(sps_video_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sps_max_sub_layers_minus1) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(sps_max_sub_layers_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sps_seq_parameter_set_id) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(sps_seq_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_depth_luma_minus8) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(bit_depth_luma_minus8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bit_depth_chroma_minus8) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(bit_depth_chroma_minus8)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_max_pic_order_cnt_lsb_minus4) as usize - ptr as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(log2_max_pic_order_cnt_lsb_minus4)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_min_luma_coding_block_size_minus3) as usize
                - ptr as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(log2_min_luma_coding_block_size_minus3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_diff_max_min_luma_coding_block_size) as usize
                - ptr as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(log2_diff_max_min_luma_coding_block_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_min_luma_transform_block_size_minus2) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(log2_min_luma_transform_block_size_minus2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_diff_max_min_luma_transform_block_size) as usize
                - ptr as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(log2_diff_max_min_luma_transform_block_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_transform_hierarchy_depth_inter) as usize - ptr as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(max_transform_hierarchy_depth_inter)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_transform_hierarchy_depth_intra) as usize - ptr as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(max_transform_hierarchy_depth_intra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_short_term_ref_pic_sets) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(num_short_term_ref_pic_sets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_long_term_ref_pics_sps) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(num_long_term_ref_pics_sps)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pcm_sample_bit_depth_luma_minus1) as usize - ptr as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pcm_sample_bit_depth_luma_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pcm_sample_bit_depth_chroma_minus1) as usize - ptr as usize
        },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pcm_sample_bit_depth_chroma_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_min_pcm_luma_coding_block_size_minus3) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(log2_min_pcm_luma_coding_block_size_minus3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_diff_max_min_pcm_luma_coding_block_size) as usize
                - ptr as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(log2_diff_max_min_pcm_luma_coding_block_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).palette_max_size) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(palette_max_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).delta_palette_max_predictor_size) as usize - ptr as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(delta_palette_max_predictor_size)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).motion_vector_resolution_control_idc) as usize
                - ptr as usize
        },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(motion_vector_resolution_control_idc)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sps_num_palette_predictor_initializers_minus1) as usize
                - ptr as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(sps_num_palette_predictor_initializers_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_win_left_offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(conf_win_left_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_win_right_offset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(conf_win_right_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_win_top_offset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(conf_win_top_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conf_win_bottom_offset) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(conf_win_bottom_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pProfileTierLevel) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pProfileTierLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDecPicBufMgr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pDecPicBufMgr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pScalingLists) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pScalingLists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pShortTermRefPicSet) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pShortTermRefPicSet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLongTermRefPicsSps) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pLongTermRefPicsSps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSequenceParameterSetVui) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pSequenceParameterSetVui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPredictorPaletteEntries) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265SequenceParameterSet),
            "::",
            stringify!(pPredictorPaletteEntries)
        )
    );
}
impl Default for StdVideoH265SequenceParameterSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265PpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_StdVideoH265PpsFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265PpsFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoH265PpsFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265PpsFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoH265PpsFlags))
    );
}
impl StdVideoH265PpsFlags {
    #[inline]
    pub fn dependent_slice_segments_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dependent_slice_segments_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn output_flag_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_output_flag_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sign_data_hiding_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign_data_hiding_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cabac_init_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_init_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn constrained_intra_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transform_skip_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cu_qp_delta_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cu_qp_delta_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_slice_chroma_qp_offsets_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_slice_chroma_qp_offsets_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn weighted_bipred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_bipred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn transquant_bypass_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transquant_bypass_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tiles_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn entropy_coding_sync_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entropy_coding_sync_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uniform_spacing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uniform_spacing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn loop_filter_across_tiles_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_across_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_loop_filter_across_slices_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_loop_filter_across_slices_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deblocking_filter_control_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_control_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn deblocking_filter_override_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_override_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_deblocking_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_deblocking_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_scaling_list_data_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_scaling_list_data_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lists_modification_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lists_modification_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn slice_segment_header_extension_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_segment_header_extension_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_extension_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_extension_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cross_component_prediction_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cross_component_prediction_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn chroma_qp_offset_list_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_qp_offset_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_curr_pic_ref_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_curr_pic_ref_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn residual_adaptive_colour_transform_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_residual_adaptive_colour_transform_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_slice_act_qp_offsets_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_slice_act_qp_offsets_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_palette_predictor_initializers_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_palette_predictor_initializers_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn monochrome_palette_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_monochrome_palette_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pps_range_extension_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_range_extension_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dependent_slice_segments_enabled_flag: u32,
        output_flag_present_flag: u32,
        sign_data_hiding_enabled_flag: u32,
        cabac_init_present_flag: u32,
        constrained_intra_pred_flag: u32,
        transform_skip_enabled_flag: u32,
        cu_qp_delta_enabled_flag: u32,
        pps_slice_chroma_qp_offsets_present_flag: u32,
        weighted_pred_flag: u32,
        weighted_bipred_flag: u32,
        transquant_bypass_enabled_flag: u32,
        tiles_enabled_flag: u32,
        entropy_coding_sync_enabled_flag: u32,
        uniform_spacing_flag: u32,
        loop_filter_across_tiles_enabled_flag: u32,
        pps_loop_filter_across_slices_enabled_flag: u32,
        deblocking_filter_control_present_flag: u32,
        deblocking_filter_override_enabled_flag: u32,
        pps_deblocking_filter_disabled_flag: u32,
        pps_scaling_list_data_present_flag: u32,
        lists_modification_present_flag: u32,
        slice_segment_header_extension_present_flag: u32,
        pps_extension_present_flag: u32,
        cross_component_prediction_enabled_flag: u32,
        chroma_qp_offset_list_enabled_flag: u32,
        pps_curr_pic_ref_enabled_flag: u32,
        residual_adaptive_colour_transform_enabled_flag: u32,
        pps_slice_act_qp_offsets_present_flag: u32,
        pps_palette_predictor_initializers_present_flag: u32,
        monochrome_palette_flag: u32,
        pps_range_extension_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dependent_slice_segments_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(dependent_slice_segments_enabled_flag) };
            dependent_slice_segments_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let output_flag_present_flag: u32 =
                unsafe { ::std::mem::transmute(output_flag_present_flag) };
            output_flag_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sign_data_hiding_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sign_data_hiding_enabled_flag) };
            sign_data_hiding_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let cabac_init_present_flag: u32 =
                unsafe { ::std::mem::transmute(cabac_init_present_flag) };
            cabac_init_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let constrained_intra_pred_flag: u32 =
                unsafe { ::std::mem::transmute(constrained_intra_pred_flag) };
            constrained_intra_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let transform_skip_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transform_skip_enabled_flag) };
            transform_skip_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cu_qp_delta_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cu_qp_delta_enabled_flag) };
            cu_qp_delta_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pps_slice_chroma_qp_offsets_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_slice_chroma_qp_offsets_present_flag) };
            pps_slice_chroma_qp_offsets_present_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let weighted_pred_flag: u32 = unsafe { ::std::mem::transmute(weighted_pred_flag) };
            weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let weighted_bipred_flag: u32 = unsafe { ::std::mem::transmute(weighted_bipred_flag) };
            weighted_bipred_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let transquant_bypass_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transquant_bypass_enabled_flag) };
            transquant_bypass_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tiles_enabled_flag: u32 = unsafe { ::std::mem::transmute(tiles_enabled_flag) };
            tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let entropy_coding_sync_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(entropy_coding_sync_enabled_flag) };
            entropy_coding_sync_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let uniform_spacing_flag: u32 = unsafe { ::std::mem::transmute(uniform_spacing_flag) };
            uniform_spacing_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let loop_filter_across_tiles_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(loop_filter_across_tiles_enabled_flag) };
            loop_filter_across_tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let pps_loop_filter_across_slices_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_loop_filter_across_slices_enabled_flag) };
            pps_loop_filter_across_slices_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let deblocking_filter_control_present_flag: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_control_present_flag) };
            deblocking_filter_control_present_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let deblocking_filter_override_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_override_enabled_flag) };
            deblocking_filter_override_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let pps_deblocking_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_deblocking_filter_disabled_flag) };
            pps_deblocking_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let pps_scaling_list_data_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_scaling_list_data_present_flag) };
            pps_scaling_list_data_present_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let lists_modification_present_flag: u32 =
                unsafe { ::std::mem::transmute(lists_modification_present_flag) };
            lists_modification_present_flag as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let slice_segment_header_extension_present_flag: u32 =
                unsafe { ::std::mem::transmute(slice_segment_header_extension_present_flag) };
            slice_segment_header_extension_present_flag as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let pps_extension_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_extension_present_flag) };
            pps_extension_present_flag as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let cross_component_prediction_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cross_component_prediction_enabled_flag) };
            cross_component_prediction_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let chroma_qp_offset_list_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(chroma_qp_offset_list_enabled_flag) };
            chroma_qp_offset_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let pps_curr_pic_ref_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_curr_pic_ref_enabled_flag) };
            pps_curr_pic_ref_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let residual_adaptive_colour_transform_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(residual_adaptive_colour_transform_enabled_flag) };
            residual_adaptive_colour_transform_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let pps_slice_act_qp_offsets_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_slice_act_qp_offsets_present_flag) };
            pps_slice_act_qp_offsets_present_flag as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let pps_palette_predictor_initializers_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_palette_predictor_initializers_present_flag) };
            pps_palette_predictor_initializers_present_flag as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let monochrome_palette_flag: u32 =
                unsafe { ::std::mem::transmute(monochrome_palette_flag) };
            monochrome_palette_flag as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let pps_range_extension_flag: u32 =
                unsafe { ::std::mem::transmute(pps_range_extension_flag) };
            pps_range_extension_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoH265PictureParameterSet {
    pub flags: StdVideoH265PpsFlags,
    pub pps_pic_parameter_set_id: u8,
    pub pps_seq_parameter_set_id: u8,
    pub sps_video_parameter_set_id: u8,
    pub num_extra_slice_header_bits: u8,
    pub num_ref_idx_l0_default_active_minus1: u8,
    pub num_ref_idx_l1_default_active_minus1: u8,
    pub init_qp_minus26: i8,
    pub diff_cu_qp_delta_depth: u8,
    pub pps_cb_qp_offset: i8,
    pub pps_cr_qp_offset: i8,
    pub pps_beta_offset_div2: i8,
    pub pps_tc_offset_div2: i8,
    pub log2_parallel_merge_level_minus2: u8,
    pub log2_max_transform_skip_block_size_minus2: u8,
    pub diff_cu_chroma_qp_offset_depth: u8,
    pub chroma_qp_offset_list_len_minus1: u8,
    pub cb_qp_offset_list: [i8; 6usize],
    pub cr_qp_offset_list: [i8; 6usize],
    pub log2_sao_offset_scale_luma: u8,
    pub log2_sao_offset_scale_chroma: u8,
    pub pps_act_y_qp_offset_plus5: i8,
    pub pps_act_cb_qp_offset_plus5: i8,
    pub pps_act_cr_qp_offset_plus3: i8,
    pub pps_num_palette_predictor_initializers: u8,
    pub luma_bit_depth_entry_minus8: u8,
    pub chroma_bit_depth_entry_minus8: u8,
    pub num_tile_columns_minus1: u8,
    pub num_tile_rows_minus1: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub column_width_minus1: [u16; 19usize],
    pub row_height_minus1: [u16; 21usize],
    pub reserved3: u32,
    pub pScalingLists: *const StdVideoH265ScalingLists,
    pub pPredictorPaletteEntries: *const StdVideoH265PredictorPaletteEntries,
}
#[test]
fn bindgen_test_layout_StdVideoH265PictureParameterSet() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoH265PictureParameterSet> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoH265PictureParameterSet>(),
        144usize,
        concat!("Size of: ", stringify!(StdVideoH265PictureParameterSet))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoH265PictureParameterSet>(),
        8usize,
        concat!("Alignment of ", stringify!(StdVideoH265PictureParameterSet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_pic_parameter_set_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pps_pic_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_seq_parameter_set_id) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pps_seq_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sps_video_parameter_set_id) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(sps_video_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_extra_slice_header_bits) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(num_extra_slice_header_bits)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ref_idx_l0_default_active_minus1) as usize
                - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(num_ref_idx_l0_default_active_minus1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).num_ref_idx_l1_default_active_minus1) as usize
                - ptr as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(num_ref_idx_l1_default_active_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_qp_minus26) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(init_qp_minus26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diff_cu_qp_delta_depth) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(diff_cu_qp_delta_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_cb_qp_offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pps_cb_qp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_cr_qp_offset) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pps_cr_qp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_beta_offset_div2) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pps_beta_offset_div2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_tc_offset_div2) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pps_tc_offset_div2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_parallel_merge_level_minus2) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(log2_parallel_merge_level_minus2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_max_transform_skip_block_size_minus2) as usize
                - ptr as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(log2_max_transform_skip_block_size_minus2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).diff_cu_chroma_qp_offset_depth) as usize - ptr as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(diff_cu_chroma_qp_offset_depth)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chroma_qp_offset_list_len_minus1) as usize - ptr as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(chroma_qp_offset_list_len_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_qp_offset_list) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(cb_qp_offset_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cr_qp_offset_list) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(cr_qp_offset_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log2_sao_offset_scale_luma) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(log2_sao_offset_scale_luma)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).log2_sao_offset_scale_chroma) as usize - ptr as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(log2_sao_offset_scale_chroma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_act_y_qp_offset_plus5) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pps_act_y_qp_offset_plus5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_act_cb_qp_offset_plus5) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pps_act_cb_qp_offset_plus5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_act_cr_qp_offset_plus3) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pps_act_cr_qp_offset_plus3)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pps_num_palette_predictor_initializers) as usize
                - ptr as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pps_num_palette_predictor_initializers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).luma_bit_depth_entry_minus8) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(luma_bit_depth_entry_minus8)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).chroma_bit_depth_entry_minus8) as usize - ptr as usize
        },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(chroma_bit_depth_entry_minus8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_tile_columns_minus1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(num_tile_columns_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_tile_rows_minus1) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(num_tile_rows_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).column_width_minus1) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(column_width_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).row_height_minus1) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(row_height_minus1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pScalingLists) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pScalingLists)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPredictorPaletteEntries) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoH265PictureParameterSet),
            "::",
            stringify!(pPredictorPaletteEntries)
        )
    );
}
impl Default for StdVideoH265PictureParameterSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoDecodeH265PictureInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_StdVideoDecodeH265PictureInfoFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoDecodeH265PictureInfoFlags>(),
        4usize,
        concat!("Size of: ", stringify!(StdVideoDecodeH265PictureInfoFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoDecodeH265PictureInfoFlags>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoDecodeH265PictureInfoFlags)
        )
    );
}
impl StdVideoDecodeH265PictureInfoFlags {
    #[inline]
    pub fn IrapPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IrapPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IdrPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IdrPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IsReference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IsReference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn short_term_ref_pic_set_sps_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_short_term_ref_pic_set_sps_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        IrapPicFlag: u32,
        IdrPicFlag: u32,
        IsReference: u32,
        short_term_ref_pic_set_sps_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let IrapPicFlag: u32 = unsafe { ::std::mem::transmute(IrapPicFlag) };
            IrapPicFlag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let IdrPicFlag: u32 = unsafe { ::std::mem::transmute(IdrPicFlag) };
            IdrPicFlag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IsReference: u32 = unsafe { ::std::mem::transmute(IsReference) };
            IsReference as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let short_term_ref_pic_set_sps_flag: u32 =
                unsafe { ::std::mem::transmute(short_term_ref_pic_set_sps_flag) };
            short_term_ref_pic_set_sps_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoDecodeH265PictureInfo {
    pub flags: StdVideoDecodeH265PictureInfoFlags,
    pub sps_video_parameter_set_id: u8,
    pub pps_seq_parameter_set_id: u8,
    pub pps_pic_parameter_set_id: u8,
    pub NumDeltaPocsOfRefRpsIdx: u8,
    pub PicOrderCntVal: i32,
    pub NumBitsForSTRefPicSetInSlice: u16,
    pub reserved: u16,
    pub RefPicSetStCurrBefore: [u8; 8usize],
    pub RefPicSetStCurrAfter: [u8; 8usize],
    pub RefPicSetLtCurr: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_StdVideoDecodeH265PictureInfo() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoDecodeH265PictureInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoDecodeH265PictureInfo>(),
        40usize,
        concat!("Size of: ", stringify!(StdVideoDecodeH265PictureInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoDecodeH265PictureInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoDecodeH265PictureInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sps_video_parameter_set_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(sps_video_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_seq_parameter_set_id) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(pps_seq_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pps_pic_parameter_set_id) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(pps_pic_parameter_set_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NumDeltaPocsOfRefRpsIdx) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(NumDeltaPocsOfRefRpsIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PicOrderCntVal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(PicOrderCntVal)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).NumBitsForSTRefPicSetInSlice) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(NumBitsForSTRefPicSetInSlice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefPicSetStCurrBefore) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(RefPicSetStCurrBefore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefPicSetStCurrAfter) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(RefPicSetStCurrAfter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RefPicSetLtCurr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265PictureInfo),
            "::",
            stringify!(RefPicSetLtCurr)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoDecodeH265ReferenceInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_StdVideoDecodeH265ReferenceInfoFlags() {
    assert_eq!(
        ::std::mem::size_of::<StdVideoDecodeH265ReferenceInfoFlags>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(StdVideoDecodeH265ReferenceInfoFlags)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoDecodeH265ReferenceInfoFlags>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(StdVideoDecodeH265ReferenceInfoFlags)
        )
    );
}
impl StdVideoDecodeH265ReferenceInfoFlags {
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused_for_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unused_for_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        used_for_long_term_reference: u32,
        unused_for_reference: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::std::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let unused_for_reference: u32 = unsafe { ::std::mem::transmute(unused_for_reference) };
            unused_for_reference as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct StdVideoDecodeH265ReferenceInfo {
    pub flags: StdVideoDecodeH265ReferenceInfoFlags,
    pub PicOrderCntVal: i32,
}
#[test]
fn bindgen_test_layout_StdVideoDecodeH265ReferenceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<StdVideoDecodeH265ReferenceInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<StdVideoDecodeH265ReferenceInfo>(),
        8usize,
        concat!("Size of: ", stringify!(StdVideoDecodeH265ReferenceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<StdVideoDecodeH265ReferenceInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(StdVideoDecodeH265ReferenceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265ReferenceInfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PicOrderCntVal) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(StdVideoDecodeH265ReferenceInfo),
            "::",
            stringify!(PicOrderCntVal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH265ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdProfileIdc: StdVideoH265ProfileIdc,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH265ProfileInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH265ProfileInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH265ProfileInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkVideoDecodeH265ProfileInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH265ProfileInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoDecodeH265ProfileInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265ProfileInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265ProfileInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdProfileIdc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265ProfileInfoKHR),
            "::",
            stringify!(stdProfileIdc)
        )
    );
}
impl Default for VkVideoDecodeH265ProfileInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH265CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxLevelIdc: StdVideoH265LevelIdc,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH265CapabilitiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH265CapabilitiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH265CapabilitiesKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkVideoDecodeH265CapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH265CapabilitiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVideoDecodeH265CapabilitiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265CapabilitiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265CapabilitiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxLevelIdc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265CapabilitiesKHR),
            "::",
            stringify!(maxLevelIdc)
        )
    );
}
impl Default for VkVideoDecodeH265CapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH265SessionParametersAddInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdVPSCount: u32,
    pub pStdVPSs: *const StdVideoH265VideoParameterSet,
    pub stdSPSCount: u32,
    pub pStdSPSs: *const StdVideoH265SequenceParameterSet,
    pub stdPPSCount: u32,
    pub pStdPPSs: *const StdVideoH265PictureParameterSet,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH265SessionParametersAddInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH265SessionParametersAddInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH265SessionParametersAddInfoKHR>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkVideoDecodeH265SessionParametersAddInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH265SessionParametersAddInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVideoDecodeH265SessionParametersAddInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersAddInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersAddInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdVPSCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersAddInfoKHR),
            "::",
            stringify!(stdVPSCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStdVPSs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersAddInfoKHR),
            "::",
            stringify!(pStdVPSs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdSPSCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersAddInfoKHR),
            "::",
            stringify!(stdSPSCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStdSPSs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersAddInfoKHR),
            "::",
            stringify!(pStdSPSs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stdPPSCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersAddInfoKHR),
            "::",
            stringify!(stdPPSCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStdPPSs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersAddInfoKHR),
            "::",
            stringify!(pStdPPSs)
        )
    );
}
impl Default for VkVideoDecodeH265SessionParametersAddInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH265SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxStdVPSCount: u32,
    pub maxStdSPSCount: u32,
    pub maxStdPPSCount: u32,
    pub pParametersAddInfo: *const VkVideoDecodeH265SessionParametersAddInfoKHR,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH265SessionParametersCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH265SessionParametersCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH265SessionParametersCreateInfoKHR>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkVideoDecodeH265SessionParametersCreateInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH265SessionParametersCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVideoDecodeH265SessionParametersCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxStdVPSCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersCreateInfoKHR),
            "::",
            stringify!(maxStdVPSCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxStdSPSCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersCreateInfoKHR),
            "::",
            stringify!(maxStdSPSCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxStdPPSCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersCreateInfoKHR),
            "::",
            stringify!(maxStdPPSCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pParametersAddInfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265SessionParametersCreateInfoKHR),
            "::",
            stringify!(pParametersAddInfo)
        )
    );
}
impl Default for VkVideoDecodeH265SessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH265PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdPictureInfo: *mut StdVideoDecodeH265PictureInfo,
    pub sliceSegmentCount: u32,
    pub pSliceSegmentOffsets: *const u32,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH265PictureInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH265PictureInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH265PictureInfoKHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkVideoDecodeH265PictureInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH265PictureInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoDecodeH265PictureInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265PictureInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265PictureInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStdPictureInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265PictureInfoKHR),
            "::",
            stringify!(pStdPictureInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sliceSegmentCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265PictureInfoKHR),
            "::",
            stringify!(sliceSegmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSliceSegmentOffsets) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265PictureInfoKHR),
            "::",
            stringify!(pSliceSegmentOffsets)
        )
    );
}
impl Default for VkVideoDecodeH265PictureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVideoDecodeH265DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdReferenceInfo: *const StdVideoDecodeH265ReferenceInfo,
}
#[test]
fn bindgen_test_layout_VkVideoDecodeH265DpbSlotInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkVideoDecodeH265DpbSlotInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVideoDecodeH265DpbSlotInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkVideoDecodeH265DpbSlotInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVideoDecodeH265DpbSlotInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkVideoDecodeH265DpbSlotInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265DpbSlotInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265DpbSlotInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStdReferenceInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVideoDecodeH265DpbSlotInfoKHR),
            "::",
            stringify!(pStdReferenceInfo)
        )
    );
}
impl Default for VkVideoDecodeH265DpbSlotInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl VkQueueGlobalPriorityKHR {
    pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: VkQueueGlobalPriorityKHR =
        VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR;
}
impl VkQueueGlobalPriorityKHR {
    pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: VkQueueGlobalPriorityKHR =
        VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR;
}
impl VkQueueGlobalPriorityKHR {
    pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: VkQueueGlobalPriorityKHR =
        VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR;
}
impl VkQueueGlobalPriorityKHR {
    pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: VkQueueGlobalPriorityKHR =
        VkQueueGlobalPriorityKHR::VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkQueueGlobalPriorityKHR {
    VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024,
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceQueueGlobalPriorityCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub globalPriority: VkQueueGlobalPriorityKHR,
}
#[test]
fn bindgen_test_layout_VkDeviceQueueGlobalPriorityCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceQueueGlobalPriorityCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceQueueGlobalPriorityCreateInfoKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceQueueGlobalPriorityCreateInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceQueueGlobalPriorityCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceQueueGlobalPriorityCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueGlobalPriorityCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueGlobalPriorityCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalPriority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceQueueGlobalPriorityCreateInfoKHR),
            "::",
            stringify!(globalPriority)
        )
    );
}
impl Default for VkDeviceQueueGlobalPriorityCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub globalPriorityQuery: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalPriorityQuery) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR),
            "::",
            stringify!(globalPriorityQuery)
        )
    );
}
impl Default for VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueueFamilyGlobalPriorityPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub priorityCount: u32,
    pub priorities: [VkQueueGlobalPriorityKHR; 16usize],
}
#[test]
fn bindgen_test_layout_VkQueueFamilyGlobalPriorityPropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueueFamilyGlobalPriorityPropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueueFamilyGlobalPriorityPropertiesKHR>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(VkQueueFamilyGlobalPriorityPropertiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueueFamilyGlobalPriorityPropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkQueueFamilyGlobalPriorityPropertiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyGlobalPriorityPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyGlobalPriorityPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priorityCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyGlobalPriorityPropertiesKHR),
            "::",
            stringify!(priorityCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priorities) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyGlobalPriorityPropertiesKHR),
            "::",
            stringify!(priorities)
        )
    );
}
impl Default for VkQueueFamilyGlobalPriorityPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::VkDriverId as VkDriverIdKHR;
pub type VkConformanceVersionKHR = VkConformanceVersion;
pub type VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;
pub use self::VkShaderFloatControlsIndependence as VkShaderFloatControlsIndependenceKHR;
pub type VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;
pub use self::VkResolveModeFlagBits as VkResolveModeFlagBitsKHR;
pub type VkResolveModeFlagsKHR = VkResolveModeFlags;
pub type VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;
pub type VkPhysicalDeviceDepthStencilResolvePropertiesKHR =
    VkPhysicalDeviceDepthStencilResolveProperties;
pub use self::VkSemaphoreType as VkSemaphoreTypeKHR;
pub use self::VkSemaphoreWaitFlagBits as VkSemaphoreWaitFlagBitsKHR;
pub type VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;
pub type VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;
pub type VkPhysicalDeviceTimelineSemaphorePropertiesKHR =
    VkPhysicalDeviceTimelineSemaphoreProperties;
pub type VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;
pub type VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;
pub type VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;
pub type VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;
pub type PFN_vkGetSemaphoreCounterValueKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, semaphore: VkSemaphore, pValue: *mut u64) -> VkResult,
>;
pub type PFN_vkWaitSemaphoresKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkSignalSemaphoreKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pSignalInfo: *const VkSemaphoreSignalInfo) -> VkResult,
>;
extern "system" {
    pub fn vkGetSemaphoreCounterValueKHR(
        device: VkDevice,
        semaphore: VkSemaphore,
        pValue: *mut u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkWaitSemaphoresKHR(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkSignalSemaphoreKHR(
        device: VkDevice,
        pSignalInfo: *const VkSemaphoreSignalInfo,
    ) -> VkResult;
}
pub type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;
pub type VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR =
    VkPhysicalDeviceShaderTerminateInvocationFeatures;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkFragmentShadingRateCombinerOpKHR {
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFragmentShadingRateAttachmentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pFragmentShadingRateAttachment: *const VkAttachmentReference2,
    pub shadingRateAttachmentTexelSize: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkFragmentShadingRateAttachmentInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkFragmentShadingRateAttachmentInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFragmentShadingRateAttachmentInfoKHR>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkFragmentShadingRateAttachmentInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkFragmentShadingRateAttachmentInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkFragmentShadingRateAttachmentInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFragmentShadingRateAttachmentInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFragmentShadingRateAttachmentInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pFragmentShadingRateAttachment) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFragmentShadingRateAttachmentInfoKHR),
            "::",
            stringify!(pFragmentShadingRateAttachment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shadingRateAttachmentTexelSize) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFragmentShadingRateAttachmentInfoKHR),
            "::",
            stringify!(shadingRateAttachmentTexelSize)
        )
    );
}
impl Default for VkFragmentShadingRateAttachmentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineFragmentShadingRateStateCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fragmentSize: VkExtent2D,
    pub combinerOps: [VkFragmentShadingRateCombinerOpKHR; 2usize],
}
#[test]
fn bindgen_test_layout_VkPipelineFragmentShadingRateStateCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineFragmentShadingRateStateCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineFragmentShadingRateStateCreateInfoKHR>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineFragmentShadingRateStateCreateInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineFragmentShadingRateStateCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineFragmentShadingRateStateCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineFragmentShadingRateStateCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineFragmentShadingRateStateCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineFragmentShadingRateStateCreateInfoKHR),
            "::",
            stringify!(fragmentSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).combinerOps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineFragmentShadingRateStateCreateInfoKHR),
            "::",
            stringify!(combinerOps)
        )
    );
}
impl Default for VkPipelineFragmentShadingRateStateCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineFragmentShadingRate: VkBool32,
    pub primitiveFragmentShadingRate: VkBool32,
    pub attachmentFragmentShadingRate: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentShadingRateFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentShadingRateFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentShadingRateFeaturesKHR>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentShadingRateFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineFragmentShadingRate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR),
            "::",
            stringify!(pipelineFragmentShadingRate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).primitiveFragmentShadingRate) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR),
            "::",
            stringify!(primitiveFragmentShadingRate)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attachmentFragmentShadingRate) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR),
            "::",
            stringify!(attachmentFragmentShadingRate)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minFragmentShadingRateAttachmentTexelSize: VkExtent2D,
    pub maxFragmentShadingRateAttachmentTexelSize: VkExtent2D,
    pub maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32,
    pub primitiveFragmentShadingRateWithMultipleViewports: VkBool32,
    pub layeredShadingRateAttachments: VkBool32,
    pub fragmentShadingRateNonTrivialCombinerOps: VkBool32,
    pub maxFragmentSize: VkExtent2D,
    pub maxFragmentSizeAspectRatio: u32,
    pub maxFragmentShadingRateCoverageSamples: u32,
    pub maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits,
    pub fragmentShadingRateWithShaderDepthStencilWrites: VkBool32,
    pub fragmentShadingRateWithSampleMask: VkBool32,
    pub fragmentShadingRateWithShaderSampleMask: VkBool32,
    pub fragmentShadingRateWithConservativeRasterization: VkBool32,
    pub fragmentShadingRateWithFragmentShaderInterlock: VkBool32,
    pub fragmentShadingRateWithCustomSampleLocations: VkBool32,
    pub fragmentShadingRateStrictMultiplyCombiner: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentShadingRatePropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentShadingRatePropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minFragmentShadingRateAttachmentTexelSize) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(minFragmentShadingRateAttachmentTexelSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxFragmentShadingRateAttachmentTexelSize) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(maxFragmentShadingRateAttachmentTexelSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxFragmentShadingRateAttachmentTexelSizeAspectRatio)
                as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(maxFragmentShadingRateAttachmentTexelSizeAspectRatio)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).primitiveFragmentShadingRateWithMultipleViewports) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(primitiveFragmentShadingRateWithMultipleViewports)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).layeredShadingRateAttachments) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(layeredShadingRateAttachments)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShadingRateNonTrivialCombinerOps) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(fragmentShadingRateNonTrivialCombinerOps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFragmentSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(maxFragmentSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFragmentSizeAspectRatio) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(maxFragmentSizeAspectRatio)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxFragmentShadingRateCoverageSamples) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(maxFragmentShadingRateCoverageSamples)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxFragmentShadingRateRasterizationSamples) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(maxFragmentShadingRateRasterizationSamples)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShadingRateWithShaderDepthStencilWrites) as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(fragmentShadingRateWithShaderDepthStencilWrites)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShadingRateWithSampleMask) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(fragmentShadingRateWithSampleMask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShadingRateWithShaderSampleMask) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(fragmentShadingRateWithShaderSampleMask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShadingRateWithConservativeRasterization) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(fragmentShadingRateWithConservativeRasterization)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShadingRateWithFragmentShaderInterlock) as usize
                - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(fragmentShadingRateWithFragmentShaderInterlock)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShadingRateWithCustomSampleLocations) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(fragmentShadingRateWithCustomSampleLocations)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShadingRateStrictMultiplyCombiner) as usize
                - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR),
            "::",
            stringify!(fragmentShadingRateStrictMultiplyCombiner)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentShadingRateKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub sampleCounts: VkSampleCountFlags,
    pub fragmentSize: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentShadingRateKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentShadingRateKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentShadingRateKHR>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentShadingRateKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentShadingRateKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleCounts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateKHR),
            "::",
            stringify!(sampleCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateKHR),
            "::",
            stringify!(fragmentSize)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentShadingRateKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFragmentShadingRateCount: *mut u32,
        pFragmentShadingRates: *mut VkPhysicalDeviceFragmentShadingRateKHR,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetFragmentShadingRateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pFragmentSize: *const VkExtent2D,
        combinerOps: *const VkFragmentShadingRateCombinerOpKHR,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceFragmentShadingRatesKHR(
        physicalDevice: VkPhysicalDevice,
        pFragmentShadingRateCount: *mut u32,
        pFragmentShadingRates: *mut VkPhysicalDeviceFragmentShadingRateKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdSetFragmentShadingRateKHR(
        commandBuffer: VkCommandBuffer,
        pFragmentSize: *const VkExtent2D,
        combinerOps: *const VkFragmentShadingRateCombinerOpKHR,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSurfaceProtectedCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub supportsProtected: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSurfaceProtectedCapabilitiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkSurfaceProtectedCapabilitiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceProtectedCapabilitiesKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkSurfaceProtectedCapabilitiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceProtectedCapabilitiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSurfaceProtectedCapabilitiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceProtectedCapabilitiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceProtectedCapabilitiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsProtected) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceProtectedCapabilitiesKHR),
            "::",
            stringify!(supportsProtected)
        )
    );
}
impl Default for VkSurfaceProtectedCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR =
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub type VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;
pub type VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePresentWaitFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentWait: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePresentWaitFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePresentWaitFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePresentWaitFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePresentWaitFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePresentWaitFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePresentWaitFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePresentWaitFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePresentWaitFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentWait) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePresentWaitFeaturesKHR),
            "::",
            stringify!(presentWait)
        )
    );
}
impl Default for VkPhysicalDevicePresentWaitFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkWaitForPresentKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        presentId: u64,
        timeout: u64,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkWaitForPresentKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        presentId: u64,
        timeout: u64,
    ) -> VkResult;
}
pub type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR =
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub type VkPhysicalDeviceBufferDeviceAddressFeaturesKHR =
    VkPhysicalDeviceBufferDeviceAddressFeatures;
pub type VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;
pub type VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;
pub type VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;
pub type VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;
pub type PFN_vkGetBufferDeviceAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkGetBufferOpaqueCaptureAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> u64,
>;
pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64,
>;
extern "system" {
    pub fn vkGetBufferDeviceAddressKHR(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress;
}
extern "system" {
    pub fn vkGetBufferOpaqueCaptureAddressKHR(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> u64;
}
extern "system" {
    pub fn vkGetDeviceMemoryOpaqueCaptureAddressKHR(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDeferredOperationKHR_T {
    _unused: [u8; 0],
}
pub type VkDeferredOperationKHR = *mut VkDeferredOperationKHR_T;
pub type PFN_vkCreateDeferredOperationKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocator: *const VkAllocationCallbacks,
        pDeferredOperation: *mut VkDeferredOperationKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDeferredOperationKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetDeferredOperationMaxConcurrencyKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, operation: VkDeferredOperationKHR) -> u32,
>;
pub type PFN_vkGetDeferredOperationResultKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, operation: VkDeferredOperationKHR) -> VkResult,
>;
pub type PFN_vkDeferredOperationJoinKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, operation: VkDeferredOperationKHR) -> VkResult,
>;
extern "system" {
    pub fn vkCreateDeferredOperationKHR(
        device: VkDevice,
        pAllocator: *const VkAllocationCallbacks,
        pDeferredOperation: *mut VkDeferredOperationKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDeferredOperationKHR(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetDeferredOperationMaxConcurrencyKHR(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
    ) -> u32;
}
extern "system" {
    pub fn vkGetDeferredOperationResultKHR(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDeferredOperationJoinKHR(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
    ) -> VkResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineExecutableStatisticFormatKHR {
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineExecutableInfo: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineExecutableInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR),
            "::",
            stringify!(pipelineExecutableInfo)
        )
    );
}
impl Default for VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipeline: VkPipeline,
}
#[test]
fn bindgen_test_layout_VkPipelineInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineInfoKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineInfoKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkPipelineInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineInfoKHR),
            "::",
            stringify!(pipeline)
        )
    );
}
impl Default for VkPipelineInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineExecutablePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stages: VkShaderStageFlags,
    pub name: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub subgroupSize: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineExecutablePropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineExecutablePropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineExecutablePropertiesKHR>(),
        536usize,
        concat!("Size of: ", stringify!(VkPipelineExecutablePropertiesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineExecutablePropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineExecutablePropertiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stages) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(stages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subgroupSize) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutablePropertiesKHR),
            "::",
            stringify!(subgroupSize)
        )
    );
}
impl Default for VkPipelineExecutablePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineExecutableInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipeline: VkPipeline,
    pub executableIndex: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineExecutableInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineExecutableInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineExecutableInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelineExecutableInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineExecutableInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineExecutableInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInfoKHR),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).executableIndex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInfoKHR),
            "::",
            stringify!(executableIndex)
        )
    );
}
impl Default for VkPipelineExecutableInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPipelineExecutableStatisticValueKHR {
    pub b32: VkBool32,
    pub i64_: i64,
    pub u64_: u64,
    pub f64_: f64,
}
#[test]
fn bindgen_test_layout_VkPipelineExecutableStatisticValueKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineExecutableStatisticValueKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineExecutableStatisticValueKHR>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineExecutableStatisticValueKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineExecutableStatisticValueKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineExecutableStatisticValueKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticValueKHR),
            "::",
            stringify!(b32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i64_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticValueKHR),
            "::",
            stringify!(i64_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u64_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticValueKHR),
            "::",
            stringify!(u64_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f64_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticValueKHR),
            "::",
            stringify!(f64_)
        )
    );
}
impl Default for VkPipelineExecutableStatisticValueKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableStatisticKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub format: VkPipelineExecutableStatisticFormatKHR,
    pub value: VkPipelineExecutableStatisticValueKHR,
}
#[test]
fn bindgen_test_layout_VkPipelineExecutableStatisticKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineExecutableStatisticKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineExecutableStatisticKHR>(),
        544usize,
        concat!("Size of: ", stringify!(VkPipelineExecutableStatisticKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineExecutableStatisticKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineExecutableStatisticKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableStatisticKHR),
            "::",
            stringify!(value)
        )
    );
}
impl Default for VkPipelineExecutableStatisticKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineExecutableInternalRepresentationKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub isText: VkBool32,
    pub dataSize: usize,
    pub pData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkPipelineExecutableInternalRepresentationKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineExecutableInternalRepresentationKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineExecutableInternalRepresentationKHR>(),
        552usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineExecutableInternalRepresentationKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isText) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(isText)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSize) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineExecutableInternalRepresentationKHR),
            "::",
            stringify!(pData)
        )
    );
}
impl Default for VkPipelineExecutableInternalRepresentationKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPipelineExecutablePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoKHR,
        pExecutableCount: *mut u32,
        pProperties: *mut VkPipelineExecutablePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPipelineExecutableStatisticsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pStatisticCount: *mut u32,
        pStatistics: *mut VkPipelineExecutableStatisticKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pInternalRepresentationCount: *mut u32,
        pInternalRepresentations: *mut VkPipelineExecutableInternalRepresentationKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPipelineExecutablePropertiesKHR(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoKHR,
        pExecutableCount: *mut u32,
        pProperties: *mut VkPipelineExecutablePropertiesKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPipelineExecutableStatisticsKHR(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pStatisticCount: *mut u32,
        pStatistics: *mut VkPipelineExecutableStatisticKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPipelineExecutableInternalRepresentationsKHR(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pInternalRepresentationCount: *mut u32,
        pInternalRepresentations: *mut VkPipelineExecutableInternalRepresentationKHR,
    ) -> VkResult;
}
pub type VkMemoryUnmapFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryMapInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkMemoryMapFlags,
    pub memory: VkDeviceMemory,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkMemoryMapInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryMapInfoKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryMapInfoKHR>(),
        48usize,
        concat!("Size of: ", stringify!(VkMemoryMapInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryMapInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryMapInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryMapInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryMapInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryMapInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryMapInfoKHR),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryMapInfoKHR),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryMapInfoKHR),
            "::",
            stringify!(size)
        )
    );
}
impl Default for VkMemoryMapInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryUnmapInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkMemoryUnmapFlagsKHR,
    pub memory: VkDeviceMemory,
}
#[test]
fn bindgen_test_layout_VkMemoryUnmapInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryUnmapInfoKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryUnmapInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkMemoryUnmapInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryUnmapInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryUnmapInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryUnmapInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryUnmapInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryUnmapInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryUnmapInfoKHR),
            "::",
            stringify!(memory)
        )
    );
}
impl Default for VkMemoryUnmapInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkMapMemory2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pMemoryMapInfo: *const VkMemoryMapInfoKHR,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkUnmapMemory2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pMemoryUnmapInfo: *const VkMemoryUnmapInfoKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkMapMemory2KHR(
        device: VkDevice,
        pMemoryMapInfo: *const VkMemoryMapInfoKHR,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkUnmapMemory2KHR(
        device: VkDevice,
        pMemoryUnmapInfo: *const VkMemoryUnmapInfoKHR,
    ) -> VkResult;
}
pub type VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR =
    VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub type VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR =
    VkPhysicalDeviceShaderIntegerDotProductProperties;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineLibraryCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub libraryCount: u32,
    pub pLibraries: *const VkPipeline,
}
#[test]
fn bindgen_test_layout_VkPipelineLibraryCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineLibraryCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineLibraryCreateInfoKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelineLibraryCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineLibraryCreateInfoKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPipelineLibraryCreateInfoKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLibraryCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLibraryCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).libraryCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLibraryCreateInfoKHR),
            "::",
            stringify!(libraryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLibraries) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineLibraryCreateInfoKHR),
            "::",
            stringify!(pLibraries)
        )
    );
}
impl Default for VkPipelineLibraryCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPresentIdKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pPresentIds: *const u64,
}
#[test]
fn bindgen_test_layout_VkPresentIdKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPresentIdKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPresentIdKHR>(),
        32usize,
        concat!("Size of: ", stringify!(VkPresentIdKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentIdKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentIdKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentIdKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentIdKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchainCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentIdKHR),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPresentIds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentIdKHR),
            "::",
            stringify!(pPresentIds)
        )
    );
}
impl Default for VkPresentIdKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePresentIdFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentId: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePresentIdFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePresentIdFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePresentIdFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePresentIdFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePresentIdFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePresentIdFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePresentIdFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePresentIdFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePresentIdFeaturesKHR),
            "::",
            stringify!(presentId)
        )
    );
}
impl Default for VkPhysicalDevicePresentIdFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPipelineStageFlags2KHR = VkPipelineStageFlags2;
pub type VkPipelineStageFlagBits2KHR = VkPipelineStageFlagBits2;
pub type VkAccessFlags2KHR = VkAccessFlags2;
pub type VkAccessFlagBits2KHR = VkAccessFlagBits2;
pub use self::VkSubmitFlagBits as VkSubmitFlagBitsKHR;
pub type VkSubmitFlagsKHR = VkSubmitFlags;
pub type VkMemoryBarrier2KHR = VkMemoryBarrier2;
pub type VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2;
pub type VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2;
pub type VkDependencyInfoKHR = VkDependencyInfo;
pub type VkSubmitInfo2KHR = VkSubmitInfo2;
pub type VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo;
pub type VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo;
pub type VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueueFamilyCheckpointProperties2NV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub checkpointExecutionStageMask: VkPipelineStageFlags2,
}
#[test]
fn bindgen_test_layout_VkQueueFamilyCheckpointProperties2NV() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueueFamilyCheckpointProperties2NV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueueFamilyCheckpointProperties2NV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkQueueFamilyCheckpointProperties2NV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueueFamilyCheckpointProperties2NV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkQueueFamilyCheckpointProperties2NV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyCheckpointProperties2NV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyCheckpointProperties2NV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).checkpointExecutionStageMask) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyCheckpointProperties2NV),
            "::",
            stringify!(checkpointExecutionStageMask)
        )
    );
}
impl Default for VkQueueFamilyCheckpointProperties2NV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCheckpointData2NV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stage: VkPipelineStageFlags2,
    pub pCheckpointMarker: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkCheckpointData2NV() {
    const UNINIT: ::std::mem::MaybeUninit<VkCheckpointData2NV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCheckpointData2NV>(),
        32usize,
        concat!("Size of: ", stringify!(VkCheckpointData2NV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCheckpointData2NV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCheckpointData2NV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointData2NV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointData2NV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointData2NV),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCheckpointMarker) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointData2NV),
            "::",
            stringify!(pCheckpointMarker)
        )
    );
}
impl Default for VkCheckpointData2NV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetEvent2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        pDependencyInfo: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdResetEvent2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags2,
    ),
>;
pub type PFN_vkCmdWaitEvents2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        pDependencyInfos: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdPipelineBarrier2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pDependencyInfo: *const VkDependencyInfo),
>;
pub type PFN_vkCmdWriteTimestamp2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        queryPool: VkQueryPool,
        query: u32,
    ),
>;
pub type PFN_vkQueueSubmit2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo2,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkCmdWriteBufferMarker2AMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    ),
>;
pub type PFN_vkGetQueueCheckpointData2NV = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointData2NV,
    ),
>;
extern "system" {
    pub fn vkCmdSetEvent2KHR(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        pDependencyInfo: *const VkDependencyInfo,
    );
}
extern "system" {
    pub fn vkCmdResetEvent2KHR(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags2,
    );
}
extern "system" {
    pub fn vkCmdWaitEvents2KHR(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        pDependencyInfos: *const VkDependencyInfo,
    );
}
extern "system" {
    pub fn vkCmdPipelineBarrier2KHR(
        commandBuffer: VkCommandBuffer,
        pDependencyInfo: *const VkDependencyInfo,
    );
}
extern "system" {
    pub fn vkCmdWriteTimestamp2KHR(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        queryPool: VkQueryPool,
        query: u32,
    );
}
extern "system" {
    pub fn vkQueueSubmit2KHR(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo2,
        fence: VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdWriteBufferMarker2AMD(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    );
}
extern "system" {
    pub fn vkGetQueueCheckpointData2NV(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointData2NV,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentShaderBarycentric: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentShaderBarycentric) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR),
            "::",
            stringify!(fragmentShaderBarycentric)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub triStripVertexOrderIndependentOfProvokingVertex: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).triStripVertexOrderIndependentOfProvokingVertex) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR),
            "::",
            stringify!(triStripVertexOrderIndependentOfProvokingVertex)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSubgroupUniformControlFlow: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<
        VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSubgroupUniformControlFlow) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR),
            "::",
            stringify!(shaderSubgroupUniformControlFlow)
        )
    );
}
impl Default for VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR =
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub workgroupMemoryExplicitLayout: VkBool32,
    pub workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32,
    pub workgroupMemoryExplicitLayout8BitAccess: VkBool32,
    pub workgroupMemoryExplicitLayout16BitAccess: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<
        VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).workgroupMemoryExplicitLayout) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR),
            "::",
            stringify!(workgroupMemoryExplicitLayout)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).workgroupMemoryExplicitLayoutScalarBlockLayout) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR),
            "::",
            stringify!(workgroupMemoryExplicitLayoutScalarBlockLayout)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).workgroupMemoryExplicitLayout8BitAccess) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR),
            "::",
            stringify!(workgroupMemoryExplicitLayout8BitAccess)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).workgroupMemoryExplicitLayout16BitAccess) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR),
            "::",
            stringify!(workgroupMemoryExplicitLayout16BitAccess)
        )
    );
}
impl Default for VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkCopyBufferInfo2KHR = VkCopyBufferInfo2;
pub type VkCopyImageInfo2KHR = VkCopyImageInfo2;
pub type VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2;
pub type VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2;
pub type VkBlitImageInfo2KHR = VkBlitImageInfo2;
pub type VkResolveImageInfo2KHR = VkResolveImageInfo2;
pub type VkBufferCopy2KHR = VkBufferCopy2;
pub type VkImageCopy2KHR = VkImageCopy2;
pub type VkImageBlit2KHR = VkImageBlit2;
pub type VkBufferImageCopy2KHR = VkBufferImageCopy2;
pub type VkImageResolve2KHR = VkImageResolve2;
pub type PFN_vkCmdCopyBuffer2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pCopyBufferInfo: *const VkCopyBufferInfo2),
>;
pub type PFN_vkCmdCopyImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pCopyImageInfo: *const VkCopyImageInfo2),
>;
pub type PFN_vkCmdCopyBufferToImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCopyBufferToImageInfo: *const VkCopyBufferToImageInfo2,
    ),
>;
pub type PFN_vkCmdCopyImageToBuffer2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCopyImageToBufferInfo: *const VkCopyImageToBufferInfo2,
    ),
>;
pub type PFN_vkCmdBlitImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pBlitImageInfo: *const VkBlitImageInfo2),
>;
pub type PFN_vkCmdResolveImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pResolveImageInfo: *const VkResolveImageInfo2,
    ),
>;
extern "system" {
    pub fn vkCmdCopyBuffer2KHR(
        commandBuffer: VkCommandBuffer,
        pCopyBufferInfo: *const VkCopyBufferInfo2,
    );
}
extern "system" {
    pub fn vkCmdCopyImage2KHR(
        commandBuffer: VkCommandBuffer,
        pCopyImageInfo: *const VkCopyImageInfo2,
    );
}
extern "system" {
    pub fn vkCmdCopyBufferToImage2KHR(
        commandBuffer: VkCommandBuffer,
        pCopyBufferToImageInfo: *const VkCopyBufferToImageInfo2,
    );
}
extern "system" {
    pub fn vkCmdCopyImageToBuffer2KHR(
        commandBuffer: VkCommandBuffer,
        pCopyImageToBufferInfo: *const VkCopyImageToBufferInfo2,
    );
}
extern "system" {
    pub fn vkCmdBlitImage2KHR(
        commandBuffer: VkCommandBuffer,
        pBlitImageInfo: *const VkBlitImageInfo2,
    );
}
extern "system" {
    pub fn vkCmdResolveImage2KHR(
        commandBuffer: VkCommandBuffer,
        pResolveImageInfo: *const VkResolveImageInfo2,
    );
}
pub type VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2;
pub type VkFormatFeatureFlagBits2KHR = VkFormatFeatureFlagBits2;
pub type VkFormatProperties3KHR = VkFormatProperties3;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingMaintenance1: VkBool32,
    pub rayTracingPipelineTraceRaysIndirect2: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rayTracingMaintenance1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR),
            "::",
            stringify!(rayTracingMaintenance1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rayTracingPipelineTraceRaysIndirect2) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR),
            "::",
            stringify!(rayTracingPipelineTraceRaysIndirect2)
        )
    );
}
impl Default for VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkTraceRaysIndirectCommand2KHR {
    pub raygenShaderRecordAddress: VkDeviceAddress,
    pub raygenShaderRecordSize: VkDeviceSize,
    pub missShaderBindingTableAddress: VkDeviceAddress,
    pub missShaderBindingTableSize: VkDeviceSize,
    pub missShaderBindingTableStride: VkDeviceSize,
    pub hitShaderBindingTableAddress: VkDeviceAddress,
    pub hitShaderBindingTableSize: VkDeviceSize,
    pub hitShaderBindingTableStride: VkDeviceSize,
    pub callableShaderBindingTableAddress: VkDeviceAddress,
    pub callableShaderBindingTableSize: VkDeviceSize,
    pub callableShaderBindingTableStride: VkDeviceSize,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[test]
fn bindgen_test_layout_VkTraceRaysIndirectCommand2KHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkTraceRaysIndirectCommand2KHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkTraceRaysIndirectCommand2KHR>(),
        104usize,
        concat!("Size of: ", stringify!(VkTraceRaysIndirectCommand2KHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkTraceRaysIndirectCommand2KHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkTraceRaysIndirectCommand2KHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raygenShaderRecordAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(raygenShaderRecordAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raygenShaderRecordSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(raygenShaderRecordSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).missShaderBindingTableAddress) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(missShaderBindingTableAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).missShaderBindingTableSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(missShaderBindingTableSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).missShaderBindingTableStride) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(missShaderBindingTableStride)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).hitShaderBindingTableAddress) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(hitShaderBindingTableAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hitShaderBindingTableSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(hitShaderBindingTableSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hitShaderBindingTableStride) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(hitShaderBindingTableStride)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).callableShaderBindingTableAddress) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(callableShaderBindingTableAddress)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).callableShaderBindingTableSize) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(callableShaderBindingTableSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).callableShaderBindingTableStride) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(callableShaderBindingTableStride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommand2KHR),
            "::",
            stringify!(depth)
        )
    );
}
pub type PFN_vkCmdTraceRaysIndirect2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, indirectDeviceAddress: VkDeviceAddress),
>;
extern "system" {
    pub fn vkCmdTraceRaysIndirect2KHR(
        commandBuffer: VkCommandBuffer,
        indirectDeviceAddress: VkDeviceAddress,
    );
}
pub type VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features;
pub type VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties;
pub type VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements;
pub type VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements;
pub type PFN_vkGetDeviceBufferMemoryRequirementsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceBufferMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageMemoryRequirementsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
extern "system" {
    pub fn vkGetDeviceBufferMemoryRequirementsKHR(
        device: VkDevice,
        pInfo: *const VkDeviceBufferMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetDeviceImageMemoryRequirementsKHR(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkGetDeviceImageSparseMemoryRequirementsKHR(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDebugReportCallbackEXT_T {
    _unused: [u8; 0],
}
pub type VkDebugReportCallbackEXT = *mut VkDebugReportCallbackEXT_T;
impl VkDebugReportObjectTypeEXT {
    pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT: VkDebugReportObjectTypeEXT =
        VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT;
}
impl VkDebugReportObjectTypeEXT {
    pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT: VkDebugReportObjectTypeEXT =
        VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT;
}
impl VkDebugReportObjectTypeEXT {
    pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT:
        VkDebugReportObjectTypeEXT =
        VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT;
}
impl VkDebugReportObjectTypeEXT {
    pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT:
        VkDebugReportObjectTypeEXT =
        VkDebugReportObjectTypeEXT::VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDebugReportObjectTypeEXT {
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000,
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000,
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDebugReportFlagBitsEXT {
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1,
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 2,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4,
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 8,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16,
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkDebugReportFlagsEXT = VkFlags;
pub type PFN_vkDebugReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: usize,
        messageCode: i32,
        pLayerPrefix: *const ::std::os::raw::c_char,
        pMessage: *const ::std::os::raw::c_char,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> VkBool32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDebugReportCallbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDebugReportFlagsEXT,
    pub pfnCallback: PFN_vkDebugReportCallbackEXT,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDebugReportCallbackCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDebugReportCallbackCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDebugReportCallbackCreateInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDebugReportCallbackCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugReportCallbackCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDebugReportCallbackCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugReportCallbackCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugReportCallbackCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugReportCallbackCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnCallback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugReportCallbackCreateInfoEXT),
            "::",
            stringify!(pfnCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugReportCallbackCreateInfoEXT),
            "::",
            stringify!(pUserData)
        )
    );
}
impl Default for VkDebugReportCallbackCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateDebugReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDebugReportCallbackCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pCallback: *mut VkDebugReportCallbackEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDebugReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        callback: VkDebugReportCallbackEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkDebugReportMessageEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: usize,
        messageCode: i32,
        pLayerPrefix: *const ::std::os::raw::c_char,
        pMessage: *const ::std::os::raw::c_char,
    ),
>;
extern "system" {
    pub fn vkCreateDebugReportCallbackEXT(
        instance: VkInstance,
        pCreateInfo: *const VkDebugReportCallbackCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pCallback: *mut VkDebugReportCallbackEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDebugReportCallbackEXT(
        instance: VkInstance,
        callback: VkDebugReportCallbackEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkDebugReportMessageEXT(
        instance: VkInstance,
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: usize,
        messageCode: i32,
        pLayerPrefix: *const ::std::os::raw::c_char,
        pMessage: *const ::std::os::raw::c_char,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkRasterizationOrderAMD {
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineRasterizationStateRasterizationOrderAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub rasterizationOrder: VkRasterizationOrderAMD,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationStateRasterizationOrderAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineRasterizationStateRasterizationOrderAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationStateRasterizationOrderAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationStateRasterizationOrderAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationStateRasterizationOrderAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationStateRasterizationOrderAMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateRasterizationOrderAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateRasterizationOrderAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rasterizationOrder) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateRasterizationOrderAMD),
            "::",
            stringify!(rasterizationOrder)
        )
    );
}
impl Default for VkPipelineRasterizationStateRasterizationOrderAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDebugMarkerObjectNameInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkDebugReportObjectTypeEXT,
    pub object: u64,
    pub pObjectName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VkDebugMarkerObjectNameInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDebugMarkerObjectNameInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDebugMarkerObjectNameInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDebugMarkerObjectNameInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugMarkerObjectNameInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugMarkerObjectNameInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectNameInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectNameInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectNameInfoEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectNameInfoEXT),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pObjectName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectNameInfoEXT),
            "::",
            stringify!(pObjectName)
        )
    );
}
impl Default for VkDebugMarkerObjectNameInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDebugMarkerObjectTagInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkDebugReportObjectTypeEXT,
    pub object: u64,
    pub tagName: u64,
    pub tagSize: usize,
    pub pTag: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDebugMarkerObjectTagInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDebugMarkerObjectTagInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDebugMarkerObjectTagInfoEXT>(),
        56usize,
        concat!("Size of: ", stringify!(VkDebugMarkerObjectTagInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugMarkerObjectTagInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugMarkerObjectTagInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(tagName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(tagSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTag) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerObjectTagInfoEXT),
            "::",
            stringify!(pTag)
        )
    );
}
impl Default for VkDebugMarkerObjectTagInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkDebugMarkerMarkerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pMarkerName: *const ::std::os::raw::c_char,
    pub color: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_VkDebugMarkerMarkerInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDebugMarkerMarkerInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDebugMarkerMarkerInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDebugMarkerMarkerInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugMarkerMarkerInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugMarkerMarkerInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerMarkerInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerMarkerInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMarkerName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerMarkerInfoEXT),
            "::",
            stringify!(pMarkerName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugMarkerMarkerInfoEXT),
            "::",
            stringify!(color)
        )
    );
}
impl Default for VkDebugMarkerMarkerInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkDebugMarkerSetObjectTagEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pTagInfo: *const VkDebugMarkerObjectTagInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkDebugMarkerSetObjectNameEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pNameInfo: *const VkDebugMarkerObjectNameInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCmdDebugMarkerBeginEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    ),
>;
pub type PFN_vkCmdDebugMarkerEndEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdDebugMarkerInsertEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    ),
>;
extern "system" {
    pub fn vkDebugMarkerSetObjectTagEXT(
        device: VkDevice,
        pTagInfo: *const VkDebugMarkerObjectTagInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDebugMarkerSetObjectNameEXT(
        device: VkDevice,
        pNameInfo: *const VkDebugMarkerObjectNameInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdDebugMarkerBeginEXT(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    );
}
extern "system" {
    pub fn vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer);
}
extern "system" {
    pub fn vkCmdDebugMarkerInsertEXT(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDedicatedAllocationImageCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dedicatedAllocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDedicatedAllocationImageCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkDedicatedAllocationImageCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDedicatedAllocationImageCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDedicatedAllocationImageCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDedicatedAllocationImageCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDedicatedAllocationImageCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationImageCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationImageCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dedicatedAllocation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationImageCreateInfoNV),
            "::",
            stringify!(dedicatedAllocation)
        )
    );
}
impl Default for VkDedicatedAllocationImageCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDedicatedAllocationBufferCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dedicatedAllocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDedicatedAllocationBufferCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkDedicatedAllocationBufferCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDedicatedAllocationBufferCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDedicatedAllocationBufferCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDedicatedAllocationBufferCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDedicatedAllocationBufferCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationBufferCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationBufferCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dedicatedAllocation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationBufferCreateInfoNV),
            "::",
            stringify!(dedicatedAllocation)
        )
    );
}
impl Default for VkDedicatedAllocationBufferCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDedicatedAllocationMemoryAllocateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkDedicatedAllocationMemoryAllocateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkDedicatedAllocationMemoryAllocateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDedicatedAllocationMemoryAllocateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDedicatedAllocationMemoryAllocateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDedicatedAllocationMemoryAllocateInfoNV),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for VkDedicatedAllocationMemoryAllocateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub transformFeedback: VkBool32,
    pub geometryStreams: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTransformFeedbackFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceTransformFeedbackFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformFeedback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT),
            "::",
            stringify!(transformFeedback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryStreams) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackFeaturesEXT),
            "::",
            stringify!(geometryStreams)
        )
    );
}
impl Default for VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxTransformFeedbackStreams: u32,
    pub maxTransformFeedbackBuffers: u32,
    pub maxTransformFeedbackBufferSize: VkDeviceSize,
    pub maxTransformFeedbackStreamDataSize: u32,
    pub maxTransformFeedbackBufferDataSize: u32,
    pub maxTransformFeedbackBufferDataStride: u32,
    pub transformFeedbackQueries: VkBool32,
    pub transformFeedbackStreamsLinesTriangles: VkBool32,
    pub transformFeedbackRasterizationStreamSelect: VkBool32,
    pub transformFeedbackDraw: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTransformFeedbackPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceTransformFeedbackPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTransformFeedbackStreams) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTransformFeedbackBuffers) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTransformFeedbackBufferSize) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackBufferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTransformFeedbackStreamDataSize) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackStreamDataSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTransformFeedbackBufferDataSize) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackBufferDataSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTransformFeedbackBufferDataStride) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(maxTransformFeedbackBufferDataStride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformFeedbackQueries) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(transformFeedbackQueries)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).transformFeedbackStreamsLinesTriangles) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(transformFeedbackStreamsLinesTriangles)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).transformFeedbackRasterizationStreamSelect) as usize
                - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(transformFeedbackRasterizationStreamSelect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformFeedbackDraw) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTransformFeedbackPropertiesEXT),
            "::",
            stringify!(transformFeedbackDraw)
        )
    );
}
impl Default for VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
    pub rasterizationStream: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationStateStreamCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineRasterizationStateStreamCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationStateStreamCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationStateStreamCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rasterizationStream) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationStateStreamCreateInfoEXT),
            "::",
            stringify!(rasterizationStream)
        )
    );
}
impl Default for VkPipelineRasterizationStateStreamCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdBindTransformFeedbackBuffersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBeginTransformFeedbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdEndTransformFeedbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBeginQueryIndexedEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
        index: u32,
    ),
>;
pub type PFN_vkCmdEndQueryIndexedEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        index: u32,
    ),
>;
pub type PFN_vkCmdDrawIndirectByteCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        instanceCount: u32,
        firstInstance: u32,
        counterBuffer: VkBuffer,
        counterBufferOffset: VkDeviceSize,
        counterOffset: u32,
        vertexStride: u32,
    ),
>;
extern "system" {
    pub fn vkCmdBindTransformFeedbackBuffersEXT(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdBeginTransformFeedbackEXT(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdEndTransformFeedbackEXT(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdBeginQueryIndexedEXT(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
        index: u32,
    );
}
extern "system" {
    pub fn vkCmdEndQueryIndexedEXT(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        index: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndirectByteCountEXT(
        commandBuffer: VkCommandBuffer,
        instanceCount: u32,
        firstInstance: u32,
        counterBuffer: VkBuffer,
        counterBufferOffset: VkDeviceSize,
        counterOffset: u32,
        vertexStride: u32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCuModuleNVX_T {
    _unused: [u8; 0],
}
pub type VkCuModuleNVX = *mut VkCuModuleNVX_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkCuFunctionNVX_T {
    _unused: [u8; 0],
}
pub type VkCuFunctionNVX = *mut VkCuFunctionNVX_T;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCuModuleCreateInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dataSize: usize,
    pub pData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkCuModuleCreateInfoNVX() {
    const UNINIT: ::std::mem::MaybeUninit<VkCuModuleCreateInfoNVX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCuModuleCreateInfoNVX>(),
        32usize,
        concat!("Size of: ", stringify!(VkCuModuleCreateInfoNVX))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCuModuleCreateInfoNVX>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCuModuleCreateInfoNVX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuModuleCreateInfoNVX),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuModuleCreateInfoNVX),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuModuleCreateInfoNVX),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuModuleCreateInfoNVX),
            "::",
            stringify!(pData)
        )
    );
}
impl Default for VkCuModuleCreateInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCuFunctionCreateInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub module: VkCuModuleNVX,
    pub pName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VkCuFunctionCreateInfoNVX() {
    const UNINIT: ::std::mem::MaybeUninit<VkCuFunctionCreateInfoNVX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCuFunctionCreateInfoNVX>(),
        32usize,
        concat!("Size of: ", stringify!(VkCuFunctionCreateInfoNVX))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCuFunctionCreateInfoNVX>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCuFunctionCreateInfoNVX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuFunctionCreateInfoNVX),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuFunctionCreateInfoNVX),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).module) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuFunctionCreateInfoNVX),
            "::",
            stringify!(module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuFunctionCreateInfoNVX),
            "::",
            stringify!(pName)
        )
    );
}
impl Default for VkCuFunctionCreateInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCuLaunchInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub function: VkCuFunctionNVX,
    pub gridDimX: u32,
    pub gridDimY: u32,
    pub gridDimZ: u32,
    pub blockDimX: u32,
    pub blockDimY: u32,
    pub blockDimZ: u32,
    pub sharedMemBytes: u32,
    pub paramCount: usize,
    pub pParams: *const *const ::std::os::raw::c_void,
    pub extraCount: usize,
    pub pExtras: *const *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkCuLaunchInfoNVX() {
    const UNINIT: ::std::mem::MaybeUninit<VkCuLaunchInfoNVX> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCuLaunchInfoNVX>(),
        88usize,
        concat!("Size of: ", stringify!(VkCuLaunchInfoNVX))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCuLaunchInfoNVX>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCuLaunchInfoNVX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimX) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(gridDimX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimY) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(gridDimY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gridDimZ) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(gridDimZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimX) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(blockDimX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimY) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(blockDimY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockDimZ) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(blockDimZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharedMemBytes) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(sharedMemBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramCount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(paramCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pParams) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(pParams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extraCount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(extraCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pExtras) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCuLaunchInfoNVX),
            "::",
            stringify!(pExtras)
        )
    );
}
impl Default for VkCuLaunchInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateCuModuleNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkCuModuleCreateInfoNVX,
        pAllocator: *const VkAllocationCallbacks,
        pModule: *mut VkCuModuleNVX,
    ) -> VkResult,
>;
pub type PFN_vkCreateCuFunctionNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkCuFunctionCreateInfoNVX,
        pAllocator: *const VkAllocationCallbacks,
        pFunction: *mut VkCuFunctionNVX,
    ) -> VkResult,
>;
pub type PFN_vkDestroyCuModuleNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        module: VkCuModuleNVX,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkDestroyCuFunctionNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        function: VkCuFunctionNVX,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdCuLaunchKernelNVX = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pLaunchInfo: *const VkCuLaunchInfoNVX),
>;
extern "system" {
    pub fn vkCreateCuModuleNVX(
        device: VkDevice,
        pCreateInfo: *const VkCuModuleCreateInfoNVX,
        pAllocator: *const VkAllocationCallbacks,
        pModule: *mut VkCuModuleNVX,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateCuFunctionNVX(
        device: VkDevice,
        pCreateInfo: *const VkCuFunctionCreateInfoNVX,
        pAllocator: *const VkAllocationCallbacks,
        pFunction: *mut VkCuFunctionNVX,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyCuModuleNVX(
        device: VkDevice,
        module: VkCuModuleNVX,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkDestroyCuFunctionNVX(
        device: VkDevice,
        function: VkCuFunctionNVX,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCmdCuLaunchKernelNVX(
        commandBuffer: VkCommandBuffer,
        pLaunchInfo: *const VkCuLaunchInfoNVX,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageViewHandleInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
    pub descriptorType: VkDescriptorType,
    pub sampler: VkSampler,
}
#[test]
fn bindgen_test_layout_VkImageViewHandleInfoNVX() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageViewHandleInfoNVX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageViewHandleInfoNVX>(),
        40usize,
        concat!("Size of: ", stringify!(VkImageViewHandleInfoNVX))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewHandleInfoNVX>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewHandleInfoNVX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewHandleInfoNVX),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewHandleInfoNVX),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageView) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewHandleInfoNVX),
            "::",
            stringify!(imageView)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewHandleInfoNVX),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampler) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewHandleInfoNVX),
            "::",
            stringify!(sampler)
        )
    );
}
impl Default for VkImageViewHandleInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageViewAddressPropertiesNVX {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkImageViewAddressPropertiesNVX() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageViewAddressPropertiesNVX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageViewAddressPropertiesNVX>(),
        32usize,
        concat!("Size of: ", stringify!(VkImageViewAddressPropertiesNVX))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewAddressPropertiesNVX>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewAddressPropertiesNVX))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewAddressPropertiesNVX),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewAddressPropertiesNVX),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewAddressPropertiesNVX),
            "::",
            stringify!(deviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewAddressPropertiesNVX),
            "::",
            stringify!(size)
        )
    );
}
impl Default for VkImageViewAddressPropertiesNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetImageViewHandleNVX = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX) -> u32,
>;
pub type PFN_vkGetImageViewAddressNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        imageView: VkImageView,
        pProperties: *mut VkImageViewAddressPropertiesNVX,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetImageViewHandleNVX(device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX)
        -> u32;
}
extern "system" {
    pub fn vkGetImageViewAddressNVX(
        device: VkDevice,
        imageView: VkImageView,
        pProperties: *mut VkImageViewAddressPropertiesNVX,
    ) -> VkResult;
}
pub type PFN_vkCmdDrawIndirectCountAMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCountAMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
extern "system" {
    pub fn vkCmdDrawIndirectCountAMD(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawIndexedIndirectCountAMD(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkTextureLODGatherFormatPropertiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportsTextureGatherLODBiasAMD: VkBool32,
}
#[test]
fn bindgen_test_layout_VkTextureLODGatherFormatPropertiesAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkTextureLODGatherFormatPropertiesAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkTextureLODGatherFormatPropertiesAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkTextureLODGatherFormatPropertiesAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkTextureLODGatherFormatPropertiesAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkTextureLODGatherFormatPropertiesAMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTextureLODGatherFormatPropertiesAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTextureLODGatherFormatPropertiesAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).supportsTextureGatherLODBiasAMD) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTextureLODGatherFormatPropertiesAMD),
            "::",
            stringify!(supportsTextureGatherLODBiasAMD)
        )
    );
}
impl Default for VkTextureLODGatherFormatPropertiesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkShaderInfoTypeAMD {
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkShaderResourceUsageAMD {
    pub numUsedVgprs: u32,
    pub numUsedSgprs: u32,
    pub ldsSizePerLocalWorkGroup: u32,
    pub ldsUsageSizeInBytes: usize,
    pub scratchMemUsageInBytes: usize,
}
#[test]
fn bindgen_test_layout_VkShaderResourceUsageAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkShaderResourceUsageAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkShaderResourceUsageAMD>(),
        32usize,
        concat!("Size of: ", stringify!(VkShaderResourceUsageAMD))
    );
    assert_eq!(
        ::std::mem::align_of::<VkShaderResourceUsageAMD>(),
        8usize,
        concat!("Alignment of ", stringify!(VkShaderResourceUsageAMD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numUsedVgprs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderResourceUsageAMD),
            "::",
            stringify!(numUsedVgprs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numUsedSgprs) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderResourceUsageAMD),
            "::",
            stringify!(numUsedSgprs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldsSizePerLocalWorkGroup) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderResourceUsageAMD),
            "::",
            stringify!(ldsSizePerLocalWorkGroup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldsUsageSizeInBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderResourceUsageAMD),
            "::",
            stringify!(ldsUsageSizeInBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scratchMemUsageInBytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderResourceUsageAMD),
            "::",
            stringify!(scratchMemUsageInBytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkShaderStatisticsInfoAMD {
    pub shaderStageMask: VkShaderStageFlags,
    pub resourceUsage: VkShaderResourceUsageAMD,
    pub numPhysicalVgprs: u32,
    pub numPhysicalSgprs: u32,
    pub numAvailableVgprs: u32,
    pub numAvailableSgprs: u32,
    pub computeWorkGroupSize: [u32; 3usize],
}
#[test]
fn bindgen_test_layout_VkShaderStatisticsInfoAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkShaderStatisticsInfoAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkShaderStatisticsInfoAMD>(),
        72usize,
        concat!("Size of: ", stringify!(VkShaderStatisticsInfoAMD))
    );
    assert_eq!(
        ::std::mem::align_of::<VkShaderStatisticsInfoAMD>(),
        8usize,
        concat!("Alignment of ", stringify!(VkShaderStatisticsInfoAMD))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderStageMask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(shaderStageMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceUsage) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(resourceUsage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numPhysicalVgprs) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(numPhysicalVgprs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numPhysicalSgprs) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(numPhysicalSgprs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAvailableVgprs) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(numAvailableVgprs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAvailableSgprs) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(numAvailableSgprs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).computeWorkGroupSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderStatisticsInfoAMD),
            "::",
            stringify!(computeWorkGroupSize)
        )
    );
}
pub type PFN_vkGetShaderInfoAMD = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        shaderStage: VkShaderStageFlagBits,
        infoType: VkShaderInfoTypeAMD,
        pInfoSize: *mut usize,
        pInfo: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetShaderInfoAMD(
        device: VkDevice,
        pipeline: VkPipeline,
        shaderStage: VkShaderStageFlagBits,
        infoType: VkShaderInfoTypeAMD,
        pInfoSize: *mut usize,
        pInfo: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cornerSampledImage: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCornerSampledImageFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceCornerSampledImageFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCornerSampledImageFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCornerSampledImageFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCornerSampledImageFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCornerSampledImageFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCornerSampledImageFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCornerSampledImageFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cornerSampledImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCornerSampledImageFeaturesNV),
            "::",
            stringify!(cornerSampledImage)
        )
    );
}
impl Default for VkPhysicalDeviceCornerSampledImageFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkExternalMemoryHandleTypeFlagBitsNV {
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
}
pub type VkExternalMemoryHandleTypeFlagsNV = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkExternalMemoryFeatureFlagBitsNV {
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
}
pub type VkExternalMemoryFeatureFlagsNV = VkFlags;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExternalImageFormatPropertiesNV {
    pub imageFormatProperties: VkImageFormatProperties,
    pub externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
    pub exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
    pub compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[test]
fn bindgen_test_layout_VkExternalImageFormatPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkExternalImageFormatPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExternalImageFormatPropertiesNV>(),
        48usize,
        concat!("Size of: ", stringify!(VkExternalImageFormatPropertiesNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalImageFormatPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkExternalImageFormatPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageFormatProperties) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatPropertiesNV),
            "::",
            stringify!(imageFormatProperties)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalMemoryFeatures) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatPropertiesNV),
            "::",
            stringify!(externalMemoryFeatures)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).exportFromImportedHandleTypes) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatPropertiesNV),
            "::",
            stringify!(exportFromImportedHandleTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compatibleHandleTypes) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalImageFormatPropertiesNV),
            "::",
            stringify!(compatibleHandleTypes)
        )
    );
}
pub type PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        externalHandleType: VkExternalMemoryHandleTypeFlagsNV,
        pExternalImageFormatProperties: *mut VkExternalImageFormatPropertiesNV,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        externalHandleType: VkExternalMemoryHandleTypeFlagsNV,
        pExternalImageFormatProperties: *mut VkExternalImageFormatPropertiesNV,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExternalMemoryImageCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[test]
fn bindgen_test_layout_VkExternalMemoryImageCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkExternalMemoryImageCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExternalMemoryImageCreateInfoNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkExternalMemoryImageCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExternalMemoryImageCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkExternalMemoryImageCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleTypes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExternalMemoryImageCreateInfoNV),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExternalMemoryImageCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkExportMemoryAllocateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[test]
fn bindgen_test_layout_VkExportMemoryAllocateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkExportMemoryAllocateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkExportMemoryAllocateInfoNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkExportMemoryAllocateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkExportMemoryAllocateInfoNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkExportMemoryAllocateInfoNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleTypes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkExportMemoryAllocateInfoNV),
            "::",
            stringify!(handleTypes)
        )
    );
}
impl Default for VkExportMemoryAllocateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkValidationCheckEXT {
    VK_VALIDATION_CHECK_ALL_EXT = 0,
    VK_VALIDATION_CHECK_SHADERS_EXT = 1,
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkValidationFlagsEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub disabledValidationCheckCount: u32,
    pub pDisabledValidationChecks: *const VkValidationCheckEXT,
}
#[test]
fn bindgen_test_layout_VkValidationFlagsEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkValidationFlagsEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkValidationFlagsEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkValidationFlagsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkValidationFlagsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkValidationFlagsEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFlagsEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFlagsEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).disabledValidationCheckCount) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFlagsEXT),
            "::",
            stringify!(disabledValidationCheckCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDisabledValidationChecks) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFlagsEXT),
            "::",
            stringify!(pDisabledValidationChecks)
        )
    );
}
impl Default for VkValidationFlagsEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT =
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageViewASTCDecodeModeEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub decodeMode: VkFormat,
}
#[test]
fn bindgen_test_layout_VkImageViewASTCDecodeModeEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageViewASTCDecodeModeEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageViewASTCDecodeModeEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageViewASTCDecodeModeEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewASTCDecodeModeEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewASTCDecodeModeEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewASTCDecodeModeEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewASTCDecodeModeEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodeMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewASTCDecodeModeEXT),
            "::",
            stringify!(decodeMode)
        )
    );
}
impl Default for VkImageViewASTCDecodeModeEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub decodeModeSharedExponent: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceASTCDecodeFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceASTCDecodeFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceASTCDecodeFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceASTCDecodeFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceASTCDecodeFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceASTCDecodeFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceASTCDecodeFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceASTCDecodeFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodeModeSharedExponent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceASTCDecodeFeaturesEXT),
            "::",
            stringify!(decodeModeSharedExponent)
        )
    );
}
impl Default for VkPhysicalDeviceASTCDecodeFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineRobustnessBufferBehaviorEXT {
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3,
    VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineRobustnessImageBehaviorEXT {
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3,
    VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePipelineRobustnessFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineRobustness: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePipelineRobustnessFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePipelineRobustnessFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePipelineRobustnessFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePipelineRobustnessFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePipelineRobustnessFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePipelineRobustnessFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineRobustnessFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineRobustnessFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineRobustness) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineRobustnessFeaturesEXT),
            "::",
            stringify!(pipelineRobustness)
        )
    );
}
impl Default for VkPhysicalDevicePipelineRobustnessFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePipelineRobustnessPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehaviorEXT,
    pub defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehaviorEXT,
    pub defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehaviorEXT,
    pub defaultRobustnessImages: VkPipelineRobustnessImageBehaviorEXT,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePipelineRobustnessPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePipelineRobustnessPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePipelineRobustnessPropertiesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePipelineRobustnessPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePipelineRobustnessPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePipelineRobustnessPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineRobustnessPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineRobustnessPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).defaultRobustnessStorageBuffers) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineRobustnessPropertiesEXT),
            "::",
            stringify!(defaultRobustnessStorageBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).defaultRobustnessUniformBuffers) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineRobustnessPropertiesEXT),
            "::",
            stringify!(defaultRobustnessUniformBuffers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).defaultRobustnessVertexInputs) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineRobustnessPropertiesEXT),
            "::",
            stringify!(defaultRobustnessVertexInputs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defaultRobustnessImages) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineRobustnessPropertiesEXT),
            "::",
            stringify!(defaultRobustnessImages)
        )
    );
}
impl Default for VkPhysicalDevicePipelineRobustnessPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineRobustnessCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub storageBuffers: VkPipelineRobustnessBufferBehaviorEXT,
    pub uniformBuffers: VkPipelineRobustnessBufferBehaviorEXT,
    pub vertexInputs: VkPipelineRobustnessBufferBehaviorEXT,
    pub images: VkPipelineRobustnessImageBehaviorEXT,
}
#[test]
fn bindgen_test_layout_VkPipelineRobustnessCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineRobustnessCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRobustnessCreateInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelineRobustnessCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRobustnessCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRobustnessCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRobustnessCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRobustnessCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageBuffers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRobustnessCreateInfoEXT),
            "::",
            stringify!(storageBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniformBuffers) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRobustnessCreateInfoEXT),
            "::",
            stringify!(uniformBuffers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexInputs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRobustnessCreateInfoEXT),
            "::",
            stringify!(vertexInputs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).images) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRobustnessCreateInfoEXT),
            "::",
            stringify!(images)
        )
    );
}
impl Default for VkPipelineRobustnessCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkConditionalRenderingFlagBitsEXT {
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1,
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkConditionalRenderingFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkConditionalRenderingBeginInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub flags: VkConditionalRenderingFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkConditionalRenderingBeginInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkConditionalRenderingBeginInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkConditionalRenderingBeginInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkConditionalRenderingBeginInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkConditionalRenderingBeginInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkConditionalRenderingBeginInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConditionalRenderingBeginInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConditionalRenderingBeginInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConditionalRenderingBeginInfoEXT),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConditionalRenderingBeginInfoEXT),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkConditionalRenderingBeginInfoEXT),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkConditionalRenderingBeginInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub conditionalRendering: VkBool32,
    pub inheritedConditionalRendering: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceConditionalRenderingFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceConditionalRenderingFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conditionalRendering) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT),
            "::",
            stringify!(conditionalRendering)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inheritedConditionalRendering) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConditionalRenderingFeaturesEXT),
            "::",
            stringify!(inheritedConditionalRendering)
        )
    );
}
impl Default for VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub conditionalRenderingEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkCommandBufferInheritanceConditionalRenderingInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkCommandBufferInheritanceConditionalRenderingInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkCommandBufferInheritanceConditionalRenderingInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkCommandBufferInheritanceConditionalRenderingInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceConditionalRenderingInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceConditionalRenderingInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).conditionalRenderingEnable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceConditionalRenderingInfoEXT),
            "::",
            stringify!(conditionalRenderingEnable)
        )
    );
}
impl Default for VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdBeginConditionalRenderingEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pConditionalRenderingBegin: *const VkConditionalRenderingBeginInfoEXT,
    ),
>;
pub type PFN_vkCmdEndConditionalRenderingEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
extern "system" {
    pub fn vkCmdBeginConditionalRenderingEXT(
        commandBuffer: VkCommandBuffer,
        pConditionalRenderingBegin: *const VkConditionalRenderingBeginInfoEXT,
    );
}
extern "system" {
    pub fn vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkViewportWScalingNV {
    pub xcoeff: f32,
    pub ycoeff: f32,
}
#[test]
fn bindgen_test_layout_VkViewportWScalingNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkViewportWScalingNV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkViewportWScalingNV>(),
        8usize,
        concat!("Size of: ", stringify!(VkViewportWScalingNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkViewportWScalingNV>(),
        4usize,
        concat!("Alignment of ", stringify!(VkViewportWScalingNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xcoeff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportWScalingNV),
            "::",
            stringify!(xcoeff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ycoeff) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportWScalingNV),
            "::",
            stringify!(ycoeff)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineViewportWScalingStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewportWScalingEnable: VkBool32,
    pub viewportCount: u32,
    pub pViewportWScalings: *const VkViewportWScalingNV,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportWScalingStateCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineViewportWScalingStateCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportWScalingStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportWScalingStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewportWScalingEnable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV),
            "::",
            stringify!(viewportWScalingEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewportCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV),
            "::",
            stringify!(viewportCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pViewportWScalings) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportWScalingStateCreateInfoNV),
            "::",
            stringify!(pViewportWScalings)
        )
    );
}
impl Default for VkPipelineViewportWScalingStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetViewportWScalingNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportWScalings: *const VkViewportWScalingNV,
    ),
>;
extern "system" {
    pub fn vkCmdSetViewportWScalingNV(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportWScalings: *const VkViewportWScalingNV,
    );
}
pub type PFN_vkReleaseDisplayEXT = ::std::option::Option<
    unsafe extern "system" fn(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) -> VkResult,
>;
extern "system" {
    pub fn vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR)
        -> VkResult;
}
impl VkSurfaceCounterFlagBitsEXT {
    pub const VK_SURFACE_COUNTER_VBLANK_EXT: VkSurfaceCounterFlagBitsEXT =
        VkSurfaceCounterFlagBitsEXT::VK_SURFACE_COUNTER_VBLANK_BIT_EXT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSurfaceCounterFlagBitsEXT {
    VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1,
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkSurfaceCounterFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSurfaceCapabilities2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minImageCount: u32,
    pub maxImageCount: u32,
    pub currentExtent: VkExtent2D,
    pub minImageExtent: VkExtent2D,
    pub maxImageExtent: VkExtent2D,
    pub maxImageArrayLayers: u32,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub currentTransform: VkSurfaceTransformFlagBitsKHR,
    pub supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    pub supportedUsageFlags: VkImageUsageFlags,
    pub supportedSurfaceCounters: VkSurfaceCounterFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkSurfaceCapabilities2EXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSurfaceCapabilities2EXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceCapabilities2EXT>(),
        72usize,
        concat!("Size of: ", stringify!(VkSurfaceCapabilities2EXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceCapabilities2EXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSurfaceCapabilities2EXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minImageCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(minImageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(maxImageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentExtent) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(currentExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minImageExtent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(minImageExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageExtent) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(maxImageExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxImageArrayLayers) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(maxImageArrayLayers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedTransforms) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(supportedTransforms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentTransform) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(currentTransform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedCompositeAlpha) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(supportedCompositeAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedUsageFlags) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(supportedUsageFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedSurfaceCounters) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilities2EXT),
            "::",
            stringify!(supportedSurfaceCounters)
        )
    );
}
impl Default for VkSurfaceCapabilities2EXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2EXT,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2EXT,
    ) -> VkResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDisplayPowerStateEXT {
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
    VK_DISPLAY_POWER_STATE_ON_EXT = 2,
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDeviceEventTypeEXT {
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDisplayEventTypeEXT {
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayPowerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub powerState: VkDisplayPowerStateEXT,
}
#[test]
fn bindgen_test_layout_VkDisplayPowerInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayPowerInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayPowerInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkDisplayPowerInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayPowerInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayPowerInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPowerInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPowerInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).powerState) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayPowerInfoEXT),
            "::",
            stringify!(powerState)
        )
    );
}
impl Default for VkDisplayPowerInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceEventInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceEvent: VkDeviceEventTypeEXT,
}
#[test]
fn bindgen_test_layout_VkDeviceEventInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceEventInfoEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceEventInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkDeviceEventInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceEventInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceEventInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceEventInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceEventInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceEvent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceEventInfoEXT),
            "::",
            stringify!(deviceEvent)
        )
    );
}
impl Default for VkDeviceEventInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayEventInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub displayEvent: VkDisplayEventTypeEXT,
}
#[test]
fn bindgen_test_layout_VkDisplayEventInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayEventInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayEventInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkDisplayEventInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayEventInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDisplayEventInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayEventInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayEventInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayEvent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayEventInfoEXT),
            "::",
            stringify!(displayEvent)
        )
    );
}
impl Default for VkDisplayEventInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSwapchainCounterCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub surfaceCounters: VkSurfaceCounterFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkSwapchainCounterCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSwapchainCounterCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainCounterCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkSwapchainCounterCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainCounterCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSwapchainCounterCreateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCounterCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCounterCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).surfaceCounters) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainCounterCreateInfoEXT),
            "::",
            stringify!(surfaceCounters)
        )
    );
}
impl Default for VkSwapchainCounterCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkDisplayPowerControlEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayPowerInfo: *const VkDisplayPowerInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkRegisterDeviceEventEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pDeviceEventInfo: *const VkDeviceEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkRegisterDisplayEventEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayEventInfo: *const VkDisplayEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkGetSwapchainCounterEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        counter: VkSurfaceCounterFlagBitsEXT,
        pCounterValue: *mut u64,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkDisplayPowerControlEXT(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayPowerInfo: *const VkDisplayPowerInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkRegisterDeviceEventEXT(
        device: VkDevice,
        pDeviceEventInfo: *const VkDeviceEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkRegisterDisplayEventEXT(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayEventInfo: *const VkDisplayEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetSwapchainCounterEXT(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        counter: VkSurfaceCounterFlagBitsEXT,
        pCounterValue: *mut u64,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRefreshCycleDurationGOOGLE {
    pub refreshDuration: u64,
}
#[test]
fn bindgen_test_layout_VkRefreshCycleDurationGOOGLE() {
    const UNINIT: ::std::mem::MaybeUninit<VkRefreshCycleDurationGOOGLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRefreshCycleDurationGOOGLE>(),
        8usize,
        concat!("Size of: ", stringify!(VkRefreshCycleDurationGOOGLE))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRefreshCycleDurationGOOGLE>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRefreshCycleDurationGOOGLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refreshDuration) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRefreshCycleDurationGOOGLE),
            "::",
            stringify!(refreshDuration)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPastPresentationTimingGOOGLE {
    pub presentID: u32,
    pub desiredPresentTime: u64,
    pub actualPresentTime: u64,
    pub earliestPresentTime: u64,
    pub presentMargin: u64,
}
#[test]
fn bindgen_test_layout_VkPastPresentationTimingGOOGLE() {
    const UNINIT: ::std::mem::MaybeUninit<VkPastPresentationTimingGOOGLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPastPresentationTimingGOOGLE>(),
        40usize,
        concat!("Size of: ", stringify!(VkPastPresentationTimingGOOGLE))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPastPresentationTimingGOOGLE>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPastPresentationTimingGOOGLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPastPresentationTimingGOOGLE),
            "::",
            stringify!(presentID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desiredPresentTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPastPresentationTimingGOOGLE),
            "::",
            stringify!(desiredPresentTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actualPresentTime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPastPresentationTimingGOOGLE),
            "::",
            stringify!(actualPresentTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).earliestPresentTime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPastPresentationTimingGOOGLE),
            "::",
            stringify!(earliestPresentTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentMargin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPastPresentationTimingGOOGLE),
            "::",
            stringify!(presentMargin)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPresentTimeGOOGLE {
    pub presentID: u32,
    pub desiredPresentTime: u64,
}
#[test]
fn bindgen_test_layout_VkPresentTimeGOOGLE() {
    const UNINIT: ::std::mem::MaybeUninit<VkPresentTimeGOOGLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPresentTimeGOOGLE>(),
        16usize,
        concat!("Size of: ", stringify!(VkPresentTimeGOOGLE))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentTimeGOOGLE>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentTimeGOOGLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimeGOOGLE),
            "::",
            stringify!(presentID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desiredPresentTime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimeGOOGLE),
            "::",
            stringify!(desiredPresentTime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPresentTimesInfoGOOGLE {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pTimes: *const VkPresentTimeGOOGLE,
}
#[test]
fn bindgen_test_layout_VkPresentTimesInfoGOOGLE() {
    const UNINIT: ::std::mem::MaybeUninit<VkPresentTimesInfoGOOGLE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPresentTimesInfoGOOGLE>(),
        32usize,
        concat!("Size of: ", stringify!(VkPresentTimesInfoGOOGLE))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPresentTimesInfoGOOGLE>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPresentTimesInfoGOOGLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimesInfoGOOGLE),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimesInfoGOOGLE),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchainCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimesInfoGOOGLE),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTimes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPresentTimesInfoGOOGLE),
            "::",
            stringify!(pTimes)
        )
    );
}
impl Default for VkPresentTimesInfoGOOGLE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetRefreshCycleDurationGOOGLE = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pDisplayTimingProperties: *mut VkRefreshCycleDurationGOOGLE,
    ) -> VkResult,
>;
pub type PFN_vkGetPastPresentationTimingGOOGLE = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pPresentationTimingCount: *mut u32,
        pPresentationTimings: *mut VkPastPresentationTimingGOOGLE,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetRefreshCycleDurationGOOGLE(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pDisplayTimingProperties: *mut VkRefreshCycleDurationGOOGLE,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPastPresentationTimingGOOGLE(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pPresentationTimingCount: *mut u32,
        pPresentationTimings: *mut VkPastPresentationTimingGOOGLE,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub perViewPositionAllComponents: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).perViewPositionAllComponents) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX),
            "::",
            stringify!(perViewPositionAllComponents)
        )
    );
}
impl Default for VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkViewportCoordinateSwizzleNV {
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647,
}
pub type VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkViewportSwizzleNV {
    pub x: VkViewportCoordinateSwizzleNV,
    pub y: VkViewportCoordinateSwizzleNV,
    pub z: VkViewportCoordinateSwizzleNV,
    pub w: VkViewportCoordinateSwizzleNV,
}
#[test]
fn bindgen_test_layout_VkViewportSwizzleNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkViewportSwizzleNV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkViewportSwizzleNV>(),
        16usize,
        concat!("Size of: ", stringify!(VkViewportSwizzleNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkViewportSwizzleNV>(),
        4usize,
        concat!("Alignment of ", stringify!(VkViewportSwizzleNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportSwizzleNV),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportSwizzleNV),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportSwizzleNV),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkViewportSwizzleNV),
            "::",
            stringify!(w)
        )
    );
}
impl Default for VkViewportSwizzleNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineViewportSwizzleStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
    pub viewportCount: u32,
    pub pViewportSwizzles: *const VkViewportSwizzleNV,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportSwizzleStateCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineViewportSwizzleStateCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportSwizzleStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportSwizzleStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewportCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV),
            "::",
            stringify!(viewportCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pViewportSwizzles) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportSwizzleStateCreateInfoNV),
            "::",
            stringify!(pViewportSwizzles)
        )
    );
}
impl Default for VkPipelineViewportSwizzleStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDiscardRectangleModeEXT {
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647,
}
pub type VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxDiscardRectangles: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDiscardRectanglePropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDiscardRectanglePropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDiscardRectanglePropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDiscardRectanglePropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiscardRectanglePropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiscardRectanglePropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDiscardRectangles) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiscardRectanglePropertiesEXT),
            "::",
            stringify!(maxDiscardRectangles)
        )
    );
}
impl Default for VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
    pub discardRectangleMode: VkDiscardRectangleModeEXT,
    pub discardRectangleCount: u32,
    pub pDiscardRectangles: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkPipelineDiscardRectangleStateCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineDiscardRectangleStateCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineDiscardRectangleStateCreateInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineDiscardRectangleStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discardRectangleMode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(discardRectangleMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discardRectangleCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(discardRectangleCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDiscardRectangles) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineDiscardRectangleStateCreateInfoEXT),
            "::",
            stringify!(pDiscardRectangles)
        )
    );
}
impl Default for VkPipelineDiscardRectangleStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetDiscardRectangleEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstDiscardRectangle: u32,
        discardRectangleCount: u32,
        pDiscardRectangles: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdSetDiscardRectangleEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, discardRectangleEnable: VkBool32),
>;
pub type PFN_vkCmdSetDiscardRectangleModeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        discardRectangleMode: VkDiscardRectangleModeEXT,
    ),
>;
extern "system" {
    pub fn vkCmdSetDiscardRectangleEXT(
        commandBuffer: VkCommandBuffer,
        firstDiscardRectangle: u32,
        discardRectangleCount: u32,
        pDiscardRectangles: *const VkRect2D,
    );
}
extern "system" {
    pub fn vkCmdSetDiscardRectangleEnableEXT(
        commandBuffer: VkCommandBuffer,
        discardRectangleEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetDiscardRectangleModeEXT(
        commandBuffer: VkCommandBuffer,
        discardRectangleMode: VkDiscardRectangleModeEXT,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkConservativeRasterizationModeEXT {
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647,
}
pub type VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub primitiveOverestimationSize: f32,
    pub maxExtraPrimitiveOverestimationSize: f32,
    pub extraPrimitiveOverestimationSizeGranularity: f32,
    pub primitiveUnderestimation: VkBool32,
    pub conservativePointAndLineRasterization: VkBool32,
    pub degenerateTrianglesRasterized: VkBool32,
    pub degenerateLinesRasterized: VkBool32,
    pub fullyCoveredFragmentShaderInputVariable: VkBool32,
    pub conservativeRasterizationPostDepthCoverage: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceConservativeRasterizationPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceConservativeRasterizationPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitiveOverestimationSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(primitiveOverestimationSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxExtraPrimitiveOverestimationSize) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(maxExtraPrimitiveOverestimationSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extraPrimitiveOverestimationSizeGranularity) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(extraPrimitiveOverestimationSizeGranularity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitiveUnderestimation) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(primitiveUnderestimation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).conservativePointAndLineRasterization) as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(conservativePointAndLineRasterization)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).degenerateTrianglesRasterized) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(degenerateTrianglesRasterized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).degenerateLinesRasterized) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(degenerateLinesRasterized)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fullyCoveredFragmentShaderInputVariable) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(fullyCoveredFragmentShaderInputVariable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).conservativeRasterizationPostDepthCoverage) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceConservativeRasterizationPropertiesEXT),
            "::",
            stringify!(conservativeRasterizationPostDepthCoverage)
        )
    );
}
impl Default for VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
    pub conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    pub extraPrimitiveOverestimationSize: f32,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationConservativeStateCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineRasterizationConservativeStateCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationConservativeStateCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationConservativeStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).conservativeRasterizationMode) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT),
            "::",
            stringify!(conservativeRasterizationMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extraPrimitiveOverestimationSize) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationConservativeStateCreateInfoEXT),
            "::",
            stringify!(extraPrimitiveOverestimationSize)
        )
    );
}
impl Default for VkPipelineRasterizationConservativeStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub depthClipEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDepthClipEnableFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDepthClipEnableFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDepthClipEnableFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDepthClipEnableFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClipEnableFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClipEnableFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthClipEnable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClipEnableFeaturesEXT),
            "::",
            stringify!(depthClipEnable)
        )
    );
}
impl Default for VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
    pub depthClipEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationDepthClipStateCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineRasterizationDepthClipStateCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthClipEnable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationDepthClipStateCreateInfoEXT),
            "::",
            stringify!(depthClipEnable)
        )
    );
}
impl Default for VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkXYColorEXT {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_VkXYColorEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkXYColorEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkXYColorEXT>(),
        8usize,
        concat!("Size of: ", stringify!(VkXYColorEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkXYColorEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(VkXYColorEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkXYColorEXT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkXYColorEXT),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkHdrMetadataEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub displayPrimaryRed: VkXYColorEXT,
    pub displayPrimaryGreen: VkXYColorEXT,
    pub displayPrimaryBlue: VkXYColorEXT,
    pub whitePoint: VkXYColorEXT,
    pub maxLuminance: f32,
    pub minLuminance: f32,
    pub maxContentLightLevel: f32,
    pub maxFrameAverageLightLevel: f32,
}
#[test]
fn bindgen_test_layout_VkHdrMetadataEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkHdrMetadataEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkHdrMetadataEXT>(),
        64usize,
        concat!("Size of: ", stringify!(VkHdrMetadataEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkHdrMetadataEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkHdrMetadataEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayPrimaryRed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(displayPrimaryRed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayPrimaryGreen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(displayPrimaryGreen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayPrimaryBlue) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(displayPrimaryBlue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).whitePoint) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(whitePoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxLuminance) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(maxLuminance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minLuminance) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(minLuminance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxContentLightLevel) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(maxContentLightLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFrameAverageLightLevel) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHdrMetadataEXT),
            "::",
            stringify!(maxFrameAverageLightLevel)
        )
    );
}
impl Default for VkHdrMetadataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkSetHdrMetadataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchainCount: u32,
        pSwapchains: *const VkSwapchainKHR,
        pMetadata: *const VkHdrMetadataEXT,
    ),
>;
extern "system" {
    pub fn vkSetHdrMetadataEXT(
        device: VkDevice,
        swapchainCount: u32,
        pSwapchains: *const VkSwapchainKHR,
        pMetadata: *const VkHdrMetadataEXT,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDebugUtilsMessengerEXT_T {
    _unused: [u8; 0],
}
pub type VkDebugUtilsMessengerEXT = *mut VkDebugUtilsMessengerEXT_T;
pub type VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDebugUtilsMessageSeverityFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDebugUtilsMessageTypeFlagBitsEXT {
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1,
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2,
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4,
    VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8,
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub type VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkDebugUtilsLabelEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pLabelName: *const ::std::os::raw::c_char,
    pub color: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_VkDebugUtilsLabelEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDebugUtilsLabelEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDebugUtilsLabelEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDebugUtilsLabelEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugUtilsLabelEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugUtilsLabelEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsLabelEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsLabelEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLabelName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsLabelEXT),
            "::",
            stringify!(pLabelName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsLabelEXT),
            "::",
            stringify!(color)
        )
    );
}
impl Default for VkDebugUtilsLabelEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDebugUtilsObjectNameInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub pObjectName: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VkDebugUtilsObjectNameInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDebugUtilsObjectNameInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDebugUtilsObjectNameInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDebugUtilsObjectNameInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugUtilsObjectNameInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugUtilsObjectNameInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectHandle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(objectHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pObjectName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectNameInfoEXT),
            "::",
            stringify!(pObjectName)
        )
    );
}
impl Default for VkDebugUtilsObjectNameInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDebugUtilsMessengerCallbackDataEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
    pub pMessageIdName: *const ::std::os::raw::c_char,
    pub messageIdNumber: i32,
    pub pMessage: *const ::std::os::raw::c_char,
    pub queueLabelCount: u32,
    pub pQueueLabels: *const VkDebugUtilsLabelEXT,
    pub cmdBufLabelCount: u32,
    pub pCmdBufLabels: *const VkDebugUtilsLabelEXT,
    pub objectCount: u32,
    pub pObjects: *const VkDebugUtilsObjectNameInfoEXT,
}
#[test]
fn bindgen_test_layout_VkDebugUtilsMessengerCallbackDataEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDebugUtilsMessengerCallbackDataEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDebugUtilsMessengerCallbackDataEXT>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugUtilsMessengerCallbackDataEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMessageIdName) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pMessageIdName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageIdNumber) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(messageIdNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMessage) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pMessage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueLabelCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(queueLabelCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pQueueLabels) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pQueueLabels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmdBufLabelCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(cmdBufLabelCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCmdBufLabels) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pCmdBufLabels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectCount) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(objectCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pObjects) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCallbackDataEXT),
            "::",
            stringify!(pObjects)
        )
    );
}
impl Default for VkDebugUtilsMessengerCallbackDataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkDebugUtilsMessengerCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> VkBool32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDebugUtilsMessengerCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDebugUtilsMessengerCreateFlagsEXT,
    pub messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
    pub messageType: VkDebugUtilsMessageTypeFlagsEXT,
    pub pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDebugUtilsMessengerCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDebugUtilsMessengerCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDebugUtilsMessengerCreateInfoEXT>(),
        48usize,
        concat!("Size of: ", stringify!(VkDebugUtilsMessengerCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugUtilsMessengerCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageSeverity) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(messageSeverity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messageType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(messageType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnUserCallback) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(pfnUserCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsMessengerCreateInfoEXT),
            "::",
            stringify!(pUserData)
        )
    );
}
impl Default for VkDebugUtilsMessengerCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDebugUtilsObjectTagInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub tagName: u64,
    pub tagSize: usize,
    pub pTag: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDebugUtilsObjectTagInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDebugUtilsObjectTagInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDebugUtilsObjectTagInfoEXT>(),
        56usize,
        concat!("Size of: ", stringify!(VkDebugUtilsObjectTagInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDebugUtilsObjectTagInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDebugUtilsObjectTagInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectHandle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(objectHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(tagName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tagSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(tagSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTag) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDebugUtilsObjectTagInfoEXT),
            "::",
            stringify!(pTag)
        )
    );
}
impl Default for VkDebugUtilsObjectTagInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkSetDebugUtilsObjectNameEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pNameInfo: *const VkDebugUtilsObjectNameInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkSetDebugUtilsObjectTagEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pTagInfo: *const VkDebugUtilsObjectTagInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkQueueBeginDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkQueueEndDebugUtilsLabelEXT =
    ::std::option::Option<unsafe extern "system" fn(queue: VkQueue)>;
pub type PFN_vkQueueInsertDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkCmdBeginDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkCmdEndDebugUtilsLabelEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdInsertDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkCreateDebugUtilsMessengerEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDebugUtilsMessengerCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMessenger: *mut VkDebugUtilsMessengerEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDebugUtilsMessengerEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        messenger: VkDebugUtilsMessengerEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSubmitDebugUtilsMessageEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
    ),
>;
extern "system" {
    pub fn vkSetDebugUtilsObjectNameEXT(
        device: VkDevice,
        pNameInfo: *const VkDebugUtilsObjectNameInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkSetDebugUtilsObjectTagEXT(
        device: VkDevice,
        pTagInfo: *const VkDebugUtilsObjectTagInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT);
}
extern "system" {
    pub fn vkQueueEndDebugUtilsLabelEXT(queue: VkQueue);
}
extern "system" {
    pub fn vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT);
}
extern "system" {
    pub fn vkCmdBeginDebugUtilsLabelEXT(
        commandBuffer: VkCommandBuffer,
        pLabelInfo: *const VkDebugUtilsLabelEXT,
    );
}
extern "system" {
    pub fn vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer);
}
extern "system" {
    pub fn vkCmdInsertDebugUtilsLabelEXT(
        commandBuffer: VkCommandBuffer,
        pLabelInfo: *const VkDebugUtilsLabelEXT,
    );
}
extern "system" {
    pub fn vkCreateDebugUtilsMessengerEXT(
        instance: VkInstance,
        pCreateInfo: *const VkDebugUtilsMessengerCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMessenger: *mut VkDebugUtilsMessengerEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyDebugUtilsMessengerEXT(
        instance: VkInstance,
        messenger: VkDebugUtilsMessengerEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkSubmitDebugUtilsMessageEXT(
        instance: VkInstance,
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
    );
}
pub use self::VkSamplerReductionMode as VkSamplerReductionModeEXT;
pub type VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;
pub type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT =
    VkPhysicalDeviceSamplerFilterMinmaxProperties;
pub type VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;
pub type VkPhysicalDeviceInlineUniformBlockPropertiesEXT =
    VkPhysicalDeviceInlineUniformBlockProperties;
pub type VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;
pub type VkDescriptorPoolInlineUniformBlockCreateInfoEXT =
    VkDescriptorPoolInlineUniformBlockCreateInfo;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkSampleLocationEXT {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_VkSampleLocationEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSampleLocationEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSampleLocationEXT>(),
        8usize,
        concat!("Size of: ", stringify!(VkSampleLocationEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSampleLocationEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSampleLocationEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationEXT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationEXT),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSampleLocationsInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampleLocationsPerPixel: VkSampleCountFlagBits,
    pub sampleLocationGridSize: VkExtent2D,
    pub sampleLocationsCount: u32,
    pub pSampleLocations: *const VkSampleLocationEXT,
}
#[test]
fn bindgen_test_layout_VkSampleLocationsInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSampleLocationsInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSampleLocationsInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkSampleLocationsInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSampleLocationsInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSampleLocationsInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleLocationsPerPixel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(sampleLocationsPerPixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleLocationGridSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(sampleLocationGridSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleLocationsCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(sampleLocationsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSampleLocations) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSampleLocationsInfoEXT),
            "::",
            stringify!(pSampleLocations)
        )
    );
}
impl Default for VkSampleLocationsInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAttachmentSampleLocationsEXT {
    pub attachmentIndex: u32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[test]
fn bindgen_test_layout_VkAttachmentSampleLocationsEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkAttachmentSampleLocationsEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAttachmentSampleLocationsEXT>(),
        48usize,
        concat!("Size of: ", stringify!(VkAttachmentSampleLocationsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAttachmentSampleLocationsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAttachmentSampleLocationsEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachmentIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentSampleLocationsEXT),
            "::",
            stringify!(attachmentIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleLocationsInfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAttachmentSampleLocationsEXT),
            "::",
            stringify!(sampleLocationsInfo)
        )
    );
}
impl Default for VkAttachmentSampleLocationsEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassSampleLocationsEXT {
    pub subpassIndex: u32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[test]
fn bindgen_test_layout_VkSubpassSampleLocationsEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassSampleLocationsEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassSampleLocationsEXT>(),
        48usize,
        concat!("Size of: ", stringify!(VkSubpassSampleLocationsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassSampleLocationsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubpassSampleLocationsEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpassIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassSampleLocationsEXT),
            "::",
            stringify!(subpassIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleLocationsInfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassSampleLocationsEXT),
            "::",
            stringify!(sampleLocationsInfo)
        )
    );
}
impl Default for VkSubpassSampleLocationsEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassSampleLocationsBeginInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentInitialSampleLocationsCount: u32,
    pub pAttachmentInitialSampleLocations: *const VkAttachmentSampleLocationsEXT,
    pub postSubpassSampleLocationsCount: u32,
    pub pPostSubpassSampleLocations: *const VkSubpassSampleLocationsEXT,
}
#[test]
fn bindgen_test_layout_VkRenderPassSampleLocationsBeginInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassSampleLocationsBeginInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassSampleLocationsBeginInfoEXT>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassSampleLocationsBeginInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attachmentInitialSampleLocationsCount) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(attachmentInitialSampleLocationsCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pAttachmentInitialSampleLocations) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(pAttachmentInitialSampleLocations)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).postSubpassSampleLocationsCount) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(postSubpassSampleLocationsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPostSubpassSampleLocations) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSampleLocationsBeginInfoEXT),
            "::",
            stringify!(pPostSubpassSampleLocations)
        )
    );
}
impl Default for VkRenderPassSampleLocationsBeginInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineSampleLocationsStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampleLocationsEnable: VkBool32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[test]
fn bindgen_test_layout_VkPipelineSampleLocationsStateCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineSampleLocationsStateCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineSampleLocationsStateCreateInfoEXT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineSampleLocationsStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleLocationsEnable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT),
            "::",
            stringify!(sampleLocationsEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleLocationsInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineSampleLocationsStateCreateInfoEXT),
            "::",
            stringify!(sampleLocationsInfo)
        )
    );
}
impl Default for VkPipelineSampleLocationsStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub sampleLocationSampleCounts: VkSampleCountFlags,
    pub maxSampleLocationGridSize: VkExtent2D,
    pub sampleLocationCoordinateRange: [f32; 2usize],
    pub sampleLocationSubPixelBits: u32,
    pub variableSampleLocations: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSampleLocationsPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSampleLocationsPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSampleLocationsPropertiesEXT>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSampleLocationsPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleLocationSampleCounts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(sampleLocationSampleCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSampleLocationGridSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(maxSampleLocationGridSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sampleLocationCoordinateRange) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(sampleLocationCoordinateRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleLocationSubPixelBits) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(sampleLocationSubPixelBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variableSampleLocations) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSampleLocationsPropertiesEXT),
            "::",
            stringify!(variableSampleLocations)
        )
    );
}
impl Default for VkPhysicalDeviceSampleLocationsPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMultisamplePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxSampleLocationGridSize: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkMultisamplePropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMultisamplePropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMultisamplePropertiesEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkMultisamplePropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMultisamplePropertiesEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMultisamplePropertiesEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultisamplePropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultisamplePropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSampleLocationGridSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultisamplePropertiesEXT),
            "::",
            stringify!(maxSampleLocationGridSize)
        )
    );
}
impl Default for VkMultisamplePropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetSampleLocationsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pSampleLocationsInfo: *const VkSampleLocationsInfoEXT,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        samples: VkSampleCountFlagBits,
        pMultisampleProperties: *mut VkMultisamplePropertiesEXT,
    ),
>;
extern "system" {
    pub fn vkCmdSetSampleLocationsEXT(
        commandBuffer: VkCommandBuffer,
        pSampleLocationsInfo: *const VkSampleLocationsInfoEXT,
    );
}
extern "system" {
    pub fn vkGetPhysicalDeviceMultisamplePropertiesEXT(
        physicalDevice: VkPhysicalDevice,
        samples: VkSampleCountFlagBits,
        pMultisampleProperties: *mut VkMultisamplePropertiesEXT,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkBlendOverlapEXT {
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
    VK_BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub advancedBlendCoherentOperations: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).advancedBlendCoherentOperations) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT),
            "::",
            stringify!(advancedBlendCoherentOperations)
        )
    );
}
impl Default for VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub advancedBlendMaxColorAttachments: u32,
    pub advancedBlendIndependentBlend: VkBool32,
    pub advancedBlendNonPremultipliedSrcColor: VkBool32,
    pub advancedBlendNonPremultipliedDstColor: VkBool32,
    pub advancedBlendCorrelatedOverlap: VkBool32,
    pub advancedBlendAllOperations: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).advancedBlendMaxColorAttachments) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendMaxColorAttachments)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).advancedBlendIndependentBlend) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendIndependentBlend)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).advancedBlendNonPremultipliedSrcColor) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendNonPremultipliedSrcColor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).advancedBlendNonPremultipliedDstColor) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendNonPremultipliedDstColor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).advancedBlendCorrelatedOverlap) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendCorrelatedOverlap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advancedBlendAllOperations) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT),
            "::",
            stringify!(advancedBlendAllOperations)
        )
    );
}
impl Default for VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcPremultiplied: VkBool32,
    pub dstPremultiplied: VkBool32,
    pub blendOverlap: VkBlendOverlapEXT,
}
#[test]
fn bindgen_test_layout_VkPipelineColorBlendAdvancedStateCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineColorBlendAdvancedStateCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcPremultiplied) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT),
            "::",
            stringify!(srcPremultiplied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPremultiplied) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT),
            "::",
            stringify!(dstPremultiplied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blendOverlap) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorBlendAdvancedStateCreateInfoEXT),
            "::",
            stringify!(blendOverlap)
        )
    );
}
impl Default for VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineCoverageToColorStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCoverageToColorStateCreateFlagsNV,
    pub coverageToColorEnable: VkBool32,
    pub coverageToColorLocation: u32,
}
#[test]
fn bindgen_test_layout_VkPipelineCoverageToColorStateCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineCoverageToColorStateCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCoverageToColorStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCoverageToColorStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coverageToColorEnable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV),
            "::",
            stringify!(coverageToColorEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coverageToColorLocation) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageToColorStateCreateInfoNV),
            "::",
            stringify!(coverageToColorLocation)
        )
    );
}
impl Default for VkPipelineCoverageToColorStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCoverageModulationModeNV {
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647,
}
pub type VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineCoverageModulationStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCoverageModulationStateCreateFlagsNV,
    pub coverageModulationMode: VkCoverageModulationModeNV,
    pub coverageModulationTableEnable: VkBool32,
    pub coverageModulationTableCount: u32,
    pub pCoverageModulationTable: *const f32,
}
#[test]
fn bindgen_test_layout_VkPipelineCoverageModulationStateCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineCoverageModulationStateCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCoverageModulationStateCreateInfoNV>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCoverageModulationStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coverageModulationMode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(coverageModulationMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).coverageModulationTableEnable) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(coverageModulationTableEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).coverageModulationTableCount) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(coverageModulationTableCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCoverageModulationTable) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageModulationStateCreateInfoNV),
            "::",
            stringify!(pCoverageModulationTable)
        )
    );
}
impl Default for VkPipelineCoverageModulationStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSMCount: u32,
    pub shaderWarpsPerSM: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderSMCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV),
            "::",
            stringify!(shaderSMCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderWarpsPerSM) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV),
            "::",
            stringify!(shaderWarpsPerSM)
        )
    );
}
impl Default for VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSMBuiltins: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderSMBuiltins) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV),
            "::",
            stringify!(shaderSMBuiltins)
        )
    );
}
impl Default for VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDrmFormatModifierPropertiesEXT {
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub drmFormatModifierTilingFeatures: VkFormatFeatureFlags,
}
#[test]
fn bindgen_test_layout_VkDrmFormatModifierPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDrmFormatModifierPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDrmFormatModifierPropertiesEXT>(),
        16usize,
        concat!("Size of: ", stringify!(VkDrmFormatModifierPropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrmFormatModifierPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDrmFormatModifierPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(drmFormatModifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifierPlaneCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(drmFormatModifierPlaneCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).drmFormatModifierTilingFeatures) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(drmFormatModifierTilingFeatures)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDrmFormatModifierPropertiesListEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifierProperties: *mut VkDrmFormatModifierPropertiesEXT,
}
#[test]
fn bindgen_test_layout_VkDrmFormatModifierPropertiesListEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDrmFormatModifierPropertiesListEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDrmFormatModifierPropertiesListEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDrmFormatModifierPropertiesListEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrmFormatModifierPropertiesListEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDrmFormatModifierPropertiesListEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesListEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesListEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifierCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesListEXT),
            "::",
            stringify!(drmFormatModifierCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pDrmFormatModifierProperties) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesListEXT),
            "::",
            stringify!(pDrmFormatModifierProperties)
        )
    );
}
impl Default for VkDrmFormatModifierPropertiesListEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub drmFormatModifier: u64,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageDrmFormatModifierInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImageDrmFormatModifierInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifier) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(drmFormatModifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sharingMode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(sharingMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).queueFamilyIndexCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(queueFamilyIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pQueueFamilyIndices) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT),
            "::",
            stringify!(pQueueFamilyIndices)
        )
    );
}
impl Default for VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageDrmFormatModifierListCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifiers: *const u64,
}
#[test]
fn bindgen_test_layout_VkImageDrmFormatModifierListCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageDrmFormatModifierListCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageDrmFormatModifierListCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageDrmFormatModifierListCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifierCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT),
            "::",
            stringify!(drmFormatModifierCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDrmFormatModifiers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierListCreateInfoEXT),
            "::",
            stringify!(pDrmFormatModifiers)
        )
    );
}
impl Default for VkImageDrmFormatModifierListCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub pPlaneLayouts: *const VkSubresourceLayout,
}
#[test]
fn bindgen_test_layout_VkImageDrmFormatModifierExplicitCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageDrmFormatModifierExplicitCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageDrmFormatModifierExplicitCreateInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageDrmFormatModifierExplicitCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifier) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT),
            "::",
            stringify!(drmFormatModifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifierPlaneCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT),
            "::",
            stringify!(drmFormatModifierPlaneCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPlaneLayouts) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierExplicitCreateInfoEXT),
            "::",
            stringify!(pPlaneLayouts)
        )
    );
}
impl Default for VkImageDrmFormatModifierExplicitCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageDrmFormatModifierPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub drmFormatModifier: u64,
}
#[test]
fn bindgen_test_layout_VkImageDrmFormatModifierPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageDrmFormatModifierPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageDrmFormatModifierPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkImageDrmFormatModifierPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageDrmFormatModifierPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageDrmFormatModifierPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifier) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageDrmFormatModifierPropertiesEXT),
            "::",
            stringify!(drmFormatModifier)
        )
    );
}
impl Default for VkImageDrmFormatModifierPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDrmFormatModifierProperties2EXT {
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub drmFormatModifierTilingFeatures: VkFormatFeatureFlags2,
}
#[test]
fn bindgen_test_layout_VkDrmFormatModifierProperties2EXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDrmFormatModifierProperties2EXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDrmFormatModifierProperties2EXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkDrmFormatModifierProperties2EXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrmFormatModifierProperties2EXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDrmFormatModifierProperties2EXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierProperties2EXT),
            "::",
            stringify!(drmFormatModifier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifierPlaneCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierProperties2EXT),
            "::",
            stringify!(drmFormatModifierPlaneCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).drmFormatModifierTilingFeatures) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierProperties2EXT),
            "::",
            stringify!(drmFormatModifierTilingFeatures)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDrmFormatModifierPropertiesList2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifierProperties: *mut VkDrmFormatModifierProperties2EXT,
}
#[test]
fn bindgen_test_layout_VkDrmFormatModifierPropertiesList2EXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDrmFormatModifierPropertiesList2EXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDrmFormatModifierPropertiesList2EXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDrmFormatModifierPropertiesList2EXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrmFormatModifierPropertiesList2EXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDrmFormatModifierPropertiesList2EXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesList2EXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesList2EXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drmFormatModifierCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesList2EXT),
            "::",
            stringify!(drmFormatModifierCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pDrmFormatModifierProperties) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrmFormatModifierPropertiesList2EXT),
            "::",
            stringify!(pDrmFormatModifierProperties)
        )
    );
}
impl Default for VkDrmFormatModifierPropertiesList2EXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetImageDrmFormatModifierPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pProperties: *mut VkImageDrmFormatModifierPropertiesEXT,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetImageDrmFormatModifierPropertiesEXT(
        device: VkDevice,
        image: VkImage,
        pProperties: *mut VkImageDrmFormatModifierPropertiesEXT,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkValidationCacheEXT_T {
    _unused: [u8; 0],
}
pub type VkValidationCacheEXT = *mut VkValidationCacheEXT_T;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkValidationCacheHeaderVersionEXT {
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647,
}
pub type VkValidationCacheCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkValidationCacheCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkValidationCacheCreateFlagsEXT,
    pub initialDataSize: usize,
    pub pInitialData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkValidationCacheCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkValidationCacheCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkValidationCacheCreateInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkValidationCacheCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkValidationCacheCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkValidationCacheCreateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationCacheCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationCacheCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationCacheCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialDataSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationCacheCreateInfoEXT),
            "::",
            stringify!(initialDataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInitialData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationCacheCreateInfoEXT),
            "::",
            stringify!(pInitialData)
        )
    );
}
impl Default for VkValidationCacheCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkShaderModuleValidationCacheCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub validationCache: VkValidationCacheEXT,
}
#[test]
fn bindgen_test_layout_VkShaderModuleValidationCacheCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkShaderModuleValidationCacheCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkShaderModuleValidationCacheCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkShaderModuleValidationCacheCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkShaderModuleValidationCacheCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkShaderModuleValidationCacheCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleValidationCacheCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleValidationCacheCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).validationCache) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleValidationCacheCreateInfoEXT),
            "::",
            stringify!(validationCache)
        )
    );
}
impl Default for VkShaderModuleValidationCacheCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateValidationCacheEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkValidationCacheCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pValidationCache: *mut VkValidationCacheEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyValidationCacheEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkMergeValidationCachesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        dstCache: VkValidationCacheEXT,
        srcCacheCount: u32,
        pSrcCaches: *const VkValidationCacheEXT,
    ) -> VkResult,
>;
pub type PFN_vkGetValidationCacheDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkCreateValidationCacheEXT(
        device: VkDevice,
        pCreateInfo: *const VkValidationCacheCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pValidationCache: *mut VkValidationCacheEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyValidationCacheEXT(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkMergeValidationCachesEXT(
        device: VkDevice,
        dstCache: VkValidationCacheEXT,
        srcCacheCount: u32,
        pSrcCaches: *const VkValidationCacheEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetValidationCacheDataEXT(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
pub use self::VkDescriptorBindingFlagBits as VkDescriptorBindingFlagBitsEXT;
pub type VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;
pub type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT =
    VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub type VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;
pub type VkPhysicalDeviceDescriptorIndexingPropertiesEXT =
    VkPhysicalDeviceDescriptorIndexingProperties;
pub type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT =
    VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT =
    VkDescriptorSetVariableDescriptorCountLayoutSupport;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkShadingRatePaletteEntryNV {
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCoarseSampleOrderTypeNV {
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkShadingRatePaletteNV {
    pub shadingRatePaletteEntryCount: u32,
    pub pShadingRatePaletteEntries: *const VkShadingRatePaletteEntryNV,
}
#[test]
fn bindgen_test_layout_VkShadingRatePaletteNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkShadingRatePaletteNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkShadingRatePaletteNV>(),
        16usize,
        concat!("Size of: ", stringify!(VkShadingRatePaletteNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkShadingRatePaletteNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkShadingRatePaletteNV))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shadingRatePaletteEntryCount) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShadingRatePaletteNV),
            "::",
            stringify!(shadingRatePaletteEntryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pShadingRatePaletteEntries) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShadingRatePaletteNV),
            "::",
            stringify!(pShadingRatePaletteEntries)
        )
    );
}
impl Default for VkShadingRatePaletteNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub shadingRateImageEnable: VkBool32,
    pub viewportCount: u32,
    pub pShadingRatePalettes: *const VkShadingRatePaletteNV,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportShadingRateImageStateCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineViewportShadingRateImageStateCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportShadingRateImageStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportShadingRateImageStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadingRateImageEnable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV),
            "::",
            stringify!(shadingRateImageEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewportCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV),
            "::",
            stringify!(viewportCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pShadingRatePalettes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportShadingRateImageStateCreateInfoNV),
            "::",
            stringify!(pShadingRatePalettes)
        )
    );
}
impl Default for VkPipelineViewportShadingRateImageStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shadingRateImage: VkBool32,
    pub shadingRateCoarseSampleOrder: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShadingRateImageFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShadingRateImageFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShadingRateImageFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShadingRateImageFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadingRateImage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV),
            "::",
            stringify!(shadingRateImage)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shadingRateCoarseSampleOrder) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImageFeaturesNV),
            "::",
            stringify!(shadingRateCoarseSampleOrder)
        )
    );
}
impl Default for VkPhysicalDeviceShadingRateImageFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shadingRateTexelSize: VkExtent2D,
    pub shadingRatePaletteSize: u32,
    pub shadingRateMaxCoarseSamples: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShadingRateImagePropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShadingRateImagePropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShadingRateImagePropertiesNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShadingRateImagePropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadingRateTexelSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV),
            "::",
            stringify!(shadingRateTexelSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadingRatePaletteSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV),
            "::",
            stringify!(shadingRatePaletteSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadingRateMaxCoarseSamples) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShadingRateImagePropertiesNV),
            "::",
            stringify!(shadingRateMaxCoarseSamples)
        )
    );
}
impl Default for VkPhysicalDeviceShadingRateImagePropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCoarseSampleLocationNV {
    pub pixelX: u32,
    pub pixelY: u32,
    pub sample: u32,
}
#[test]
fn bindgen_test_layout_VkCoarseSampleLocationNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkCoarseSampleLocationNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCoarseSampleLocationNV>(),
        12usize,
        concat!("Size of: ", stringify!(VkCoarseSampleLocationNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCoarseSampleLocationNV>(),
        4usize,
        concat!("Alignment of ", stringify!(VkCoarseSampleLocationNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleLocationNV),
            "::",
            stringify!(pixelX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelY) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleLocationNV),
            "::",
            stringify!(pixelY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sample) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleLocationNV),
            "::",
            stringify!(sample)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCoarseSampleOrderCustomNV {
    pub shadingRate: VkShadingRatePaletteEntryNV,
    pub sampleCount: u32,
    pub sampleLocationCount: u32,
    pub pSampleLocations: *const VkCoarseSampleLocationNV,
}
#[test]
fn bindgen_test_layout_VkCoarseSampleOrderCustomNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkCoarseSampleOrderCustomNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCoarseSampleOrderCustomNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkCoarseSampleOrderCustomNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCoarseSampleOrderCustomNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCoarseSampleOrderCustomNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadingRate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleOrderCustomNV),
            "::",
            stringify!(shadingRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleOrderCustomNV),
            "::",
            stringify!(sampleCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleLocationCount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleOrderCustomNV),
            "::",
            stringify!(sampleLocationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSampleLocations) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCoarseSampleOrderCustomNV),
            "::",
            stringify!(pSampleLocations)
        )
    );
}
impl Default for VkCoarseSampleOrderCustomNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampleOrderType: VkCoarseSampleOrderTypeNV,
    pub customSampleOrderCount: u32,
    pub pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampleOrderType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV),
            "::",
            stringify!(sampleOrderType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customSampleOrderCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV),
            "::",
            stringify!(customSampleOrderCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCustomSampleOrders) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportCoarseSampleOrderStateCreateInfoNV),
            "::",
            stringify!(pCustomSampleOrders)
        )
    );
}
impl Default for VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdBindShadingRateImageNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    ),
>;
pub type PFN_vkCmdSetViewportShadingRatePaletteNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pShadingRatePalettes: *const VkShadingRatePaletteNV,
    ),
>;
pub type PFN_vkCmdSetCoarseSampleOrderNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        sampleOrderType: VkCoarseSampleOrderTypeNV,
        customSampleOrderCount: u32,
        pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
    ),
>;
extern "system" {
    pub fn vkCmdBindShadingRateImageNV(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    );
}
extern "system" {
    pub fn vkCmdSetViewportShadingRatePaletteNV(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pShadingRatePalettes: *const VkShadingRatePaletteNV,
    );
}
extern "system" {
    pub fn vkCmdSetCoarseSampleOrderNV(
        commandBuffer: VkCommandBuffer,
        sampleOrderType: VkCoarseSampleOrderTypeNV,
        customSampleOrderCount: u32,
        pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureNV_T {
    _unused: [u8; 0],
}
pub type VkAccelerationStructureNV = *mut VkAccelerationStructureNV_T;
impl VkRayTracingShaderGroupTypeKHR {
    pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV: VkRayTracingShaderGroupTypeKHR =
        VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR;
}
impl VkRayTracingShaderGroupTypeKHR {
    pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV:
        VkRayTracingShaderGroupTypeKHR =
        VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR;
}
impl VkRayTracingShaderGroupTypeKHR {
    pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV:
        VkRayTracingShaderGroupTypeKHR =
        VkRayTracingShaderGroupTypeKHR::VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkRayTracingShaderGroupTypeKHR {
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 2147483647,
}
pub use self::VkRayTracingShaderGroupTypeKHR as VkRayTracingShaderGroupTypeNV;
impl VkGeometryTypeKHR {
    pub const VK_GEOMETRY_TYPE_TRIANGLES_NV: VkGeometryTypeKHR =
        VkGeometryTypeKHR::VK_GEOMETRY_TYPE_TRIANGLES_KHR;
}
impl VkGeometryTypeKHR {
    pub const VK_GEOMETRY_TYPE_AABBS_NV: VkGeometryTypeKHR =
        VkGeometryTypeKHR::VK_GEOMETRY_TYPE_AABBS_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkGeometryTypeKHR {
    VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
    VK_GEOMETRY_TYPE_AABBS_KHR = 1,
    VK_GEOMETRY_TYPE_INSTANCES_KHR = 2,
    VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 2147483647,
}
pub use self::VkGeometryTypeKHR as VkGeometryTypeNV;
impl VkAccelerationStructureTypeKHR {
    pub const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV: VkAccelerationStructureTypeKHR =
        VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR;
}
impl VkAccelerationStructureTypeKHR {
    pub const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV: VkAccelerationStructureTypeKHR =
        VkAccelerationStructureTypeKHR::VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAccelerationStructureTypeKHR {
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
    VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2,
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 2147483647,
}
pub use self::VkAccelerationStructureTypeKHR as VkAccelerationStructureTypeNV;
impl VkCopyAccelerationStructureModeKHR {
    pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV: VkCopyAccelerationStructureModeKHR =
        VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR;
}
impl VkCopyAccelerationStructureModeKHR {
    pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV: VkCopyAccelerationStructureModeKHR =
        VkCopyAccelerationStructureModeKHR::VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCopyAccelerationStructureModeKHR {
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647,
}
pub use self::VkCopyAccelerationStructureModeKHR as VkCopyAccelerationStructureModeNV;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAccelerationStructureMemoryRequirementsTypeNV {
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 2147483647,
}
impl VkGeometryFlagBitsKHR {
    pub const VK_GEOMETRY_OPAQUE_BIT_NV: VkGeometryFlagBitsKHR =
        VkGeometryFlagBitsKHR::VK_GEOMETRY_OPAQUE_BIT_KHR;
}
impl VkGeometryFlagBitsKHR {
    pub const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: VkGeometryFlagBitsKHR =
        VkGeometryFlagBitsKHR::VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkGeometryFlagBitsKHR {
    VK_GEOMETRY_OPAQUE_BIT_KHR = 1,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2,
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkGeometryFlagsKHR = VkFlags;
pub type VkGeometryFlagsNV = VkGeometryFlagsKHR;
pub use self::VkGeometryFlagBitsKHR as VkGeometryFlagBitsNV;
impl VkGeometryInstanceFlagBitsKHR {
    pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR:
        VkGeometryInstanceFlagBitsKHR =
        VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR;
}
impl VkGeometryInstanceFlagBitsKHR {
    pub const VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: VkGeometryInstanceFlagBitsKHR =
        VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR;
}
impl VkGeometryInstanceFlagBitsKHR {
    pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV:
        VkGeometryInstanceFlagBitsKHR =
        VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR;
}
impl VkGeometryInstanceFlagBitsKHR {
    pub const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: VkGeometryInstanceFlagBitsKHR =
        VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR;
}
impl VkGeometryInstanceFlagBitsKHR {
    pub const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: VkGeometryInstanceFlagBitsKHR =
        VkGeometryInstanceFlagBitsKHR::VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkGeometryInstanceFlagBitsKHR {
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8,
    VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16,
    VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32,
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkGeometryInstanceFlagsKHR = VkFlags;
pub type VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;
pub use self::VkGeometryInstanceFlagBitsKHR as VkGeometryInstanceFlagBitsNV;
impl VkBuildAccelerationStructureFlagBitsKHR {
    pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = VkBuildAccelerationStructureFlagBitsKHR :: VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR ;
}
impl VkBuildAccelerationStructureFlagBitsKHR {
    pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = VkBuildAccelerationStructureFlagBitsKHR :: VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR ;
}
impl VkBuildAccelerationStructureFlagBitsKHR {
    pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = VkBuildAccelerationStructureFlagBitsKHR :: VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR ;
}
impl VkBuildAccelerationStructureFlagBitsKHR {
    pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = VkBuildAccelerationStructureFlagBitsKHR :: VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR ;
}
impl VkBuildAccelerationStructureFlagBitsKHR {
    pub const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV:
        VkBuildAccelerationStructureFlagBitsKHR =
        VkBuildAccelerationStructureFlagBitsKHR::VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkBuildAccelerationStructureFlagBitsKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16,
    VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256,
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkBuildAccelerationStructureFlagsKHR = VkFlags;
pub type VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
pub use self::VkBuildAccelerationStructureFlagBitsKHR as VkBuildAccelerationStructureFlagBitsNV;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRayTracingShaderGroupCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkRayTracingShaderGroupTypeKHR,
    pub generalShader: u32,
    pub closestHitShader: u32,
    pub anyHitShader: u32,
    pub intersectionShader: u32,
}
#[test]
fn bindgen_test_layout_VkRayTracingShaderGroupCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkRayTracingShaderGroupCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRayTracingShaderGroupCreateInfoNV>(),
        40usize,
        concat!("Size of: ", stringify!(VkRayTracingShaderGroupCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRayTracingShaderGroupCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generalShader) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(generalShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closestHitShader) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(closestHitShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anyHitShader) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(anyHitShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intersectionShader) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoNV),
            "::",
            stringify!(intersectionShader)
        )
    );
}
impl Default for VkRayTracingShaderGroupCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRayTracingPipelineCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub groupCount: u32,
    pub pGroups: *const VkRayTracingShaderGroupCreateInfoNV,
    pub maxRecursionDepth: u32,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[test]
fn bindgen_test_layout_VkRayTracingPipelineCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkRayTracingPipelineCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRayTracingPipelineCreateInfoNV>(),
        80usize,
        concat!("Size of: ", stringify!(VkRayTracingPipelineCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRayTracingPipelineCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRayTracingPipelineCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stageCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(stageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStages) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(pStages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(groupCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGroups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(pGroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRecursionDepth) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(maxRecursionDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basePipelineHandle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(basePipelineHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basePipelineIndex) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoNV),
            "::",
            stringify!(basePipelineIndex)
        )
    );
}
impl Default for VkRayTracingPipelineCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkGeometryTrianglesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexData: VkBuffer,
    pub vertexOffset: VkDeviceSize,
    pub vertexCount: u32,
    pub vertexStride: VkDeviceSize,
    pub vertexFormat: VkFormat,
    pub indexData: VkBuffer,
    pub indexOffset: VkDeviceSize,
    pub indexCount: u32,
    pub indexType: VkIndexType,
    pub transformData: VkBuffer,
    pub transformOffset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkGeometryTrianglesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkGeometryTrianglesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkGeometryTrianglesNV>(),
        96usize,
        concat!("Size of: ", stringify!(VkGeometryTrianglesNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeometryTrianglesNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGeometryTrianglesNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(vertexData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(vertexOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(vertexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexStride) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(vertexStride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexFormat) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(vertexFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(indexData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexOffset) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(indexOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(indexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexType) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(indexType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformData) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(transformData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformOffset) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryTrianglesNV),
            "::",
            stringify!(transformOffset)
        )
    );
}
impl Default for VkGeometryTrianglesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkGeometryAABBNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub aabbData: VkBuffer,
    pub numAABBs: u32,
    pub stride: u32,
    pub offset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkGeometryAABBNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkGeometryAABBNV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkGeometryAABBNV>(),
        40usize,
        concat!("Size of: ", stringify!(VkGeometryAABBNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeometryAABBNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGeometryAABBNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aabbData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(aabbData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numAABBs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(numAABBs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryAABBNV),
            "::",
            stringify!(offset)
        )
    );
}
impl Default for VkGeometryAABBNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkGeometryDataNV {
    pub triangles: VkGeometryTrianglesNV,
    pub aabbs: VkGeometryAABBNV,
}
#[test]
fn bindgen_test_layout_VkGeometryDataNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkGeometryDataNV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkGeometryDataNV>(),
        136usize,
        concat!("Size of: ", stringify!(VkGeometryDataNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeometryDataNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGeometryDataNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).triangles) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryDataNV),
            "::",
            stringify!(triangles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aabbs) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryDataNV),
            "::",
            stringify!(aabbs)
        )
    );
}
impl Default for VkGeometryDataNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkGeometryNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub geometryType: VkGeometryTypeKHR,
    pub geometry: VkGeometryDataNV,
    pub flags: VkGeometryFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkGeometryNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkGeometryNV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkGeometryNV>(),
        168usize,
        concat!("Size of: ", stringify!(VkGeometryNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeometryNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGeometryNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryNV),
            "::",
            stringify!(geometryType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryNV),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeometryNV),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkGeometryNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAccelerationStructureInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkAccelerationStructureTypeNV,
    pub flags: VkBuildAccelerationStructureFlagsNV,
    pub instanceCount: u32,
    pub geometryCount: u32,
    pub pGeometries: *const VkGeometryNV,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureInfoNV>(),
        40usize,
        concat!("Size of: ", stringify!(VkAccelerationStructureInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureInfoNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAccelerationStructureInfoNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instanceCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(instanceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryCount) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(geometryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGeometries) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInfoNV),
            "::",
            stringify!(pGeometries)
        )
    );
}
impl Default for VkAccelerationStructureInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAccelerationStructureCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub compactedSize: VkDeviceSize,
    pub info: VkAccelerationStructureInfoNV,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureCreateInfoNV>(),
        64usize,
        concat!("Size of: ", stringify!(VkAccelerationStructureCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compactedSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoNV),
            "::",
            stringify!(compactedSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoNV),
            "::",
            stringify!(info)
        )
    );
}
impl Default for VkAccelerationStructureCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindAccelerationStructureMemoryInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructure: VkAccelerationStructureNV,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkBindAccelerationStructureMemoryInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindAccelerationStructureMemoryInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindAccelerationStructureMemoryInfoNV>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkBindAccelerationStructureMemoryInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindAccelerationStructureMemoryInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindAccelerationStructureMemoryInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accelerationStructure) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoNV),
            "::",
            stringify!(accelerationStructure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoNV),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoNV),
            "::",
            stringify!(memoryOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceIndexCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoNV),
            "::",
            stringify!(deviceIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDeviceIndices) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindAccelerationStructureMemoryInfoNV),
            "::",
            stringify!(pDeviceIndices)
        )
    );
}
impl Default for VkBindAccelerationStructureMemoryInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkWriteDescriptorSetAccelerationStructureNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructureCount: u32,
    pub pAccelerationStructures: *const VkAccelerationStructureNV,
}
#[test]
fn bindgen_test_layout_VkWriteDescriptorSetAccelerationStructureNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkWriteDescriptorSetAccelerationStructureNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkWriteDescriptorSetAccelerationStructureNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkWriteDescriptorSetAccelerationStructureNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkWriteDescriptorSetAccelerationStructureNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accelerationStructureCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureNV),
            "::",
            stringify!(accelerationStructureCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAccelerationStructures) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureNV),
            "::",
            stringify!(pAccelerationStructures)
        )
    );
}
impl Default for VkWriteDescriptorSetAccelerationStructureNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAccelerationStructureMemoryRequirementsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkAccelerationStructureMemoryRequirementsTypeNV,
    pub accelerationStructure: VkAccelerationStructureNV,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureMemoryRequirementsInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureMemoryRequirementsInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureMemoryRequirementsInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureMemoryRequirementsInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accelerationStructure) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMemoryRequirementsInfoNV),
            "::",
            stringify!(accelerationStructure)
        )
    );
}
impl Default for VkAccelerationStructureMemoryRequirementsInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRayTracingPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderGroupHandleSize: u32,
    pub maxRecursionDepth: u32,
    pub maxShaderGroupStride: u32,
    pub shaderGroupBaseAlignment: u32,
    pub maxGeometryCount: u64,
    pub maxInstanceCount: u64,
    pub maxTriangleCount: u64,
    pub maxDescriptorSetAccelerationStructures: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRayTracingPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRayTracingPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRayTracingPropertiesNV>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRayTracingPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderGroupHandleSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(shaderGroupHandleSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRecursionDepth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxRecursionDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxShaderGroupStride) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxShaderGroupStride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderGroupBaseAlignment) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(shaderGroupBaseAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGeometryCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxGeometryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxInstanceCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxInstanceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTriangleCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxTriangleCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetAccelerationStructures) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPropertiesNV),
            "::",
            stringify!(maxDescriptorSetAccelerationStructures)
        )
    );
}
impl Default for VkPhysicalDeviceRayTracingPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkTransformMatrixKHR {
    pub matrix: [[f32; 4usize]; 3usize],
}
#[test]
fn bindgen_test_layout_VkTransformMatrixKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkTransformMatrixKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkTransformMatrixKHR>(),
        48usize,
        concat!("Size of: ", stringify!(VkTransformMatrixKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkTransformMatrixKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkTransformMatrixKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matrix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTransformMatrixKHR),
            "::",
            stringify!(matrix)
        )
    );
}
pub type VkTransformMatrixNV = VkTransformMatrixKHR;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkAabbPositionsKHR {
    pub minX: f32,
    pub minY: f32,
    pub minZ: f32,
    pub maxX: f32,
    pub maxY: f32,
    pub maxZ: f32,
}
#[test]
fn bindgen_test_layout_VkAabbPositionsKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAabbPositionsKHR> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAabbPositionsKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkAabbPositionsKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAabbPositionsKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkAabbPositionsKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(minX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minY) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(minY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minZ) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(minZ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxX) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(maxX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxY) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(maxY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxZ) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAabbPositionsKHR),
            "::",
            stringify!(maxZ)
        )
    );
}
pub type VkAabbPositionsNV = VkAabbPositionsKHR;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkAccelerationStructureInstanceKHR {
    pub transform: VkTransformMatrixKHR,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub accelerationStructureReference: u64,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureInstanceKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureInstanceKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureInstanceKHR>(),
        64usize,
        concat!("Size of: ", stringify!(VkAccelerationStructureInstanceKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureInstanceKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureInstanceKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInstanceKHR),
            "::",
            stringify!(transform)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).accelerationStructureReference) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureInstanceKHR),
            "::",
            stringify!(accelerationStructureReference)
        )
    );
}
impl VkAccelerationStructureInstanceKHR {
    #[inline]
    pub fn instanceCustomIndex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceCustomIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn instanceShaderBindingTableRecordOffset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceShaderBindingTableRecordOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> VkGeometryInstanceFlagsKHR {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        instanceCustomIndex: u32,
        mask: u32,
        instanceShaderBindingTableRecordOffset: u32,
        flags: VkGeometryInstanceFlagsKHR,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let instanceCustomIndex: u32 = unsafe { ::std::mem::transmute(instanceCustomIndex) };
            instanceCustomIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let mask: u32 = unsafe { ::std::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let instanceShaderBindingTableRecordOffset: u32 =
                unsafe { ::std::mem::transmute(instanceShaderBindingTableRecordOffset) };
            instanceShaderBindingTableRecordOffset as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;
pub type PFN_vkCreateAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetAccelerationStructureMemoryRequirementsNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2KHR,
    ),
>;
pub type PFN_vkBindAccelerationStructureMemoryNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindAccelerationStructureMemoryInfoNV,
    ) -> VkResult,
>;
pub type PFN_vkCmdBuildAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkAccelerationStructureInfoNV,
        instanceData: VkBuffer,
        instanceOffset: VkDeviceSize,
        update: VkBool32,
        dst: VkAccelerationStructureNV,
        src: VkAccelerationStructureNV,
        scratch: VkBuffer,
        scratchOffset: VkDeviceSize,
    ),
>;
pub type PFN_vkCmdCopyAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        dst: VkAccelerationStructureNV,
        src: VkAccelerationStructureNV,
        mode: VkCopyAccelerationStructureModeKHR,
    ),
>;
pub type PFN_vkCmdTraceRaysNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        raygenShaderBindingTableBuffer: VkBuffer,
        raygenShaderBindingOffset: VkDeviceSize,
        missShaderBindingTableBuffer: VkBuffer,
        missShaderBindingOffset: VkDeviceSize,
        missShaderBindingStride: VkDeviceSize,
        hitShaderBindingTableBuffer: VkBuffer,
        hitShaderBindingOffset: VkDeviceSize,
        hitShaderBindingStride: VkDeviceSize,
        callableShaderBindingTableBuffer: VkBuffer,
        callableShaderBindingOffset: VkDeviceSize,
        callableShaderBindingStride: VkDeviceSize,
        width: u32,
        height: u32,
        depth: u32,
    ),
>;
pub type PFN_vkCreateRayTracingPipelinesNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingShaderGroupHandlesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingShaderGroupHandlesNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetAccelerationStructureHandleNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureNV,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureNV,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkCompileDeferredNV = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pipeline: VkPipeline, shader: u32) -> VkResult,
>;
extern "system" {
    pub fn vkCreateAccelerationStructureNV(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureNV,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyAccelerationStructureNV(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureNV,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetAccelerationStructureMemoryRequirementsNV(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2KHR,
    );
}
extern "system" {
    pub fn vkBindAccelerationStructureMemoryNV(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindAccelerationStructureMemoryInfoNV,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdBuildAccelerationStructureNV(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkAccelerationStructureInfoNV,
        instanceData: VkBuffer,
        instanceOffset: VkDeviceSize,
        update: VkBool32,
        dst: VkAccelerationStructureNV,
        src: VkAccelerationStructureNV,
        scratch: VkBuffer,
        scratchOffset: VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdCopyAccelerationStructureNV(
        commandBuffer: VkCommandBuffer,
        dst: VkAccelerationStructureNV,
        src: VkAccelerationStructureNV,
        mode: VkCopyAccelerationStructureModeKHR,
    );
}
extern "system" {
    pub fn vkCmdTraceRaysNV(
        commandBuffer: VkCommandBuffer,
        raygenShaderBindingTableBuffer: VkBuffer,
        raygenShaderBindingOffset: VkDeviceSize,
        missShaderBindingTableBuffer: VkBuffer,
        missShaderBindingOffset: VkDeviceSize,
        missShaderBindingStride: VkDeviceSize,
        hitShaderBindingTableBuffer: VkBuffer,
        hitShaderBindingOffset: VkDeviceSize,
        hitShaderBindingStride: VkDeviceSize,
        callableShaderBindingTableBuffer: VkBuffer,
        callableShaderBindingOffset: VkDeviceSize,
        callableShaderBindingStride: VkDeviceSize,
        width: u32,
        height: u32,
        depth: u32,
    );
}
extern "system" {
    pub fn vkCreateRayTracingPipelinesNV(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetRayTracingShaderGroupHandlesKHR(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetRayTracingShaderGroupHandlesNV(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetAccelerationStructureHandleNV(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureNV,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdWriteAccelerationStructuresPropertiesNV(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureNV,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    );
}
extern "system" {
    pub fn vkCompileDeferredNV(device: VkDevice, pipeline: VkPipeline, shader: u32) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub representativeFragmentTest: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).representativeFragmentTest) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV),
            "::",
            stringify!(representativeFragmentTest)
        )
    );
}
impl Default for VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub representativeFragmentTestEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPipelineRepresentativeFragmentTestStateCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineRepresentativeFragmentTestStateCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRepresentativeFragmentTestStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRepresentativeFragmentTestStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRepresentativeFragmentTestStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRepresentativeFragmentTestStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).representativeFragmentTestEnable) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRepresentativeFragmentTestStateCreateInfoNV),
            "::",
            stringify!(representativeFragmentTestEnable)
        )
    );
}
impl Default for VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageViewType: VkImageViewType,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageViewImageFormatInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImageViewImageFormatInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageViewImageFormatInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageViewImageFormatInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageViewImageFormatInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageViewImageFormatInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageViewImageFormatInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageViewImageFormatInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageViewType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageViewImageFormatInfoEXT),
            "::",
            stringify!(imageViewType)
        )
    );
}
impl Default for VkPhysicalDeviceImageViewImageFormatInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub filterCubic: VkBool32,
    pub filterCubicMinmax: VkBool32,
}
#[test]
fn bindgen_test_layout_VkFilterCubicImageViewImageFormatPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkFilterCubicImageViewImageFormatPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFilterCubicImageViewImageFormatPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkFilterCubicImageViewImageFormatPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filterCubic) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT),
            "::",
            stringify!(filterCubic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filterCubicMinmax) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFilterCubicImageViewImageFormatPropertiesEXT),
            "::",
            stringify!(filterCubicMinmax)
        )
    );
}
impl Default for VkFilterCubicImageViewImageFormatPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::VkQueueGlobalPriorityKHR as VkQueueGlobalPriorityEXT;
pub type VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfoKHR;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImportMemoryHostPointerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
    pub pHostPointer: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkImportMemoryHostPointerInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImportMemoryHostPointerInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImportMemoryHostPointerInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkImportMemoryHostPointerInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImportMemoryHostPointerInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImportMemoryHostPointerInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryHostPointerInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryHostPointerInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryHostPointerInfoEXT),
            "::",
            stringify!(handleType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pHostPointer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImportMemoryHostPointerInfoEXT),
            "::",
            stringify!(pHostPointer)
        )
    );
}
impl Default for VkImportMemoryHostPointerInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryHostPointerPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryTypeBits: u32,
}
#[test]
fn bindgen_test_layout_VkMemoryHostPointerPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryHostPointerPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryHostPointerPropertiesEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryHostPointerPropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryHostPointerPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkMemoryHostPointerPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHostPointerPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHostPointerPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryTypeBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryHostPointerPropertiesEXT),
            "::",
            stringify!(memoryTypeBits)
        )
    );
}
impl Default for VkMemoryHostPointerPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minImportedHostPointerAlignment: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalMemoryHostPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExternalMemoryHostPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minImportedHostPointerAlignment) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT),
            "::",
            stringify!(minImportedHostPointerAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetMemoryHostPointerPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        pHostPointer: *const ::std::os::raw::c_void,
        pMemoryHostPointerProperties: *mut VkMemoryHostPointerPropertiesEXT,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetMemoryHostPointerPropertiesEXT(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        pHostPointer: *const ::std::os::raw::c_void,
        pMemoryHostPointerProperties: *mut VkMemoryHostPointerPropertiesEXT,
    ) -> VkResult;
}
pub type PFN_vkCmdWriteBufferMarkerAMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    ),
>;
extern "system" {
    pub fn vkCmdWriteBufferMarkerAMD(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPipelineCompilerControlFlagBitsAMD {
    VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 2147483647,
}
pub type VkPipelineCompilerControlFlagsAMD = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineCompilerControlCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub compilerControlFlags: VkPipelineCompilerControlFlagsAMD,
}
#[test]
fn bindgen_test_layout_VkPipelineCompilerControlCreateInfoAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineCompilerControlCreateInfoAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCompilerControlCreateInfoAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineCompilerControlCreateInfoAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCompilerControlCreateInfoAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineCompilerControlCreateInfoAMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCompilerControlCreateInfoAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCompilerControlCreateInfoAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compilerControlFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCompilerControlCreateInfoAMD),
            "::",
            stringify!(compilerControlFlags)
        )
    );
}
impl Default for VkPipelineCompilerControlCreateInfoAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkTimeDomainEXT {
    VK_TIME_DOMAIN_DEVICE_EXT = 0,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
    VK_TIME_DOMAIN_MAX_ENUM_EXT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCalibratedTimestampInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub timeDomain: VkTimeDomainEXT,
}
#[test]
fn bindgen_test_layout_VkCalibratedTimestampInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkCalibratedTimestampInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCalibratedTimestampInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkCalibratedTimestampInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCalibratedTimestampInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCalibratedTimestampInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCalibratedTimestampInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCalibratedTimestampInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeDomain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCalibratedTimestampInfoEXT),
            "::",
            stringify!(timeDomain)
        )
    );
}
impl Default for VkCalibratedTimestampInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pTimeDomainCount: *mut u32,
        pTimeDomains: *mut VkTimeDomainEXT,
    ) -> VkResult,
>;
pub type PFN_vkGetCalibratedTimestampsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        timestampCount: u32,
        pTimestampInfos: *const VkCalibratedTimestampInfoEXT,
        pTimestamps: *mut u64,
        pMaxDeviation: *mut u64,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
        physicalDevice: VkPhysicalDevice,
        pTimeDomainCount: *mut u32,
        pTimeDomains: *mut VkTimeDomainEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetCalibratedTimestampsEXT(
        device: VkDevice,
        timestampCount: u32,
        pTimestampInfos: *const VkCalibratedTimestampInfoEXT,
        pTimestamps: *mut u64,
        pMaxDeviation: *mut u64,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderCorePropertiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderEngineCount: u32,
    pub shaderArraysPerEngineCount: u32,
    pub computeUnitsPerShaderArray: u32,
    pub simdPerComputeUnit: u32,
    pub wavefrontsPerSimd: u32,
    pub wavefrontSize: u32,
    pub sgprsPerSimd: u32,
    pub minSgprAllocation: u32,
    pub maxSgprAllocation: u32,
    pub sgprAllocationGranularity: u32,
    pub vgprsPerSimd: u32,
    pub minVgprAllocation: u32,
    pub maxVgprAllocation: u32,
    pub vgprAllocationGranularity: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderCorePropertiesAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderCorePropertiesAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderCorePropertiesAMD>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderCorePropertiesAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderEngineCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(shaderEngineCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderArraysPerEngineCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(shaderArraysPerEngineCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).computeUnitsPerShaderArray) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(computeUnitsPerShaderArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).simdPerComputeUnit) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(simdPerComputeUnit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wavefrontsPerSimd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(wavefrontsPerSimd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wavefrontSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(wavefrontSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgprsPerSimd) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(sgprsPerSimd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minSgprAllocation) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(minSgprAllocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSgprAllocation) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(maxSgprAllocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgprAllocationGranularity) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(sgprAllocationGranularity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vgprsPerSimd) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(vgprsPerSimd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minVgprAllocation) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(minVgprAllocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVgprAllocation) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(maxVgprAllocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vgprAllocationGranularity) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesAMD),
            "::",
            stringify!(vgprAllocationGranularity)
        )
    );
}
impl Default for VkPhysicalDeviceShaderCorePropertiesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkMemoryOverallocationBehaviorAMD {
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceMemoryOverallocationCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub overallocationBehavior: VkMemoryOverallocationBehaviorAMD,
}
#[test]
fn bindgen_test_layout_VkDeviceMemoryOverallocationCreateInfoAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceMemoryOverallocationCreateInfoAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceMemoryOverallocationCreateInfoAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceMemoryOverallocationCreateInfoAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceMemoryOverallocationCreateInfoAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceMemoryOverallocationCreateInfoAMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOverallocationCreateInfoAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOverallocationCreateInfoAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overallocationBehavior) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryOverallocationCreateInfoAMD),
            "::",
            stringify!(overallocationBehavior)
        )
    );
}
impl Default for VkDeviceMemoryOverallocationCreateInfoAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxVertexAttribDivisor: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVertexAttribDivisor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT),
            "::",
            stringify!(maxVertexAttribDivisor)
        )
    );
}
impl Default for VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVertexInputBindingDivisorDescriptionEXT {
    pub binding: u32,
    pub divisor: u32,
}
#[test]
fn bindgen_test_layout_VkVertexInputBindingDivisorDescriptionEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkVertexInputBindingDivisorDescriptionEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVertexInputBindingDivisorDescriptionEXT>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(VkVertexInputBindingDivisorDescriptionEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkVertexInputBindingDivisorDescriptionEXT>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkVertexInputBindingDivisorDescriptionEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDivisorDescriptionEXT),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).divisor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDivisorDescriptionEXT),
            "::",
            stringify!(divisor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineVertexInputDivisorStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexBindingDivisorCount: u32,
    pub pVertexBindingDivisors: *const VkVertexInputBindingDivisorDescriptionEXT,
}
#[test]
fn bindgen_test_layout_VkPipelineVertexInputDivisorStateCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineVertexInputDivisorStateCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineVertexInputDivisorStateCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineVertexInputDivisorStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexBindingDivisorCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT),
            "::",
            stringify!(vertexBindingDivisorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVertexBindingDivisors) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineVertexInputDivisorStateCreateInfoEXT),
            "::",
            stringify!(pVertexBindingDivisors)
        )
    );
}
impl Default for VkPipelineVertexInputDivisorStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vertexAttributeInstanceRateDivisor: VkBool32,
    pub vertexAttributeInstanceRateZeroDivisor: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vertexAttributeInstanceRateDivisor) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT),
            "::",
            stringify!(vertexAttributeInstanceRateDivisor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).vertexAttributeInstanceRateZeroDivisor) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT),
            "::",
            stringify!(vertexAttributeInstanceRateZeroDivisor)
        )
    );
}
impl Default for VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::VkPipelineCreationFeedbackFlagBits as VkPipelineCreationFeedbackFlagBitsEXT;
pub type VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags;
pub type VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;
pub type VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub computeDerivativeGroupQuads: VkBool32,
    pub computeDerivativeGroupLinear: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceComputeShaderDerivativesFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).computeDerivativeGroupQuads) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV),
            "::",
            stringify!(computeDerivativeGroupQuads)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).computeDerivativeGroupLinear) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceComputeShaderDerivativesFeaturesNV),
            "::",
            stringify!(computeDerivativeGroupLinear)
        )
    );
}
impl Default for VkPhysicalDeviceComputeShaderDerivativesFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMeshShaderFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub taskShader: VkBool32,
    pub meshShader: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMeshShaderFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMeshShaderFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMeshShaderFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMeshShaderFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).taskShader) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV),
            "::",
            stringify!(taskShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meshShader) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesNV),
            "::",
            stringify!(meshShader)
        )
    );
}
impl Default for VkPhysicalDeviceMeshShaderFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMeshShaderPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxDrawMeshTasksCount: u32,
    pub maxTaskWorkGroupInvocations: u32,
    pub maxTaskWorkGroupSize: [u32; 3usize],
    pub maxTaskTotalMemorySize: u32,
    pub maxTaskOutputCount: u32,
    pub maxMeshWorkGroupInvocations: u32,
    pub maxMeshWorkGroupSize: [u32; 3usize],
    pub maxMeshTotalMemorySize: u32,
    pub maxMeshOutputVertices: u32,
    pub maxMeshOutputPrimitives: u32,
    pub maxMeshMultiviewViewCount: u32,
    pub meshOutputPerVertexGranularity: u32,
    pub meshOutputPerPrimitiveGranularity: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMeshShaderPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMeshShaderPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMeshShaderPropertiesNV>(),
        88usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMeshShaderPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDrawMeshTasksCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxDrawMeshTasksCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTaskWorkGroupInvocations) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxTaskWorkGroupInvocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTaskWorkGroupSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxTaskWorkGroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTaskTotalMemorySize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxTaskTotalMemorySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTaskOutputCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxTaskOutputCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshWorkGroupInvocations) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshWorkGroupInvocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshWorkGroupSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshWorkGroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshTotalMemorySize) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshTotalMemorySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshOutputVertices) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshOutputVertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshOutputPrimitives) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshOutputPrimitives)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshMultiviewViewCount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(maxMeshMultiviewViewCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).meshOutputPerVertexGranularity) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(meshOutputPerVertexGranularity)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).meshOutputPerPrimitiveGranularity) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesNV),
            "::",
            stringify!(meshOutputPerPrimitiveGranularity)
        )
    );
}
impl Default for VkPhysicalDeviceMeshShaderPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDrawMeshTasksIndirectCommandNV {
    pub taskCount: u32,
    pub firstTask: u32,
}
#[test]
fn bindgen_test_layout_VkDrawMeshTasksIndirectCommandNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkDrawMeshTasksIndirectCommandNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDrawMeshTasksIndirectCommandNV>(),
        8usize,
        concat!("Size of: ", stringify!(VkDrawMeshTasksIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrawMeshTasksIndirectCommandNV>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkDrawMeshTasksIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).taskCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawMeshTasksIndirectCommandNV),
            "::",
            stringify!(taskCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstTask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawMeshTasksIndirectCommandNV),
            "::",
            stringify!(firstTask)
        )
    );
}
pub type PFN_vkCmdDrawMeshTasksNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectCountNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
extern "system" {
    pub fn vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32);
}
extern "system" {
    pub fn vkCmdDrawMeshTasksIndirectNV(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawMeshTasksIndirectCountNV(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
pub type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV =
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageFootprint: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderImageFootprintFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderImageFootprintFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderImageFootprintFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderImageFootprintFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderImageFootprintFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderImageFootprintFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageFootprint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderImageFootprintFeaturesNV),
            "::",
            stringify!(imageFootprint)
        )
    );
}
impl Default for VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub exclusiveScissorCount: u32,
    pub pExclusiveScissors: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportExclusiveScissorStateCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineViewportExclusiveScissorStateCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exclusiveScissorCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV),
            "::",
            stringify!(exclusiveScissorCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pExclusiveScissors) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportExclusiveScissorStateCreateInfoNV),
            "::",
            stringify!(pExclusiveScissors)
        )
    );
}
impl Default for VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub exclusiveScissor: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExclusiveScissorFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExclusiveScissorFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExclusiveScissorFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExclusiveScissorFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExclusiveScissorFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExclusiveScissorFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExclusiveScissorFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExclusiveScissorFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exclusiveScissor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExclusiveScissorFeaturesNV),
            "::",
            stringify!(exclusiveScissor)
        )
    );
}
impl Default for VkPhysicalDeviceExclusiveScissorFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetExclusiveScissorEnableNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissorEnables: *const VkBool32,
    ),
>;
pub type PFN_vkCmdSetExclusiveScissorNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissors: *const VkRect2D,
    ),
>;
extern "system" {
    pub fn vkCmdSetExclusiveScissorEnableNV(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissorEnables: *const VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetExclusiveScissorNV(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissors: *const VkRect2D,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueueFamilyCheckpointPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub checkpointExecutionStageMask: VkPipelineStageFlags,
}
#[test]
fn bindgen_test_layout_VkQueueFamilyCheckpointPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueueFamilyCheckpointPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueueFamilyCheckpointPropertiesNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkQueueFamilyCheckpointPropertiesNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueueFamilyCheckpointPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkQueueFamilyCheckpointPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyCheckpointPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyCheckpointPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).checkpointExecutionStageMask) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueueFamilyCheckpointPropertiesNV),
            "::",
            stringify!(checkpointExecutionStageMask)
        )
    );
}
impl Default for VkQueueFamilyCheckpointPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCheckpointDataNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stage: VkPipelineStageFlagBits,
    pub pCheckpointMarker: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkCheckpointDataNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkCheckpointDataNV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCheckpointDataNV>(),
        32usize,
        concat!("Size of: ", stringify!(VkCheckpointDataNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCheckpointDataNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCheckpointDataNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointDataNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointDataNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointDataNV),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCheckpointMarker) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCheckpointDataNV),
            "::",
            stringify!(pCheckpointMarker)
        )
    );
}
impl Default for VkCheckpointDataNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetCheckpointNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCheckpointMarker: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkGetQueueCheckpointDataNV = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointDataNV,
    ),
>;
extern "system" {
    pub fn vkCmdSetCheckpointNV(
        commandBuffer: VkCommandBuffer,
        pCheckpointMarker: *const ::std::os::raw::c_void,
    );
}
extern "system" {
    pub fn vkGetQueueCheckpointDataNV(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointDataNV,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderIntegerFunctions2: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderIntegerFunctions2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL),
            "::",
            stringify!(shaderIntegerFunctions2)
        )
    );
}
impl Default for VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPerformanceConfigurationINTEL_T {
    _unused: [u8; 0],
}
pub type VkPerformanceConfigurationINTEL = *mut VkPerformanceConfigurationINTEL_T;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPerformanceConfigurationTypeINTEL {
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkQueryPoolSamplingModeINTEL {
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPerformanceOverrideTypeINTEL {
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPerformanceParameterTypeINTEL {
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPerformanceValueTypeINTEL {
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceValueDataINTEL {
    pub value32: u32,
    pub value64: u64,
    pub valueFloat: f32,
    pub valueBool: VkBool32,
    pub valueString: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_VkPerformanceValueDataINTEL() {
    const UNINIT: ::std::mem::MaybeUninit<VkPerformanceValueDataINTEL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceValueDataINTEL>(),
        8usize,
        concat!("Size of: ", stringify!(VkPerformanceValueDataINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceValueDataINTEL>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceValueDataINTEL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueDataINTEL),
            "::",
            stringify!(value32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueDataINTEL),
            "::",
            stringify!(value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valueFloat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueDataINTEL),
            "::",
            stringify!(valueFloat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valueBool) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueDataINTEL),
            "::",
            stringify!(valueBool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valueString) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueDataINTEL),
            "::",
            stringify!(valueString)
        )
    );
}
impl Default for VkPerformanceValueDataINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceValueINTEL {
    pub type_: VkPerformanceValueTypeINTEL,
    pub data: VkPerformanceValueDataINTEL,
}
#[test]
fn bindgen_test_layout_VkPerformanceValueINTEL() {
    const UNINIT: ::std::mem::MaybeUninit<VkPerformanceValueINTEL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceValueINTEL>(),
        16usize,
        concat!("Size of: ", stringify!(VkPerformanceValueINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceValueINTEL>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceValueINTEL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueINTEL),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceValueINTEL),
            "::",
            stringify!(data)
        )
    );
}
impl Default for VkPerformanceValueINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkInitializePerformanceApiInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkInitializePerformanceApiInfoINTEL() {
    const UNINIT: ::std::mem::MaybeUninit<VkInitializePerformanceApiInfoINTEL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkInitializePerformanceApiInfoINTEL>(),
        24usize,
        concat!("Size of: ", stringify!(VkInitializePerformanceApiInfoINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkInitializePerformanceApiInfoINTEL>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkInitializePerformanceApiInfoINTEL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInitializePerformanceApiInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInitializePerformanceApiInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkInitializePerformanceApiInfoINTEL),
            "::",
            stringify!(pUserData)
        )
    );
}
impl Default for VkInitializePerformanceApiInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub performanceCountersSampling: VkQueryPoolSamplingModeINTEL,
}
#[test]
fn bindgen_test_layout_VkQueryPoolPerformanceQueryCreateInfoINTEL() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueryPoolPerformanceQueryCreateInfoINTEL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueryPoolPerformanceQueryCreateInfoINTEL>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkQueryPoolPerformanceQueryCreateInfoINTEL)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueryPoolPerformanceQueryCreateInfoINTEL>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkQueryPoolPerformanceQueryCreateInfoINTEL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceQueryCreateInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceQueryCreateInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).performanceCountersSampling) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryPoolPerformanceQueryCreateInfoINTEL),
            "::",
            stringify!(performanceCountersSampling)
        )
    );
}
impl Default for VkQueryPoolPerformanceQueryCreateInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPerformanceMarkerInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub marker: u64,
}
#[test]
fn bindgen_test_layout_VkPerformanceMarkerInfoINTEL() {
    const UNINIT: ::std::mem::MaybeUninit<VkPerformanceMarkerInfoINTEL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceMarkerInfoINTEL>(),
        24usize,
        concat!("Size of: ", stringify!(VkPerformanceMarkerInfoINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceMarkerInfoINTEL>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceMarkerInfoINTEL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceMarkerInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceMarkerInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceMarkerInfoINTEL),
            "::",
            stringify!(marker)
        )
    );
}
impl Default for VkPerformanceMarkerInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPerformanceStreamMarkerInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub marker: u32,
}
#[test]
fn bindgen_test_layout_VkPerformanceStreamMarkerInfoINTEL() {
    const UNINIT: ::std::mem::MaybeUninit<VkPerformanceStreamMarkerInfoINTEL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceStreamMarkerInfoINTEL>(),
        24usize,
        concat!("Size of: ", stringify!(VkPerformanceStreamMarkerInfoINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceStreamMarkerInfoINTEL>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPerformanceStreamMarkerInfoINTEL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceStreamMarkerInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceStreamMarkerInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).marker) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceStreamMarkerInfoINTEL),
            "::",
            stringify!(marker)
        )
    );
}
impl Default for VkPerformanceStreamMarkerInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPerformanceOverrideInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkPerformanceOverrideTypeINTEL,
    pub enable: VkBool32,
    pub parameter: u64,
}
#[test]
fn bindgen_test_layout_VkPerformanceOverrideInfoINTEL() {
    const UNINIT: ::std::mem::MaybeUninit<VkPerformanceOverrideInfoINTEL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceOverrideInfoINTEL>(),
        32usize,
        concat!("Size of: ", stringify!(VkPerformanceOverrideInfoINTEL))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceOverrideInfoINTEL>(),
        8usize,
        concat!("Alignment of ", stringify!(VkPerformanceOverrideInfoINTEL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceOverrideInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceOverrideInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceOverrideInfoINTEL),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceOverrideInfoINTEL),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameter) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceOverrideInfoINTEL),
            "::",
            stringify!(parameter)
        )
    );
}
impl Default for VkPerformanceOverrideInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPerformanceConfigurationAcquireInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkPerformanceConfigurationTypeINTEL,
}
#[test]
fn bindgen_test_layout_VkPerformanceConfigurationAcquireInfoINTEL() {
    const UNINIT: ::std::mem::MaybeUninit<VkPerformanceConfigurationAcquireInfoINTEL> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPerformanceConfigurationAcquireInfoINTEL>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPerformanceConfigurationAcquireInfoINTEL)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPerformanceConfigurationAcquireInfoINTEL>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPerformanceConfigurationAcquireInfoINTEL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceConfigurationAcquireInfoINTEL),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceConfigurationAcquireInfoINTEL),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPerformanceConfigurationAcquireInfoINTEL),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for VkPerformanceConfigurationAcquireInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkInitializePerformanceApiINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInitializeInfo: *const VkInitializePerformanceApiInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkUninitializePerformanceApiINTEL =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice)>;
pub type PFN_vkCmdSetPerformanceMarkerINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceMarkerInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetPerformanceStreamMarkerINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceStreamMarkerInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetPerformanceOverrideINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pOverrideInfo: *const VkPerformanceOverrideInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkAcquirePerformanceConfigurationINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAcquireInfo: *const VkPerformanceConfigurationAcquireInfoINTEL,
        pConfiguration: *mut VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkReleasePerformanceConfigurationINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkQueueSetPerformanceConfigurationINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkGetPerformanceParameterINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        parameter: VkPerformanceParameterTypeINTEL,
        pValue: *mut VkPerformanceValueINTEL,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkInitializePerformanceApiINTEL(
        device: VkDevice,
        pInitializeInfo: *const VkInitializePerformanceApiInfoINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkUninitializePerformanceApiINTEL(device: VkDevice);
}
extern "system" {
    pub fn vkCmdSetPerformanceMarkerINTEL(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceMarkerInfoINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdSetPerformanceStreamMarkerINTEL(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceStreamMarkerInfoINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdSetPerformanceOverrideINTEL(
        commandBuffer: VkCommandBuffer,
        pOverrideInfo: *const VkPerformanceOverrideInfoINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkAcquirePerformanceConfigurationINTEL(
        device: VkDevice,
        pAcquireInfo: *const VkPerformanceConfigurationAcquireInfoINTEL,
        pConfiguration: *mut VkPerformanceConfigurationINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkReleasePerformanceConfigurationINTEL(
        device: VkDevice,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkQueueSetPerformanceConfigurationINTEL(
        queue: VkQueue,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPerformanceParameterINTEL(
        device: VkDevice,
        parameter: VkPerformanceParameterTypeINTEL,
        pValue: *mut VkPerformanceValueINTEL,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pciDomain: u32,
    pub pciBus: u32,
    pub pciDevice: u32,
    pub pciFunction: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePCIBusInfoPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePCIBusInfoPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePCIBusInfoPropertiesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePCIBusInfoPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciDomain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(pciDomain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciBus) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(pciBus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciDevice) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(pciDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pciFunction) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePCIBusInfoPropertiesEXT),
            "::",
            stringify!(pciFunction)
        )
    );
}
impl Default for VkPhysicalDevicePCIBusInfoPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub localDimmingSupport: VkBool32,
}
#[test]
fn bindgen_test_layout_VkDisplayNativeHdrSurfaceCapabilitiesAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkDisplayNativeHdrSurfaceCapabilitiesAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDisplayNativeHdrSurfaceCapabilitiesAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDisplayNativeHdrSurfaceCapabilitiesAMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayNativeHdrSurfaceCapabilitiesAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayNativeHdrSurfaceCapabilitiesAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).localDimmingSupport) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDisplayNativeHdrSurfaceCapabilitiesAMD),
            "::",
            stringify!(localDimmingSupport)
        )
    );
}
impl Default for VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub localDimmingEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSwapchainDisplayNativeHdrCreateInfoAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkSwapchainDisplayNativeHdrCreateInfoAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainDisplayNativeHdrCreateInfoAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkSwapchainDisplayNativeHdrCreateInfoAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainDisplayNativeHdrCreateInfoAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSwapchainDisplayNativeHdrCreateInfoAMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainDisplayNativeHdrCreateInfoAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainDisplayNativeHdrCreateInfoAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).localDimmingEnable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainDisplayNativeHdrCreateInfoAMD),
            "::",
            stringify!(localDimmingEnable)
        )
    );
}
impl Default for VkSwapchainDisplayNativeHdrCreateInfoAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkSetLocalDimmingAMD = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32),
>;
extern "system" {
    pub fn vkSetLocalDimmingAMD(
        device: VkDevice,
        swapChain: VkSwapchainKHR,
        localDimmingEnable: VkBool32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentDensityMap: VkBool32,
    pub fragmentDensityMapDynamic: VkBool32,
    pub fragmentDensityMapNonSubsampledImages: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentDensityMapFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentDensityMapFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentDensityMap) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT),
            "::",
            stringify!(fragmentDensityMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentDensityMapDynamic) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT),
            "::",
            stringify!(fragmentDensityMapDynamic)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentDensityMapNonSubsampledImages) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT),
            "::",
            stringify!(fragmentDensityMapNonSubsampledImages)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minFragmentDensityTexelSize: VkExtent2D,
    pub maxFragmentDensityTexelSize: VkExtent2D,
    pub fragmentDensityInvocations: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentDensityMapPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentDensityMapPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minFragmentDensityTexelSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT),
            "::",
            stringify!(minFragmentDensityTexelSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxFragmentDensityTexelSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT),
            "::",
            stringify!(maxFragmentDensityTexelSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentDensityInvocations) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT),
            "::",
            stringify!(fragmentDensityInvocations)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fragmentDensityMapAttachment: VkAttachmentReference,
}
#[test]
fn bindgen_test_layout_VkRenderPassFragmentDensityMapCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassFragmentDensityMapCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassFragmentDensityMapCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkRenderPassFragmentDensityMapCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassFragmentDensityMapCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassFragmentDensityMapCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassFragmentDensityMapCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassFragmentDensityMapCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentDensityMapAttachment) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassFragmentDensityMapCreateInfoEXT),
            "::",
            stringify!(fragmentDensityMapAttachment)
        )
    );
}
impl Default for VkRenderPassFragmentDensityMapCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;
pub type VkPhysicalDeviceSubgroupSizeControlFeaturesEXT =
    VkPhysicalDeviceSubgroupSizeControlFeatures;
pub type VkPhysicalDeviceSubgroupSizeControlPropertiesEXT =
    VkPhysicalDeviceSubgroupSizeControlProperties;
pub type VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT =
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkShaderCorePropertiesFlagBitsAMD {
    VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 2147483647,
}
pub type VkShaderCorePropertiesFlagsAMD = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderCoreProperties2AMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD,
    pub activeComputeUnitCount: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderCoreProperties2AMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderCoreProperties2AMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderCoreProperties2AMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderCoreProperties2AMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderCoreFeatures) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD),
            "::",
            stringify!(shaderCoreFeatures)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activeComputeUnitCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreProperties2AMD),
            "::",
            stringify!(activeComputeUnitCount)
        )
    );
}
impl Default for VkPhysicalDeviceShaderCoreProperties2AMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceCoherentMemory: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCoherentMemoryFeaturesAMD() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceCoherentMemoryFeaturesAMD> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCoherentMemoryFeaturesAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCoherentMemoryFeaturesAMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoherentMemoryFeaturesAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoherentMemoryFeaturesAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceCoherentMemory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoherentMemoryFeaturesAMD),
            "::",
            stringify!(deviceCoherentMemory)
        )
    );
}
impl Default for VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderImageInt64Atomics: VkBool32,
    pub sparseImageInt64Atomics: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderImageInt64Atomics) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT),
            "::",
            stringify!(shaderImageInt64Atomics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseImageInt64Atomics) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT),
            "::",
            stringify!(sparseImageInt64Atomics)
        )
    );
}
impl Default for VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub heapBudget: [VkDeviceSize; 16usize],
    pub heapUsage: [VkDeviceSize; 16usize],
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryBudgetPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMemoryBudgetPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>(),
        272usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heapBudget) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT),
            "::",
            stringify!(heapBudget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heapUsage) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryBudgetPropertiesEXT),
            "::",
            stringify!(heapUsage)
        )
    );
}
impl Default for VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryPriority: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryPriorityFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMemoryPriorityFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMemoryPriorityFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryPriorityFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryPriorityFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryPriorityFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryPriority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryPriorityFeaturesEXT),
            "::",
            stringify!(memoryPriority)
        )
    );
}
impl Default for VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkMemoryPriorityAllocateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub priority: f32,
}
#[test]
fn bindgen_test_layout_VkMemoryPriorityAllocateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryPriorityAllocateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryPriorityAllocateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkMemoryPriorityAllocateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryPriorityAllocateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryPriorityAllocateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryPriorityAllocateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryPriorityAllocateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryPriorityAllocateInfoEXT),
            "::",
            stringify!(priority)
        )
    );
}
impl Default for VkMemoryPriorityAllocateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub dedicatedAllocationImageAliasing: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<
        VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dedicatedAllocationImageAliasing) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV),
            "::",
            stringify!(dedicatedAllocationImageAliasing)
        )
    );
}
impl Default for VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferDeviceAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT),
            "::",
            stringify!(bufferDeviceAddress)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bufferDeviceAddressCaptureReplay) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT),
            "::",
            stringify!(bufferDeviceAddressCaptureReplay)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bufferDeviceAddressMultiDevice) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT),
            "::",
            stringify!(bufferDeviceAddressMultiDevice)
        )
    );
}
impl Default for VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub type VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferDeviceAddressCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceAddress: VkDeviceAddress,
}
#[test]
fn bindgen_test_layout_VkBufferDeviceAddressCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferDeviceAddressCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferDeviceAddressCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkBufferDeviceAddressCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferDeviceAddressCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBufferDeviceAddressCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceAddress) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferDeviceAddressCreateInfoEXT),
            "::",
            stringify!(deviceAddress)
        )
    );
}
impl Default for VkBufferDeviceAddressCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetBufferDeviceAddressEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
extern "system" {
    pub fn vkGetBufferDeviceAddressEXT(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress;
}
pub use self::VkToolPurposeFlagBits as VkToolPurposeFlagBitsEXT;
pub type VkToolPurposeFlagsEXT = VkToolPurposeFlags;
pub type VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;
pub type PFN_vkGetPhysicalDeviceToolPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolProperties,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceToolPropertiesEXT(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolProperties,
    ) -> VkResult;
}
pub type VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkValidationFeatureEnableEXT {
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkValidationFeatureDisableEXT {
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
    VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7,
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkValidationFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub enabledValidationFeatureCount: u32,
    pub pEnabledValidationFeatures: *const VkValidationFeatureEnableEXT,
    pub disabledValidationFeatureCount: u32,
    pub pDisabledValidationFeatures: *const VkValidationFeatureDisableEXT,
}
#[test]
fn bindgen_test_layout_VkValidationFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkValidationFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkValidationFeaturesEXT>(),
        48usize,
        concat!("Size of: ", stringify!(VkValidationFeaturesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkValidationFeaturesEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkValidationFeaturesEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).enabledValidationFeatureCount) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(enabledValidationFeatureCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pEnabledValidationFeatures) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(pEnabledValidationFeatures)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).disabledValidationFeatureCount) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(disabledValidationFeatureCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDisabledValidationFeatures) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkValidationFeaturesEXT),
            "::",
            stringify!(pDisabledValidationFeatures)
        )
    );
}
impl Default for VkValidationFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkComponentTypeNV {
    VK_COMPONENT_TYPE_FLOAT16_NV = 0,
    VK_COMPONENT_TYPE_FLOAT32_NV = 1,
    VK_COMPONENT_TYPE_FLOAT64_NV = 2,
    VK_COMPONENT_TYPE_SINT8_NV = 3,
    VK_COMPONENT_TYPE_SINT16_NV = 4,
    VK_COMPONENT_TYPE_SINT32_NV = 5,
    VK_COMPONENT_TYPE_SINT64_NV = 6,
    VK_COMPONENT_TYPE_UINT8_NV = 7,
    VK_COMPONENT_TYPE_UINT16_NV = 8,
    VK_COMPONENT_TYPE_UINT32_NV = 9,
    VK_COMPONENT_TYPE_UINT64_NV = 10,
    VK_COMPONENT_TYPE_MAX_ENUM_NV = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkScopeNV {
    VK_SCOPE_DEVICE_NV = 1,
    VK_SCOPE_WORKGROUP_NV = 2,
    VK_SCOPE_SUBGROUP_NV = 3,
    VK_SCOPE_QUEUE_FAMILY_NV = 5,
    VK_SCOPE_MAX_ENUM_NV = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCooperativeMatrixPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub MSize: u32,
    pub NSize: u32,
    pub KSize: u32,
    pub AType: VkComponentTypeNV,
    pub BType: VkComponentTypeNV,
    pub CType: VkComponentTypeNV,
    pub DType: VkComponentTypeNV,
    pub scope: VkScopeNV,
}
#[test]
fn bindgen_test_layout_VkCooperativeMatrixPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkCooperativeMatrixPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCooperativeMatrixPropertiesNV>(),
        48usize,
        concat!("Size of: ", stringify!(VkCooperativeMatrixPropertiesNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCooperativeMatrixPropertiesNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCooperativeMatrixPropertiesNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(MSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(NSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(KSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AType) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(AType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BType) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(BType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CType) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(CType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DType) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(DType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCooperativeMatrixPropertiesNV),
            "::",
            stringify!(scope)
        )
    );
}
impl Default for VkCooperativeMatrixPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeMatrix: VkBool32,
    pub cooperativeMatrixRobustBufferAccess: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCooperativeMatrixFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceCooperativeMatrixFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cooperativeMatrix) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV),
            "::",
            stringify!(cooperativeMatrix)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cooperativeMatrixRobustBufferAccess) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixFeaturesNV),
            "::",
            stringify!(cooperativeMatrixRobustBufferAccess)
        )
    );
}
impl Default for VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeMatrixSupportedStages: VkShaderStageFlags,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCooperativeMatrixPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceCooperativeMatrixPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCooperativeMatrixPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).cooperativeMatrixSupportedStages) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCooperativeMatrixPropertiesNV),
            "::",
            stringify!(cooperativeMatrixSupportedStages)
        )
    );
}
impl Default for VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixPropertiesNV,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixPropertiesNV,
    ) -> VkResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCoverageReductionModeNV {
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647,
}
pub type VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub coverageReductionMode: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCoverageReductionModeFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceCoverageReductionModeFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCoverageReductionModeFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCoverageReductionModeFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoverageReductionModeFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoverageReductionModeFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coverageReductionMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCoverageReductionModeFeaturesNV),
            "::",
            stringify!(coverageReductionMode)
        )
    );
}
impl Default for VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineCoverageReductionStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCoverageReductionStateCreateFlagsNV,
    pub coverageReductionMode: VkCoverageReductionModeNV,
}
#[test]
fn bindgen_test_layout_VkPipelineCoverageReductionStateCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineCoverageReductionStateCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineCoverageReductionStateCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineCoverageReductionStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coverageReductionMode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineCoverageReductionStateCreateInfoNV),
            "::",
            stringify!(coverageReductionMode)
        )
    );
}
impl Default for VkPipelineCoverageReductionStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkFramebufferMixedSamplesCombinationNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub coverageReductionMode: VkCoverageReductionModeNV,
    pub rasterizationSamples: VkSampleCountFlagBits,
    pub depthStencilSamples: VkSampleCountFlags,
    pub colorSamples: VkSampleCountFlags,
}
#[test]
fn bindgen_test_layout_VkFramebufferMixedSamplesCombinationNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkFramebufferMixedSamplesCombinationNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkFramebufferMixedSamplesCombinationNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkFramebufferMixedSamplesCombinationNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkFramebufferMixedSamplesCombinationNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).coverageReductionMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(coverageReductionMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rasterizationSamples) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(rasterizationSamples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthStencilSamples) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(depthStencilSamples)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorSamples) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkFramebufferMixedSamplesCombinationNV),
            "::",
            stringify!(colorSamples)
        )
    );
}
impl Default for VkFramebufferMixedSamplesCombinationNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV =
    ::std::option::Option<
        unsafe extern "system" fn(
            physicalDevice: VkPhysicalDevice,
            pCombinationCount: *mut u32,
            pCombinations: *mut VkFramebufferMixedSamplesCombinationNV,
        ) -> VkResult,
    >;
extern "system" {
    pub fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        physicalDevice: VkPhysicalDevice,
        pCombinationCount: *mut u32,
        pCombinations: *mut VkFramebufferMixedSamplesCombinationNV,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentShaderSampleInterlock: VkBool32,
    pub fragmentShaderPixelInterlock: VkBool32,
    pub fragmentShaderShadingRateInterlock: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShaderSampleInterlock) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT),
            "::",
            stringify!(fragmentShaderSampleInterlock)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShaderPixelInterlock) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT),
            "::",
            stringify!(fragmentShaderPixelInterlock)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentShaderShadingRateInterlock) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT),
            "::",
            stringify!(fragmentShaderShadingRateInterlock)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub ycbcrImageArrays: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ycbcrImageArrays) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT),
            "::",
            stringify!(ycbcrImageArrays)
        )
    );
}
impl Default for VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkProvokingVertexModeEXT {
    VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0,
    VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1,
    VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceProvokingVertexFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub provokingVertexLast: VkBool32,
    pub transformFeedbackPreservesProvokingVertex: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceProvokingVertexFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceProvokingVertexFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceProvokingVertexFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceProvokingVertexFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceProvokingVertexFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceProvokingVertexFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProvokingVertexFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProvokingVertexFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).provokingVertexLast) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProvokingVertexFeaturesEXT),
            "::",
            stringify!(provokingVertexLast)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).transformFeedbackPreservesProvokingVertex) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProvokingVertexFeaturesEXT),
            "::",
            stringify!(transformFeedbackPreservesProvokingVertex)
        )
    );
}
impl Default for VkPhysicalDeviceProvokingVertexFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceProvokingVertexPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub provokingVertexModePerPipeline: VkBool32,
    pub transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceProvokingVertexPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceProvokingVertexPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceProvokingVertexPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceProvokingVertexPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceProvokingVertexPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceProvokingVertexPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProvokingVertexPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProvokingVertexPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).provokingVertexModePerPipeline) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProvokingVertexPropertiesEXT),
            "::",
            stringify!(provokingVertexModePerPipeline)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).transformFeedbackPreservesTriangleFanProvokingVertex)
                as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceProvokingVertexPropertiesEXT),
            "::",
            stringify!(transformFeedbackPreservesTriangleFanProvokingVertex)
        )
    );
}
impl Default for VkPhysicalDeviceProvokingVertexPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub provokingVertexMode: VkProvokingVertexModeEXT,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<
        VkPipelineRasterizationProvokingVertexStateCreateInfoEXT,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationProvokingVertexStateCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationProvokingVertexStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).provokingVertexMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationProvokingVertexStateCreateInfoEXT),
            "::",
            stringify!(provokingVertexMode)
        )
    );
}
impl Default for VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkHeadlessSurfaceCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkHeadlessSurfaceCreateFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkHeadlessSurfaceCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkHeadlessSurfaceCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkHeadlessSurfaceCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkHeadlessSurfaceCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkHeadlessSurfaceCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkHeadlessSurfaceCreateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHeadlessSurfaceCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHeadlessSurfaceCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkHeadlessSurfaceCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkHeadlessSurfaceCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateHeadlessSurfaceEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkHeadlessSurfaceCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkCreateHeadlessSurfaceEXT(
        instance: VkInstance,
        pCreateInfo: *const VkHeadlessSurfaceCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkLineRasterizationModeEXT {
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceLineRasterizationFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rectangularLines: VkBool32,
    pub bresenhamLines: VkBool32,
    pub smoothLines: VkBool32,
    pub stippledRectangularLines: VkBool32,
    pub stippledBresenhamLines: VkBool32,
    pub stippledSmoothLines: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceLineRasterizationFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceLineRasterizationFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceLineRasterizationFeaturesEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceLineRasterizationFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rectangularLines) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(rectangularLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bresenhamLines) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(bresenhamLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smoothLines) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(smoothLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stippledRectangularLines) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(stippledRectangularLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stippledBresenhamLines) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(stippledBresenhamLines)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stippledSmoothLines) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationFeaturesEXT),
            "::",
            stringify!(stippledSmoothLines)
        )
    );
}
impl Default for VkPhysicalDeviceLineRasterizationFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceLineRasterizationPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub lineSubPixelPrecisionBits: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceLineRasterizationPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceLineRasterizationPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceLineRasterizationPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceLineRasterizationPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceLineRasterizationPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceLineRasterizationPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineSubPixelPrecisionBits) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLineRasterizationPropertiesEXT),
            "::",
            stringify!(lineSubPixelPrecisionBits)
        )
    );
}
impl Default for VkPhysicalDeviceLineRasterizationPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineRasterizationLineStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub lineRasterizationMode: VkLineRasterizationModeEXT,
    pub stippledLineEnable: VkBool32,
    pub lineStippleFactor: u32,
    pub lineStipplePattern: u16,
}
#[test]
fn bindgen_test_layout_VkPipelineRasterizationLineStateCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineRasterizationLineStateCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineRasterizationLineStateCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineRasterizationLineStateCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineRasterizationMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(lineRasterizationMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stippledLineEnable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(stippledLineEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineStippleFactor) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(lineStippleFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineStipplePattern) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineRasterizationLineStateCreateInfoEXT),
            "::",
            stringify!(lineStipplePattern)
        )
    );
}
impl Default for VkPipelineRasterizationLineStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetLineStippleEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    ),
>;
extern "system" {
    pub fn vkCmdSetLineStippleEXT(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderBufferFloat32Atomics: VkBool32,
    pub shaderBufferFloat32AtomicAdd: VkBool32,
    pub shaderBufferFloat64Atomics: VkBool32,
    pub shaderBufferFloat64AtomicAdd: VkBool32,
    pub shaderSharedFloat32Atomics: VkBool32,
    pub shaderSharedFloat32AtomicAdd: VkBool32,
    pub shaderSharedFloat64Atomics: VkBool32,
    pub shaderSharedFloat64AtomicAdd: VkBool32,
    pub shaderImageFloat32Atomics: VkBool32,
    pub shaderImageFloat32AtomicAdd: VkBool32,
    pub sparseImageFloat32Atomics: VkBool32,
    pub sparseImageFloat32AtomicAdd: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderBufferFloat32Atomics) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderBufferFloat32Atomics)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderBufferFloat32AtomicAdd) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderBufferFloat32AtomicAdd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderBufferFloat64Atomics) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderBufferFloat64Atomics)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderBufferFloat64AtomicAdd) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderBufferFloat64AtomicAdd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderSharedFloat32Atomics) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderSharedFloat32Atomics)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSharedFloat32AtomicAdd) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderSharedFloat32AtomicAdd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderSharedFloat64Atomics) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderSharedFloat64Atomics)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSharedFloat64AtomicAdd) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderSharedFloat64AtomicAdd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderImageFloat32Atomics) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderImageFloat32Atomics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderImageFloat32AtomicAdd) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(shaderImageFloat32AtomicAdd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseImageFloat32Atomics) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(sparseImageFloat32Atomics)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparseImageFloat32AtomicAdd) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT),
            "::",
            stringify!(sparseImageFloat32AtomicAdd)
        )
    );
}
impl Default for VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;
pub type PFN_vkResetQueryPoolEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
extern "system" {
    pub fn vkResetQueryPoolEXT(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub indexTypeUint8: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceIndexTypeUint8FeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceIndexTypeUint8FeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceIndexTypeUint8FeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceIndexTypeUint8FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceIndexTypeUint8FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceIndexTypeUint8FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIndexTypeUint8FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIndexTypeUint8FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexTypeUint8) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceIndexTypeUint8FeaturesEXT),
            "::",
            stringify!(indexTypeUint8)
        )
    );
}
impl Default for VkPhysicalDeviceIndexTypeUint8FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub extendedDynamicState: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendedDynamicState) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT),
            "::",
            stringify!(extendedDynamicState)
        )
    );
}
impl Default for VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetCullModeEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags),
>;
pub type PFN_vkCmdSetFrontFaceEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace),
>;
pub type PFN_vkCmdSetPrimitiveTopologyEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology),
>;
pub type PFN_vkCmdSetViewportWithCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissorWithCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers2EXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdSetDepthTestEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthWriteEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthCompareOpEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp),
>;
pub type PFN_vkCmdSetDepthBoundsTestEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilTestEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilOpEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    ),
>;
extern "system" {
    pub fn vkCmdSetCullModeEXT(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags);
}
extern "system" {
    pub fn vkCmdSetFrontFaceEXT(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace);
}
extern "system" {
    pub fn vkCmdSetPrimitiveTopologyEXT(
        commandBuffer: VkCommandBuffer,
        primitiveTopology: VkPrimitiveTopology,
    );
}
extern "system" {
    pub fn vkCmdSetViewportWithCountEXT(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    );
}
extern "system" {
    pub fn vkCmdSetScissorWithCountEXT(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    );
}
extern "system" {
    pub fn vkCmdBindVertexBuffers2EXT(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdSetDepthTestEnableEXT(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetDepthWriteEnableEXT(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetDepthCompareOpEXT(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp);
}
extern "system" {
    pub fn vkCmdSetDepthBoundsTestEnableEXT(
        commandBuffer: VkCommandBuffer,
        depthBoundsTestEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilTestEnableEXT(
        commandBuffer: VkCommandBuffer,
        stencilTestEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetStencilOpEXT(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderBufferFloat16Atomics: VkBool32,
    pub shaderBufferFloat16AtomicAdd: VkBool32,
    pub shaderBufferFloat16AtomicMinMax: VkBool32,
    pub shaderBufferFloat32AtomicMinMax: VkBool32,
    pub shaderBufferFloat64AtomicMinMax: VkBool32,
    pub shaderSharedFloat16Atomics: VkBool32,
    pub shaderSharedFloat16AtomicAdd: VkBool32,
    pub shaderSharedFloat16AtomicMinMax: VkBool32,
    pub shaderSharedFloat32AtomicMinMax: VkBool32,
    pub shaderSharedFloat64AtomicMinMax: VkBool32,
    pub shaderImageFloat32AtomicMinMax: VkBool32,
    pub sparseImageFloat32AtomicMinMax: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderBufferFloat16Atomics) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderBufferFloat16Atomics)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderBufferFloat16AtomicAdd) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderBufferFloat16AtomicAdd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderBufferFloat16AtomicMinMax) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderBufferFloat16AtomicMinMax)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderBufferFloat32AtomicMinMax) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderBufferFloat32AtomicMinMax)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderBufferFloat64AtomicMinMax) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderBufferFloat64AtomicMinMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderSharedFloat16Atomics) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderSharedFloat16Atomics)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSharedFloat16AtomicAdd) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderSharedFloat16AtomicAdd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSharedFloat16AtomicMinMax) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderSharedFloat16AtomicMinMax)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSharedFloat32AtomicMinMax) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderSharedFloat32AtomicMinMax)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderSharedFloat64AtomicMinMax) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderSharedFloat64AtomicMinMax)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderImageFloat32AtomicMinMax) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(shaderImageFloat32AtomicMinMax)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sparseImageFloat32AtomicMinMax) as usize - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT),
            "::",
            stringify!(sparseImageFloat32AtomicMinMax)
        )
    );
}
impl Default for VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPresentScalingFlagBitsEXT {
    VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 1,
    VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 2,
    VK_PRESENT_SCALING_STRETCH_BIT_EXT = 4,
    VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkPresentScalingFlagsEXT = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkPresentGravityFlagBitsEXT {
    VK_PRESENT_GRAVITY_MIN_BIT_EXT = 1,
    VK_PRESENT_GRAVITY_MAX_BIT_EXT = 2,
    VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = 4,
    VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkPresentGravityFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSurfacePresentModeEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentMode: VkPresentModeKHR,
}
#[test]
fn bindgen_test_layout_VkSurfacePresentModeEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSurfacePresentModeEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSurfacePresentModeEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkSurfacePresentModeEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfacePresentModeEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSurfacePresentModeEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentModeEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentModeEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentMode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentModeEXT),
            "::",
            stringify!(presentMode)
        )
    );
}
impl Default for VkSurfacePresentModeEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSurfacePresentScalingCapabilitiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportedPresentScaling: VkPresentScalingFlagsEXT,
    pub supportedPresentGravityX: VkPresentGravityFlagsEXT,
    pub supportedPresentGravityY: VkPresentGravityFlagsEXT,
    pub minScaledImageExtent: VkExtent2D,
    pub maxScaledImageExtent: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkSurfacePresentScalingCapabilitiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSurfacePresentScalingCapabilitiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSurfacePresentScalingCapabilitiesEXT>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkSurfacePresentScalingCapabilitiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfacePresentScalingCapabilitiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSurfacePresentScalingCapabilitiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentScalingCapabilitiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentScalingCapabilitiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedPresentScaling) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentScalingCapabilitiesEXT),
            "::",
            stringify!(supportedPresentScaling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedPresentGravityX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentScalingCapabilitiesEXT),
            "::",
            stringify!(supportedPresentGravityX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedPresentGravityY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentScalingCapabilitiesEXT),
            "::",
            stringify!(supportedPresentGravityY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minScaledImageExtent) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentScalingCapabilitiesEXT),
            "::",
            stringify!(minScaledImageExtent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxScaledImageExtent) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentScalingCapabilitiesEXT),
            "::",
            stringify!(maxScaledImageExtent)
        )
    );
}
impl Default for VkSurfacePresentScalingCapabilitiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSurfacePresentModeCompatibilityEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentModeCount: u32,
    pub pPresentModes: *mut VkPresentModeKHR,
}
#[test]
fn bindgen_test_layout_VkSurfacePresentModeCompatibilityEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSurfacePresentModeCompatibilityEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSurfacePresentModeCompatibilityEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkSurfacePresentModeCompatibilityEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfacePresentModeCompatibilityEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSurfacePresentModeCompatibilityEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentModeCompatibilityEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentModeCompatibilityEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentModeCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentModeCompatibilityEXT),
            "::",
            stringify!(presentModeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPresentModes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfacePresentModeCompatibilityEXT),
            "::",
            stringify!(pPresentModes)
        )
    );
}
impl Default for VkSurfacePresentModeCompatibilityEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub swapchainMaintenance1: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchainMaintenance1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT),
            "::",
            stringify!(swapchainMaintenance1)
        )
    );
}
impl Default for VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSwapchainPresentFenceInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pFences: *const VkFence,
}
#[test]
fn bindgen_test_layout_VkSwapchainPresentFenceInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSwapchainPresentFenceInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainPresentFenceInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkSwapchainPresentFenceInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainPresentFenceInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSwapchainPresentFenceInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentFenceInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentFenceInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchainCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentFenceInfoEXT),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFences) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentFenceInfoEXT),
            "::",
            stringify!(pFences)
        )
    );
}
impl Default for VkSwapchainPresentFenceInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSwapchainPresentModesCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub presentModeCount: u32,
    pub pPresentModes: *const VkPresentModeKHR,
}
#[test]
fn bindgen_test_layout_VkSwapchainPresentModesCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSwapchainPresentModesCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainPresentModesCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkSwapchainPresentModesCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainPresentModesCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSwapchainPresentModesCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentModesCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentModesCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentModeCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentModesCreateInfoEXT),
            "::",
            stringify!(presentModeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPresentModes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentModesCreateInfoEXT),
            "::",
            stringify!(pPresentModes)
        )
    );
}
impl Default for VkSwapchainPresentModesCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSwapchainPresentModeInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pPresentModes: *const VkPresentModeKHR,
}
#[test]
fn bindgen_test_layout_VkSwapchainPresentModeInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSwapchainPresentModeInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainPresentModeInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkSwapchainPresentModeInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainPresentModeInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSwapchainPresentModeInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentModeInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentModeInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchainCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentModeInfoEXT),
            "::",
            stringify!(swapchainCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPresentModes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentModeInfoEXT),
            "::",
            stringify!(pPresentModes)
        )
    );
}
impl Default for VkSwapchainPresentModeInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSwapchainPresentScalingCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub scalingBehavior: VkPresentScalingFlagsEXT,
    pub presentGravityX: VkPresentGravityFlagsEXT,
    pub presentGravityY: VkPresentGravityFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkSwapchainPresentScalingCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSwapchainPresentScalingCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainPresentScalingCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkSwapchainPresentScalingCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainPresentScalingCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSwapchainPresentScalingCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentScalingCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentScalingCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scalingBehavior) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentScalingCreateInfoEXT),
            "::",
            stringify!(scalingBehavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentGravityX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentScalingCreateInfoEXT),
            "::",
            stringify!(presentGravityX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentGravityY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentScalingCreateInfoEXT),
            "::",
            stringify!(presentGravityY)
        )
    );
}
impl Default for VkSwapchainPresentScalingCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkReleaseSwapchainImagesInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
    pub imageIndexCount: u32,
    pub pImageIndices: *const u32,
}
#[test]
fn bindgen_test_layout_VkReleaseSwapchainImagesInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkReleaseSwapchainImagesInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkReleaseSwapchainImagesInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkReleaseSwapchainImagesInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkReleaseSwapchainImagesInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkReleaseSwapchainImagesInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkReleaseSwapchainImagesInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkReleaseSwapchainImagesInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapchain) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkReleaseSwapchainImagesInfoEXT),
            "::",
            stringify!(swapchain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageIndexCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkReleaseSwapchainImagesInfoEXT),
            "::",
            stringify!(imageIndexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pImageIndices) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkReleaseSwapchainImagesInfoEXT),
            "::",
            stringify!(pImageIndices)
        )
    );
}
impl Default for VkReleaseSwapchainImagesInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkReleaseSwapchainImagesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pReleaseInfo: *const VkReleaseSwapchainImagesInfoEXT,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkReleaseSwapchainImagesEXT(
        device: VkDevice,
        pReleaseInfo: *const VkReleaseSwapchainImagesInfoEXT,
    ) -> VkResult;
}
pub type VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT =
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkIndirectCommandsLayoutNV_T {
    _unused: [u8; 0],
}
pub type VkIndirectCommandsLayoutNV = *mut VkIndirectCommandsLayoutNV_T;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkIndirectCommandsTokenTypeNV {
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkIndirectStateFlagBitsNV {
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1,
    VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
}
pub type VkIndirectStateFlagsNV = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkIndirectCommandsLayoutUsageFlagBitsNV {
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
}
pub type VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxGraphicsShaderGroupCount: u32,
    pub maxIndirectSequenceCount: u32,
    pub maxIndirectCommandsTokenCount: u32,
    pub maxIndirectCommandsStreamCount: u32,
    pub maxIndirectCommandsTokenOffset: u32,
    pub maxIndirectCommandsStreamStride: u32,
    pub minSequencesCountBufferOffsetAlignment: u32,
    pub minSequencesIndexBufferOffsetAlignment: u32,
    pub minIndirectCommandsBufferOffsetAlignment: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGraphicsShaderGroupCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxGraphicsShaderGroupCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxIndirectSequenceCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxIndirectSequenceCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxIndirectCommandsTokenCount) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxIndirectCommandsTokenCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxIndirectCommandsStreamCount) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxIndirectCommandsStreamCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxIndirectCommandsTokenOffset) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxIndirectCommandsTokenOffset)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxIndirectCommandsStreamStride) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(maxIndirectCommandsStreamStride)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minSequencesCountBufferOffsetAlignment) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(minSequencesCountBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minSequencesIndexBufferOffsetAlignment) as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(minSequencesIndexBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minIndirectCommandsBufferOffsetAlignment) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV),
            "::",
            stringify!(minIndirectCommandsBufferOffsetAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceGeneratedCommands: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceGeneratedCommands) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV),
            "::",
            stringify!(deviceGeneratedCommands)
        )
    );
}
impl Default for VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkGraphicsShaderGroupCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pub pTessellationState: *const VkPipelineTessellationStateCreateInfo,
}
#[test]
fn bindgen_test_layout_VkGraphicsShaderGroupCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkGraphicsShaderGroupCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkGraphicsShaderGroupCreateInfoNV>(),
        48usize,
        concat!("Size of: ", stringify!(VkGraphicsShaderGroupCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGraphicsShaderGroupCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stageCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(stageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStages) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(pStages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVertexInputState) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(pVertexInputState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTessellationState) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsShaderGroupCreateInfoNV),
            "::",
            stringify!(pTessellationState)
        )
    );
}
impl Default for VkGraphicsShaderGroupCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub groupCount: u32,
    pub pGroups: *const VkGraphicsShaderGroupCreateInfoNV,
    pub pipelineCount: u32,
    pub pPipelines: *const VkPipeline,
}
#[test]
fn bindgen_test_layout_VkGraphicsPipelineShaderGroupsCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkGraphicsPipelineShaderGroupsCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkGraphicsPipelineShaderGroupsCreateInfoNV>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkGraphicsPipelineShaderGroupsCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(groupCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGroups) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(pGroups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(pipelineCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPipelines) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineShaderGroupsCreateInfoNV),
            "::",
            stringify!(pPipelines)
        )
    );
}
impl Default for VkGraphicsPipelineShaderGroupsCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindShaderGroupIndirectCommandNV {
    pub groupIndex: u32,
}
#[test]
fn bindgen_test_layout_VkBindShaderGroupIndirectCommandNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindShaderGroupIndirectCommandNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindShaderGroupIndirectCommandNV>(),
        4usize,
        concat!("Size of: ", stringify!(VkBindShaderGroupIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindShaderGroupIndirectCommandNV>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindShaderGroupIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindShaderGroupIndirectCommandNV),
            "::",
            stringify!(groupIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindIndexBufferIndirectCommandNV {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub indexType: VkIndexType,
}
#[test]
fn bindgen_test_layout_VkBindIndexBufferIndirectCommandNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindIndexBufferIndirectCommandNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindIndexBufferIndirectCommandNV>(),
        16usize,
        concat!("Size of: ", stringify!(VkBindIndexBufferIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindIndexBufferIndirectCommandNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindIndexBufferIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindIndexBufferIndirectCommandNV),
            "::",
            stringify!(bufferAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindIndexBufferIndirectCommandNV),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexType) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindIndexBufferIndirectCommandNV),
            "::",
            stringify!(indexType)
        )
    );
}
impl Default for VkBindIndexBufferIndirectCommandNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBindVertexBufferIndirectCommandNV {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub stride: u32,
}
#[test]
fn bindgen_test_layout_VkBindVertexBufferIndirectCommandNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkBindVertexBufferIndirectCommandNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBindVertexBufferIndirectCommandNV>(),
        16usize,
        concat!("Size of: ", stringify!(VkBindVertexBufferIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkBindVertexBufferIndirectCommandNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBindVertexBufferIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVertexBufferIndirectCommandNV),
            "::",
            stringify!(bufferAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVertexBufferIndirectCommandNV),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBindVertexBufferIndirectCommandNV),
            "::",
            stringify!(stride)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSetStateFlagsIndirectCommandNV {
    pub data: u32,
}
#[test]
fn bindgen_test_layout_VkSetStateFlagsIndirectCommandNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkSetStateFlagsIndirectCommandNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSetStateFlagsIndirectCommandNV>(),
        4usize,
        concat!("Size of: ", stringify!(VkSetStateFlagsIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSetStateFlagsIndirectCommandNV>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkSetStateFlagsIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSetStateFlagsIndirectCommandNV),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkIndirectCommandsStreamNV {
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkIndirectCommandsStreamNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkIndirectCommandsStreamNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkIndirectCommandsStreamNV>(),
        16usize,
        concat!("Size of: ", stringify!(VkIndirectCommandsStreamNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkIndirectCommandsStreamNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkIndirectCommandsStreamNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsStreamNV),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsStreamNV),
            "::",
            stringify!(offset)
        )
    );
}
impl Default for VkIndirectCommandsStreamNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkIndirectCommandsLayoutTokenNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub tokenType: VkIndirectCommandsTokenTypeNV,
    pub stream: u32,
    pub offset: u32,
    pub vertexBindingUnit: u32,
    pub vertexDynamicStride: VkBool32,
    pub pushconstantPipelineLayout: VkPipelineLayout,
    pub pushconstantShaderStageFlags: VkShaderStageFlags,
    pub pushconstantOffset: u32,
    pub pushconstantSize: u32,
    pub indirectStateFlags: VkIndirectStateFlagsNV,
    pub indexTypeCount: u32,
    pub pIndexTypes: *const VkIndexType,
    pub pIndexTypeValues: *const u32,
}
#[test]
fn bindgen_test_layout_VkIndirectCommandsLayoutTokenNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkIndirectCommandsLayoutTokenNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkIndirectCommandsLayoutTokenNV>(),
        88usize,
        concat!("Size of: ", stringify!(VkIndirectCommandsLayoutTokenNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkIndirectCommandsLayoutTokenNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkIndirectCommandsLayoutTokenNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tokenType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(tokenType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexBindingUnit) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(vertexBindingUnit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexDynamicStride) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(vertexDynamicStride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pushconstantPipelineLayout) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pushconstantPipelineLayout)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pushconstantShaderStageFlags) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pushconstantShaderStageFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pushconstantOffset) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pushconstantOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pushconstantSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pushconstantSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indirectStateFlags) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(indirectStateFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexTypeCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(indexTypeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIndexTypes) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pIndexTypes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIndexTypeValues) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutTokenNV),
            "::",
            stringify!(pIndexTypeValues)
        )
    );
}
impl Default for VkIndirectCommandsLayoutTokenNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkIndirectCommandsLayoutCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkIndirectCommandsLayoutUsageFlagsNV,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub tokenCount: u32,
    pub pTokens: *const VkIndirectCommandsLayoutTokenNV,
    pub streamCount: u32,
    pub pStreamStrides: *const u32,
}
#[test]
fn bindgen_test_layout_VkIndirectCommandsLayoutCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkIndirectCommandsLayoutCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkIndirectCommandsLayoutCreateInfoNV>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkIndirectCommandsLayoutCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineBindPoint) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tokenCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(tokenCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pTokens) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(pTokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(streamCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStreamStrides) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkIndirectCommandsLayoutCreateInfoNV),
            "::",
            stringify!(pStreamStrides)
        )
    );
}
impl Default for VkIndirectCommandsLayoutCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkGeneratedCommandsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipeline: VkPipeline,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    pub streamCount: u32,
    pub pStreams: *const VkIndirectCommandsStreamNV,
    pub sequencesCount: u32,
    pub preprocessBuffer: VkBuffer,
    pub preprocessOffset: VkDeviceSize,
    pub preprocessSize: VkDeviceSize,
    pub sequencesCountBuffer: VkBuffer,
    pub sequencesCountOffset: VkDeviceSize,
    pub sequencesIndexBuffer: VkBuffer,
    pub sequencesIndexOffset: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkGeneratedCommandsInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkGeneratedCommandsInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkGeneratedCommandsInfoNV>(),
        120usize,
        concat!("Size of: ", stringify!(VkGeneratedCommandsInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeneratedCommandsInfoNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkGeneratedCommandsInfoNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineBindPoint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indirectCommandsLayout) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(indirectCommandsLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(streamCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStreams) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(pStreams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequencesCount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sequencesCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preprocessBuffer) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(preprocessBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preprocessOffset) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(preprocessOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preprocessSize) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(preprocessSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequencesCountBuffer) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sequencesCountBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequencesCountOffset) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sequencesCountOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequencesIndexBuffer) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sequencesIndexBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sequencesIndexOffset) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsInfoNV),
            "::",
            stringify!(sequencesIndexOffset)
        )
    );
}
impl Default for VkGeneratedCommandsInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipeline: VkPipeline,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    pub maxSequencesCount: u32,
}
#[test]
fn bindgen_test_layout_VkGeneratedCommandsMemoryRequirementsInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkGeneratedCommandsMemoryRequirementsInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkGeneratedCommandsMemoryRequirementsInfoNV>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkGeneratedCommandsMemoryRequirementsInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineBindPoint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(pipelineBindPoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipeline) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indirectCommandsLayout) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(indirectCommandsLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSequencesCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGeneratedCommandsMemoryRequirementsInfoNV),
            "::",
            stringify!(maxSequencesCount)
        )
    );
}
impl Default for VkGeneratedCommandsMemoryRequirementsInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetGeneratedCommandsMemoryRequirementsNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkCmdPreprocessGeneratedCommandsNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    ),
>;
pub type PFN_vkCmdExecuteGeneratedCommandsNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        isPreprocessed: VkBool32,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    ),
>;
pub type PFN_vkCmdBindPipelineShaderGroupNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
        groupIndex: u32,
    ),
>;
pub type PFN_vkCreateIndirectCommandsLayoutNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyIndirectCommandsLayoutNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        indirectCommandsLayout: VkIndirectCommandsLayoutNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
extern "system" {
    pub fn vkGetGeneratedCommandsMemoryRequirementsNV(
        device: VkDevice,
        pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
extern "system" {
    pub fn vkCmdPreprocessGeneratedCommandsNV(
        commandBuffer: VkCommandBuffer,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    );
}
extern "system" {
    pub fn vkCmdExecuteGeneratedCommandsNV(
        commandBuffer: VkCommandBuffer,
        isPreprocessed: VkBool32,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    );
}
extern "system" {
    pub fn vkCmdBindPipelineShaderGroupNV(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
        groupIndex: u32,
    );
}
extern "system" {
    pub fn vkCreateIndirectCommandsLayoutNV(
        device: VkDevice,
        pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutNV,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyIndirectCommandsLayoutNV(
        device: VkDevice,
        indirectCommandsLayout: VkIndirectCommandsLayoutNV,
        pAllocator: *const VkAllocationCallbacks,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub inheritedViewportScissor2D: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceInheritedViewportScissorFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceInheritedViewportScissorFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceInheritedViewportScissorFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceInheritedViewportScissorFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceInheritedViewportScissorFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceInheritedViewportScissorFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInheritedViewportScissorFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInheritedViewportScissorFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritedViewportScissor2D) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInheritedViewportScissorFeaturesNV),
            "::",
            stringify!(inheritedViewportScissor2D)
        )
    );
}
impl Default for VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCommandBufferInheritanceViewportScissorInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewportScissor2D: VkBool32,
    pub viewportDepthCount: u32,
    pub pViewportDepths: *const VkViewport,
}
#[test]
fn bindgen_test_layout_VkCommandBufferInheritanceViewportScissorInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkCommandBufferInheritanceViewportScissorInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferInheritanceViewportScissorInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkCommandBufferInheritanceViewportScissorInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferInheritanceViewportScissorInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkCommandBufferInheritanceViewportScissorInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceViewportScissorInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceViewportScissorInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewportScissor2D) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceViewportScissorInfoNV),
            "::",
            stringify!(viewportScissor2D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).viewportDepthCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceViewportScissorInfoNV),
            "::",
            stringify!(viewportDepthCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pViewportDepths) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceViewportScissorInfoNV),
            "::",
            stringify!(pViewportDepths)
        )
    );
}
impl Default for VkCommandBufferInheritanceViewportScissorInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub texelBufferAlignment: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texelBufferAlignment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT),
            "::",
            stringify!(texelBufferAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT =
    VkPhysicalDeviceTexelBufferAlignmentProperties;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassTransformBeginInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
}
#[test]
fn bindgen_test_layout_VkRenderPassTransformBeginInfoQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassTransformBeginInfoQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassTransformBeginInfoQCOM>(),
        24usize,
        concat!("Size of: ", stringify!(VkRenderPassTransformBeginInfoQCOM))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassTransformBeginInfoQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassTransformBeginInfoQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassTransformBeginInfoQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassTransformBeginInfoQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassTransformBeginInfoQCOM),
            "::",
            stringify!(transform)
        )
    );
}
impl Default for VkRenderPassTransformBeginInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
    pub renderArea: VkRect2D,
}
#[test]
fn bindgen_test_layout_VkCommandBufferInheritanceRenderPassTransformInfoQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkCommandBufferInheritanceRenderPassTransformInfoQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM),
            "::",
            stringify!(transform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderArea) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCommandBufferInheritanceRenderPassTransformInfoQCOM),
            "::",
            stringify!(renderArea)
        )
    );
}
impl Default for VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDeviceMemoryReportEventTypeEXT {
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 2147483647,
}
pub type VkDeviceMemoryReportFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceMemoryReport: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDeviceMemoryReportFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDeviceMemoryReportFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDeviceMemoryReportFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceMemoryReport) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT),
            "::",
            stringify!(deviceMemoryReport)
        )
    );
}
impl Default for VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceMemoryReportCallbackDataEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkDeviceMemoryReportFlagsEXT,
    pub type_: VkDeviceMemoryReportEventTypeEXT,
    pub memoryObjectId: u64,
    pub size: VkDeviceSize,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub heapIndex: u32,
}
#[test]
fn bindgen_test_layout_VkDeviceMemoryReportCallbackDataEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceMemoryReportCallbackDataEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceMemoryReportCallbackDataEXT>(),
        64usize,
        concat!("Size of: ", stringify!(VkDeviceMemoryReportCallbackDataEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceMemoryReportCallbackDataEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceMemoryReportCallbackDataEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryReportCallbackDataEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryReportCallbackDataEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryReportCallbackDataEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryReportCallbackDataEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryObjectId) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryReportCallbackDataEXT),
            "::",
            stringify!(memoryObjectId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryReportCallbackDataEXT),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectType) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryReportCallbackDataEXT),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).objectHandle) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryReportCallbackDataEXT),
            "::",
            stringify!(objectHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heapIndex) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceMemoryReportCallbackDataEXT),
            "::",
            stringify!(heapIndex)
        )
    );
}
impl Default for VkDeviceMemoryReportCallbackDataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkDeviceMemoryReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        pCallbackData: *const VkDeviceMemoryReportCallbackDataEXT,
        pUserData: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceDeviceMemoryReportCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceMemoryReportFlagsEXT,
    pub pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDeviceDeviceMemoryReportCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceDeviceMemoryReportCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceDeviceMemoryReportCreateInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceDeviceMemoryReportCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceDeviceMemoryReportCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceDeviceMemoryReportCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDeviceMemoryReportCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDeviceMemoryReportCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDeviceMemoryReportCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnUserCallback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDeviceMemoryReportCreateInfoEXT),
            "::",
            stringify!(pfnUserCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUserData) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDeviceMemoryReportCreateInfoEXT),
            "::",
            stringify!(pUserData)
        )
    );
}
impl Default for VkDeviceDeviceMemoryReportCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkAcquireDrmDisplayEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        drmFd: i32,
        display: VkDisplayKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDrmDisplayEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        drmFd: i32,
        connectorId: u32,
        display: *mut VkDisplayKHR,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkAcquireDrmDisplayEXT(
        physicalDevice: VkPhysicalDevice,
        drmFd: i32,
        display: VkDisplayKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDrmDisplayEXT(
        physicalDevice: VkPhysicalDevice,
        drmFd: i32,
        connectorId: u32,
        display: *mut VkDisplayKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRobustness2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustBufferAccess2: VkBool32,
    pub robustImageAccess2: VkBool32,
    pub nullDescriptor: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRobustness2FeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRobustness2FeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRobustness2FeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRobustness2FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).robustBufferAccess2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT),
            "::",
            stringify!(robustBufferAccess2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).robustImageAccess2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT),
            "::",
            stringify!(robustImageAccess2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nullDescriptor) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2FeaturesEXT),
            "::",
            stringify!(nullDescriptor)
        )
    );
}
impl Default for VkPhysicalDeviceRobustness2FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRobustness2PropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustStorageBufferAccessSizeAlignment: VkDeviceSize,
    pub robustUniformBufferAccessSizeAlignment: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRobustness2PropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRobustness2PropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRobustness2PropertiesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRobustness2PropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).robustStorageBufferAccessSizeAlignment) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT),
            "::",
            stringify!(robustStorageBufferAccessSizeAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).robustUniformBufferAccessSizeAlignment) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRobustness2PropertiesEXT),
            "::",
            stringify!(robustUniformBufferAccessSizeAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceRobustness2PropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCustomBorderColorCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub customBorderColor: VkClearColorValue,
    pub format: VkFormat,
}
#[test]
fn bindgen_test_layout_VkSamplerCustomBorderColorCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSamplerCustomBorderColorCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSamplerCustomBorderColorCreateInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerCustomBorderColorCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customBorderColor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT),
            "::",
            stringify!(customBorderColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCustomBorderColorCreateInfoEXT),
            "::",
            stringify!(format)
        )
    );
}
impl Default for VkSamplerCustomBorderColorCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxCustomBorderColorSamplers: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCustomBorderColorPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceCustomBorderColorPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCustomBorderColorPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCustomBorderColorPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxCustomBorderColorSamplers) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorPropertiesEXT),
            "::",
            stringify!(maxCustomBorderColorSamplers)
        )
    );
}
impl Default for VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub customBorderColors: VkBool32,
    pub customBorderColorWithoutFormat: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCustomBorderColorFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceCustomBorderColorFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customBorderColors) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT),
            "::",
            stringify!(customBorderColors)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).customBorderColorWithoutFormat) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCustomBorderColorFeaturesEXT),
            "::",
            stringify!(customBorderColorWithoutFormat)
        )
    );
}
impl Default for VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePresentBarrierFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentBarrier: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePresentBarrierFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePresentBarrierFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePresentBarrierFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePresentBarrierFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePresentBarrierFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePresentBarrierFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePresentBarrierFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePresentBarrierFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentBarrier) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePresentBarrierFeaturesNV),
            "::",
            stringify!(presentBarrier)
        )
    );
}
impl Default for VkPhysicalDevicePresentBarrierFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSurfaceCapabilitiesPresentBarrierNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentBarrierSupported: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSurfaceCapabilitiesPresentBarrierNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkSurfaceCapabilitiesPresentBarrierNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSurfaceCapabilitiesPresentBarrierNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkSurfaceCapabilitiesPresentBarrierNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSurfaceCapabilitiesPresentBarrierNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSurfaceCapabilitiesPresentBarrierNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesPresentBarrierNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesPresentBarrierNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentBarrierSupported) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSurfaceCapabilitiesPresentBarrierNV),
            "::",
            stringify!(presentBarrierSupported)
        )
    );
}
impl Default for VkSurfaceCapabilitiesPresentBarrierNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSwapchainPresentBarrierCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentBarrierEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSwapchainPresentBarrierCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkSwapchainPresentBarrierCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSwapchainPresentBarrierCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkSwapchainPresentBarrierCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSwapchainPresentBarrierCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSwapchainPresentBarrierCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentBarrierCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentBarrierCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).presentBarrierEnable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSwapchainPresentBarrierCreateInfoNV),
            "::",
            stringify!(presentBarrierEnable)
        )
    );
}
impl Default for VkSwapchainPresentBarrierCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPrivateDataSlotEXT = VkPrivateDataSlot;
pub type VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags;
pub type VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;
pub type VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;
pub type VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;
pub type PFN_vkCreatePrivateDataSlotEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlot,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPrivateDataSlotEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlot,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSetPrivateDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        data: u64,
    ) -> VkResult,
>;
pub type PFN_vkGetPrivateDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        pData: *mut u64,
    ),
>;
extern "system" {
    pub fn vkCreatePrivateDataSlotEXT(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlot,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyPrivateDataSlotEXT(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlot,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkSetPrivateDataEXT(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        data: u64,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetPrivateDataEXT(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        pData: *mut u64,
    );
}
pub type VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT =
    VkPhysicalDevicePipelineCreationCacheControlFeatures;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDeviceDiagnosticsConfigFlagBitsNV {
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8,
    VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 2147483647,
}
pub type VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub diagnosticsConfig: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDiagnosticsConfigFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDiagnosticsConfigFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diagnosticsConfig) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV),
            "::",
            stringify!(diagnosticsConfig)
        )
    );
}
impl Default for VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceDiagnosticsConfigCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceDiagnosticsConfigFlagsNV,
}
#[test]
fn bindgen_test_layout_VkDeviceDiagnosticsConfigCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceDiagnosticsConfigCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceDiagnosticsConfigCreateInfoNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceDiagnosticsConfigCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceDiagnosticsConfigCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceDiagnosticsConfigCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDiagnosticsConfigCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDiagnosticsConfigCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceDiagnosticsConfigCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkDeviceDiagnosticsConfigCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkQueryLowLatencySupportNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pQueriedLowLatencyData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkQueryLowLatencySupportNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkQueryLowLatencySupportNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkQueryLowLatencySupportNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkQueryLowLatencySupportNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkQueryLowLatencySupportNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkQueryLowLatencySupportNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryLowLatencySupportNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryLowLatencySupportNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pQueriedLowLatencyData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkQueryLowLatencySupportNV),
            "::",
            stringify!(pQueriedLowLatencyData)
        )
    );
}
impl Default for VkQueryLowLatencySupportNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkAccelerationStructureKHR_T {
    _unused: [u8; 0],
}
pub type VkAccelerationStructureKHR = *mut VkAccelerationStructureKHR_T;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDescriptorBufferPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub combinedImageSamplerDescriptorSingleArray: VkBool32,
    pub bufferlessPushDescriptors: VkBool32,
    pub allowSamplerImageViewPostSubmitCreation: VkBool32,
    pub descriptorBufferOffsetAlignment: VkDeviceSize,
    pub maxDescriptorBufferBindings: u32,
    pub maxResourceDescriptorBufferBindings: u32,
    pub maxSamplerDescriptorBufferBindings: u32,
    pub maxEmbeddedImmutableSamplerBindings: u32,
    pub maxEmbeddedImmutableSamplers: u32,
    pub bufferCaptureReplayDescriptorDataSize: usize,
    pub imageCaptureReplayDescriptorDataSize: usize,
    pub imageViewCaptureReplayDescriptorDataSize: usize,
    pub samplerCaptureReplayDescriptorDataSize: usize,
    pub accelerationStructureCaptureReplayDescriptorDataSize: usize,
    pub samplerDescriptorSize: usize,
    pub combinedImageSamplerDescriptorSize: usize,
    pub sampledImageDescriptorSize: usize,
    pub storageImageDescriptorSize: usize,
    pub uniformTexelBufferDescriptorSize: usize,
    pub robustUniformTexelBufferDescriptorSize: usize,
    pub storageTexelBufferDescriptorSize: usize,
    pub robustStorageTexelBufferDescriptorSize: usize,
    pub uniformBufferDescriptorSize: usize,
    pub robustUniformBufferDescriptorSize: usize,
    pub storageBufferDescriptorSize: usize,
    pub robustStorageBufferDescriptorSize: usize,
    pub inputAttachmentDescriptorSize: usize,
    pub accelerationStructureDescriptorSize: usize,
    pub maxSamplerDescriptorBufferRange: VkDeviceSize,
    pub maxResourceDescriptorBufferRange: VkDeviceSize,
    pub samplerDescriptorBufferAddressSpaceSize: VkDeviceSize,
    pub resourceDescriptorBufferAddressSpaceSize: VkDeviceSize,
    pub descriptorBufferAddressSpaceSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDescriptorBufferPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDescriptorBufferPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDescriptorBufferPropertiesEXT>(),
        256usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDescriptorBufferPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).combinedImageSamplerDescriptorSingleArray) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(combinedImageSamplerDescriptorSingleArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferlessPushDescriptors) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(bufferlessPushDescriptors)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).allowSamplerImageViewPostSubmitCreation) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(allowSamplerImageViewPostSubmitCreation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBufferOffsetAlignment) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(descriptorBufferOffsetAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDescriptorBufferBindings) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(maxDescriptorBufferBindings)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxResourceDescriptorBufferBindings) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(maxResourceDescriptorBufferBindings)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxSamplerDescriptorBufferBindings) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(maxSamplerDescriptorBufferBindings)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxEmbeddedImmutableSamplerBindings) as usize - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(maxEmbeddedImmutableSamplerBindings)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxEmbeddedImmutableSamplers) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(maxEmbeddedImmutableSamplers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).bufferCaptureReplayDescriptorDataSize) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(bufferCaptureReplayDescriptorDataSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).imageCaptureReplayDescriptorDataSize) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(imageCaptureReplayDescriptorDataSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).imageViewCaptureReplayDescriptorDataSize) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(imageViewCaptureReplayDescriptorDataSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).samplerCaptureReplayDescriptorDataSize) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(samplerCaptureReplayDescriptorDataSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).accelerationStructureCaptureReplayDescriptorDataSize)
                as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(accelerationStructureCaptureReplayDescriptorDataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplerDescriptorSize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(samplerDescriptorSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).combinedImageSamplerDescriptorSize) as usize - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(combinedImageSamplerDescriptorSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampledImageDescriptorSize) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(sampledImageDescriptorSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageImageDescriptorSize) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(storageImageDescriptorSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).uniformTexelBufferDescriptorSize) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(uniformTexelBufferDescriptorSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).robustUniformTexelBufferDescriptorSize) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(robustUniformTexelBufferDescriptorSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).storageTexelBufferDescriptorSize) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(storageTexelBufferDescriptorSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).robustStorageTexelBufferDescriptorSize) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(robustStorageTexelBufferDescriptorSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniformBufferDescriptorSize) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(uniformBufferDescriptorSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).robustUniformBufferDescriptorSize) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(robustUniformBufferDescriptorSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).storageBufferDescriptorSize) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(storageBufferDescriptorSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).robustStorageBufferDescriptorSize) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(robustStorageBufferDescriptorSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).inputAttachmentDescriptorSize) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(inputAttachmentDescriptorSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).accelerationStructureDescriptorSize) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(accelerationStructureDescriptorSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxSamplerDescriptorBufferRange) as usize - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(maxSamplerDescriptorBufferRange)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxResourceDescriptorBufferRange) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(maxResourceDescriptorBufferRange)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).samplerDescriptorBufferAddressSpaceSize) as usize
                - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(samplerDescriptorBufferAddressSpaceSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).resourceDescriptorBufferAddressSpaceSize) as usize
                - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(resourceDescriptorBufferAddressSpaceSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBufferAddressSpaceSize) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferPropertiesEXT),
            "::",
            stringify!(descriptorBufferAddressSpaceSize)
        )
    );
}
impl Default for VkPhysicalDeviceDescriptorBufferPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub combinedImageSamplerDensityMapDescriptorSize: usize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).combinedImageSamplerDensityMapDescriptorSize) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT),
            "::",
            stringify!(combinedImageSamplerDensityMapDescriptorSize)
        )
    );
}
impl Default for VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDescriptorBufferFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub descriptorBuffer: VkBool32,
    pub descriptorBufferCaptureReplay: VkBool32,
    pub descriptorBufferImageLayoutIgnored: VkBool32,
    pub descriptorBufferPushDescriptors: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDescriptorBufferFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDescriptorBufferFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDescriptorBufferFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDescriptorBufferFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDescriptorBufferFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDescriptorBufferFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferFeaturesEXT),
            "::",
            stringify!(descriptorBuffer)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBufferCaptureReplay) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferFeaturesEXT),
            "::",
            stringify!(descriptorBufferCaptureReplay)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBufferImageLayoutIgnored) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferFeaturesEXT),
            "::",
            stringify!(descriptorBufferImageLayoutIgnored)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBufferPushDescriptors) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorBufferFeaturesEXT),
            "::",
            stringify!(descriptorBufferPushDescriptors)
        )
    );
}
impl Default for VkPhysicalDeviceDescriptorBufferFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorAddressInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub address: VkDeviceAddress,
    pub range: VkDeviceSize,
    pub format: VkFormat,
}
#[test]
fn bindgen_test_layout_VkDescriptorAddressInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorAddressInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorAddressInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkDescriptorAddressInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorAddressInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorAddressInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorAddressInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorAddressInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorAddressInfoEXT),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorAddressInfoEXT),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorAddressInfoEXT),
            "::",
            stringify!(format)
        )
    );
}
impl Default for VkDescriptorAddressInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorBufferBindingInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub address: VkDeviceAddress,
    pub usage: VkBufferUsageFlags,
}
#[test]
fn bindgen_test_layout_VkDescriptorBufferBindingInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorBufferBindingInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorBufferBindingInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkDescriptorBufferBindingInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorBufferBindingInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorBufferBindingInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferBindingInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferBindingInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferBindingInfoEXT),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferBindingInfoEXT),
            "::",
            stringify!(usage)
        )
    );
}
impl Default for VkDescriptorBufferBindingInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkDescriptorBufferBindingPushDescriptorBufferHandleEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorBufferBindingPushDescriptorBufferHandleEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorBufferBindingPushDescriptorBufferHandleEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorBufferBindingPushDescriptorBufferHandleEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorBufferBindingPushDescriptorBufferHandleEXT),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkDescriptorDataEXT {
    pub pSampler: *const VkSampler,
    pub pCombinedImageSampler: *const VkDescriptorImageInfo,
    pub pInputAttachmentImage: *const VkDescriptorImageInfo,
    pub pSampledImage: *const VkDescriptorImageInfo,
    pub pStorageImage: *const VkDescriptorImageInfo,
    pub pUniformTexelBuffer: *const VkDescriptorAddressInfoEXT,
    pub pStorageTexelBuffer: *const VkDescriptorAddressInfoEXT,
    pub pUniformBuffer: *const VkDescriptorAddressInfoEXT,
    pub pStorageBuffer: *const VkDescriptorAddressInfoEXT,
    pub accelerationStructure: VkDeviceAddress,
}
#[test]
fn bindgen_test_layout_VkDescriptorDataEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorDataEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorDataEXT>(),
        8usize,
        concat!("Size of: ", stringify!(VkDescriptorDataEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorDataEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorDataEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSampler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorDataEXT),
            "::",
            stringify!(pSampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCombinedImageSampler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorDataEXT),
            "::",
            stringify!(pCombinedImageSampler)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pInputAttachmentImage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorDataEXT),
            "::",
            stringify!(pInputAttachmentImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSampledImage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorDataEXT),
            "::",
            stringify!(pSampledImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStorageImage) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorDataEXT),
            "::",
            stringify!(pStorageImage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUniformTexelBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorDataEXT),
            "::",
            stringify!(pUniformTexelBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStorageTexelBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorDataEXT),
            "::",
            stringify!(pStorageTexelBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUniformBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorDataEXT),
            "::",
            stringify!(pUniformBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStorageBuffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorDataEXT),
            "::",
            stringify!(pStorageBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accelerationStructure) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorDataEXT),
            "::",
            stringify!(accelerationStructure)
        )
    );
}
impl Default for VkDescriptorDataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorGetInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkDescriptorType,
    pub data: VkDescriptorDataEXT,
}
#[test]
fn bindgen_test_layout_VkDescriptorGetInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorGetInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorGetInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkDescriptorGetInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorGetInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDescriptorGetInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorGetInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorGetInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorGetInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorGetInfoEXT),
            "::",
            stringify!(data)
        )
    );
}
impl Default for VkDescriptorGetInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkBufferCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[test]
fn bindgen_test_layout_VkBufferCaptureDescriptorDataInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkBufferCaptureDescriptorDataInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkBufferCaptureDescriptorDataInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkBufferCaptureDescriptorDataInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkBufferCaptureDescriptorDataInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkBufferCaptureDescriptorDataInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkBufferCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for VkBufferCaptureDescriptorDataInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
}
#[test]
fn bindgen_test_layout_VkImageCaptureDescriptorDataInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageCaptureDescriptorDataInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageCaptureDescriptorDataInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageCaptureDescriptorDataInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageCaptureDescriptorDataInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageCaptureDescriptorDataInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(image)
        )
    );
}
impl Default for VkImageCaptureDescriptorDataInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageViewCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
}
#[test]
fn bindgen_test_layout_VkImageViewCaptureDescriptorDataInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageViewCaptureDescriptorDataInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageViewCaptureDescriptorDataInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkImageViewCaptureDescriptorDataInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewCaptureDescriptorDataInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageViewCaptureDescriptorDataInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageView) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(imageView)
        )
    );
}
impl Default for VkImageViewCaptureDescriptorDataInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSamplerCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampler: VkSampler,
}
#[test]
fn bindgen_test_layout_VkSamplerCaptureDescriptorDataInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSamplerCaptureDescriptorDataInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSamplerCaptureDescriptorDataInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkSamplerCaptureDescriptorDataInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerCaptureDescriptorDataInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerCaptureDescriptorDataInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampler) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(sampler)
        )
    );
}
impl Default for VkSamplerCaptureDescriptorDataInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkOpaqueCaptureDescriptorDataCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub opaqueCaptureDescriptorData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkOpaqueCaptureDescriptorDataCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkOpaqueCaptureDescriptorDataCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkOpaqueCaptureDescriptorDataCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkOpaqueCaptureDescriptorDataCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkOpaqueCaptureDescriptorDataCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkOpaqueCaptureDescriptorDataCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpaqueCaptureDescriptorDataCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpaqueCaptureDescriptorDataCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaqueCaptureDescriptorData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpaqueCaptureDescriptorDataCreateInfoEXT),
            "::",
            stringify!(opaqueCaptureDescriptorData)
        )
    );
}
impl Default for VkOpaqueCaptureDescriptorDataCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAccelerationStructureCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructure: VkAccelerationStructureKHR,
    pub accelerationStructureNV: VkAccelerationStructureNV,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureCaptureDescriptorDataInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureCaptureDescriptorDataInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureCaptureDescriptorDataInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureCaptureDescriptorDataInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureCaptureDescriptorDataInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureCaptureDescriptorDataInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accelerationStructure) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(accelerationStructure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accelerationStructureNV) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCaptureDescriptorDataInfoEXT),
            "::",
            stringify!(accelerationStructureNV)
        )
    );
}
impl Default for VkAccelerationStructureCaptureDescriptorDataInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetDescriptorSetLayoutSizeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        layout: VkDescriptorSetLayout,
        pLayoutSizeInBytes: *mut VkDeviceSize,
    ),
>;
pub type PFN_vkGetDescriptorSetLayoutBindingOffsetEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        layout: VkDescriptorSetLayout,
        binding: u32,
        pOffset: *mut VkDeviceSize,
    ),
>;
pub type PFN_vkGetDescriptorEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pDescriptorInfo: *const VkDescriptorGetInfoEXT,
        dataSize: usize,
        pDescriptor: *mut ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkCmdBindDescriptorBuffersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        bufferCount: u32,
        pBindingInfos: *const VkDescriptorBufferBindingInfoEXT,
    ),
>;
pub type PFN_vkCmdSetDescriptorBufferOffsetsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        setCount: u32,
        pBufferIndices: *const u32,
        pOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
    ),
>;
pub type PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetImageOpaqueCaptureDescriptorDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageViewCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkSamplerCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetDescriptorSetLayoutSizeEXT(
        device: VkDevice,
        layout: VkDescriptorSetLayout,
        pLayoutSizeInBytes: *mut VkDeviceSize,
    );
}
extern "system" {
    pub fn vkGetDescriptorSetLayoutBindingOffsetEXT(
        device: VkDevice,
        layout: VkDescriptorSetLayout,
        binding: u32,
        pOffset: *mut VkDeviceSize,
    );
}
extern "system" {
    pub fn vkGetDescriptorEXT(
        device: VkDevice,
        pDescriptorInfo: *const VkDescriptorGetInfoEXT,
        dataSize: usize,
        pDescriptor: *mut ::std::os::raw::c_void,
    );
}
extern "system" {
    pub fn vkCmdBindDescriptorBuffersEXT(
        commandBuffer: VkCommandBuffer,
        bufferCount: u32,
        pBindingInfos: *const VkDescriptorBufferBindingInfoEXT,
    );
}
extern "system" {
    pub fn vkCmdSetDescriptorBufferOffsetsEXT(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        setCount: u32,
        pBufferIndices: *const u32,
        pOffsets: *const VkDeviceSize,
    );
}
extern "system" {
    pub fn vkCmdBindDescriptorBufferEmbeddedSamplersEXT(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
    );
}
extern "system" {
    pub fn vkGetBufferOpaqueCaptureDescriptorDataEXT(
        device: VkDevice,
        pInfo: *const VkBufferCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetImageOpaqueCaptureDescriptorDataEXT(
        device: VkDevice,
        pInfo: *const VkImageCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetImageViewOpaqueCaptureDescriptorDataEXT(
        device: VkDevice,
        pInfo: *const VkImageViewCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetSamplerOpaqueCaptureDescriptorDataEXT(
        device: VkDevice,
        pInfo: *const VkSamplerCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkGraphicsPipelineLibraryFlagBitsEXT {
    VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1,
    VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2,
    VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4,
    VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8,
    VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkGraphicsPipelineLibraryFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub graphicsPipelineLibrary: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphicsPipelineLibrary) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT),
            "::",
            stringify!(graphicsPipelineLibrary)
        )
    );
}
impl Default for VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub graphicsPipelineLibraryFastLinking: VkBool32,
    pub graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).graphicsPipelineLibraryFastLinking) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT),
            "::",
            stringify!(graphicsPipelineLibraryFastLinking)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).graphicsPipelineLibraryIndependentInterpolationDecoration)
                as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT),
            "::",
            stringify!(graphicsPipelineLibraryIndependentInterpolationDecoration)
        )
    );
}
impl Default for VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkGraphicsPipelineLibraryCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkGraphicsPipelineLibraryFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkGraphicsPipelineLibraryCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkGraphicsPipelineLibraryCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkGraphicsPipelineLibraryCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkGraphicsPipelineLibraryCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkGraphicsPipelineLibraryCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkGraphicsPipelineLibraryCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineLibraryCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineLibraryCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkGraphicsPipelineLibraryCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkGraphicsPipelineLibraryCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderEarlyAndLateFragmentTests: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD() {
    const UNINIT: ::std::mem::MaybeUninit<
        VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderEarlyAndLateFragmentTests) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD),
            "::",
            stringify!(shaderEarlyAndLateFragmentTests)
        )
    );
}
impl Default for VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkFragmentShadingRateTypeNV {
    VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,
    VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1,
    VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkFragmentShadingRateNV {
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10,
    VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11,
    VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12,
    VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13,
    VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14,
    VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15,
    VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentShadingRateEnums: VkBool32,
    pub supersampleFragmentShadingRates: VkBool32,
    pub noInvocationFragmentShadingRates: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentShadingRateEnums) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV),
            "::",
            stringify!(fragmentShadingRateEnums)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).supersampleFragmentShadingRates) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV),
            "::",
            stringify!(supersampleFragmentShadingRates)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).noInvocationFragmentShadingRates) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV),
            "::",
            stringify!(noInvocationFragmentShadingRates)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxFragmentShadingRateInvocationCount) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV),
            "::",
            stringify!(maxFragmentShadingRateInvocationCount)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub shadingRateType: VkFragmentShadingRateTypeNV,
    pub shadingRate: VkFragmentShadingRateNV,
    pub combinerOps: [VkFragmentShadingRateCombinerOpKHR; 2usize],
}
#[test]
fn bindgen_test_layout_VkPipelineFragmentShadingRateEnumStateCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineFragmentShadingRateEnumStateCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineFragmentShadingRateEnumStateCreateInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineFragmentShadingRateEnumStateCreateInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineFragmentShadingRateEnumStateCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineFragmentShadingRateEnumStateCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineFragmentShadingRateEnumStateCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineFragmentShadingRateEnumStateCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadingRateType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineFragmentShadingRateEnumStateCreateInfoNV),
            "::",
            stringify!(shadingRateType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadingRate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineFragmentShadingRateEnumStateCreateInfoNV),
            "::",
            stringify!(shadingRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).combinerOps) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineFragmentShadingRateEnumStateCreateInfoNV),
            "::",
            stringify!(combinerOps)
        )
    );
}
impl Default for VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetFragmentShadingRateEnumNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        shadingRate: VkFragmentShadingRateNV,
        combinerOps: *const VkFragmentShadingRateCombinerOpKHR,
    ),
>;
extern "system" {
    pub fn vkCmdSetFragmentShadingRateEnumNV(
        commandBuffer: VkCommandBuffer,
        shadingRate: VkFragmentShadingRateNV,
        combinerOps: *const VkFragmentShadingRateCombinerOpKHR,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAccelerationStructureMotionInstanceTypeNV {
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 2147483647,
}
pub type VkAccelerationStructureMotionInfoFlagsNV = VkFlags;
pub type VkAccelerationStructureMotionInstanceFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkDeviceOrHostAddressConstKHR {
    pub deviceAddress: VkDeviceAddress,
    pub hostAddress: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDeviceOrHostAddressConstKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceOrHostAddressConstKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceOrHostAddressConstKHR>(),
        8usize,
        concat!("Size of: ", stringify!(VkDeviceOrHostAddressConstKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceOrHostAddressConstKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceOrHostAddressConstKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceOrHostAddressConstKHR),
            "::",
            stringify!(deviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceOrHostAddressConstKHR),
            "::",
            stringify!(hostAddress)
        )
    );
}
impl Default for VkDeviceOrHostAddressConstKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryMotionTrianglesDataNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexData: VkDeviceOrHostAddressConstKHR,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureGeometryMotionTrianglesDataNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureGeometryMotionTrianglesDataNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureGeometryMotionTrianglesDataNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureGeometryMotionTrianglesDataNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureGeometryMotionTrianglesDataNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureGeometryMotionTrianglesDataNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryMotionTrianglesDataNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryMotionTrianglesDataNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryMotionTrianglesDataNV),
            "::",
            stringify!(vertexData)
        )
    );
}
impl Default for VkAccelerationStructureGeometryMotionTrianglesDataNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAccelerationStructureMotionInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxInstances: u32,
    pub flags: VkAccelerationStructureMotionInfoFlagsNV,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureMotionInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureMotionInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureMotionInfoNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkAccelerationStructureMotionInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureMotionInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureMotionInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMotionInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMotionInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxInstances) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMotionInfoNV),
            "::",
            stringify!(maxInstances)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMotionInfoNV),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkAccelerationStructureMotionInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkAccelerationStructureMatrixMotionInstanceNV {
    pub transformT0: VkTransformMatrixKHR,
    pub transformT1: VkTransformMatrixKHR,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub accelerationStructureReference: u64,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureMatrixMotionInstanceNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureMatrixMotionInstanceNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureMatrixMotionInstanceNV>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureMatrixMotionInstanceNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureMatrixMotionInstanceNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureMatrixMotionInstanceNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformT0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMatrixMotionInstanceNV),
            "::",
            stringify!(transformT0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformT1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMatrixMotionInstanceNV),
            "::",
            stringify!(transformT1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).accelerationStructureReference) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMatrixMotionInstanceNV),
            "::",
            stringify!(accelerationStructureReference)
        )
    );
}
impl VkAccelerationStructureMatrixMotionInstanceNV {
    #[inline]
    pub fn instanceCustomIndex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceCustomIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn instanceShaderBindingTableRecordOffset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceShaderBindingTableRecordOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> VkGeometryInstanceFlagsKHR {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        instanceCustomIndex: u32,
        mask: u32,
        instanceShaderBindingTableRecordOffset: u32,
        flags: VkGeometryInstanceFlagsKHR,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let instanceCustomIndex: u32 = unsafe { ::std::mem::transmute(instanceCustomIndex) };
            instanceCustomIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let mask: u32 = unsafe { ::std::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let instanceShaderBindingTableRecordOffset: u32 =
                unsafe { ::std::mem::transmute(instanceShaderBindingTableRecordOffset) };
            instanceShaderBindingTableRecordOffset as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkSRTDataNV {
    pub sx: f32,
    pub a: f32,
    pub b: f32,
    pub pvx: f32,
    pub sy: f32,
    pub c: f32,
    pub pvy: f32,
    pub sz: f32,
    pub pvz: f32,
    pub qx: f32,
    pub qy: f32,
    pub qz: f32,
    pub qw: f32,
    pub tx: f32,
    pub ty: f32,
    pub tz: f32,
}
#[test]
fn bindgen_test_layout_VkSRTDataNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkSRTDataNV> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSRTDataNV>(),
        64usize,
        concat!("Size of: ", stringify!(VkSRTDataNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSRTDataNV>(),
        4usize,
        concat!("Alignment of ", stringify!(VkSRTDataNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(sx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pvx) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(pvx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(sy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pvy) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(pvy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sz) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pvz) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(pvz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qx) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(qx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qy) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(qy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qz) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(qz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qw) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(qw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tx) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(tx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ty) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tz) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSRTDataNV),
            "::",
            stringify!(tz)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkAccelerationStructureSRTMotionInstanceNV {
    pub transformT0: VkSRTDataNV,
    pub transformT1: VkSRTDataNV,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub accelerationStructureReference: u64,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureSRTMotionInstanceNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureSRTMotionInstanceNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureSRTMotionInstanceNV>(),
        144usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureSRTMotionInstanceNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureSRTMotionInstanceNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureSRTMotionInstanceNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformT0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureSRTMotionInstanceNV),
            "::",
            stringify!(transformT0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformT1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureSRTMotionInstanceNV),
            "::",
            stringify!(transformT1)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).accelerationStructureReference) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureSRTMotionInstanceNV),
            "::",
            stringify!(accelerationStructureReference)
        )
    );
}
impl VkAccelerationStructureSRTMotionInstanceNV {
    #[inline]
    pub fn instanceCustomIndex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceCustomIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn instanceShaderBindingTableRecordOffset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceShaderBindingTableRecordOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> VkGeometryInstanceFlagsKHR {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        instanceCustomIndex: u32,
        mask: u32,
        instanceShaderBindingTableRecordOffset: u32,
        flags: VkGeometryInstanceFlagsKHR,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let instanceCustomIndex: u32 = unsafe { ::std::mem::transmute(instanceCustomIndex) };
            instanceCustomIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let mask: u32 = unsafe { ::std::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let instanceShaderBindingTableRecordOffset: u32 =
                unsafe { ::std::mem::transmute(instanceShaderBindingTableRecordOffset) };
            instanceShaderBindingTableRecordOffset as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkAccelerationStructureMotionInstanceDataNV {
    pub staticInstance: VkAccelerationStructureInstanceKHR,
    pub matrixMotionInstance: VkAccelerationStructureMatrixMotionInstanceNV,
    pub srtMotionInstance: VkAccelerationStructureSRTMotionInstanceNV,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureMotionInstanceDataNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureMotionInstanceDataNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureMotionInstanceDataNV>(),
        144usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureMotionInstanceDataNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureMotionInstanceDataNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureMotionInstanceDataNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).staticInstance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMotionInstanceDataNV),
            "::",
            stringify!(staticInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).matrixMotionInstance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMotionInstanceDataNV),
            "::",
            stringify!(matrixMotionInstance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srtMotionInstance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMotionInstanceDataNV),
            "::",
            stringify!(srtMotionInstance)
        )
    );
}
impl Default for VkAccelerationStructureMotionInstanceDataNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureMotionInstanceNV {
    pub type_: VkAccelerationStructureMotionInstanceTypeNV,
    pub flags: VkAccelerationStructureMotionInstanceFlagsNV,
    pub data: VkAccelerationStructureMotionInstanceDataNV,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureMotionInstanceNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureMotionInstanceNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureMotionInstanceNV>(),
        152usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureMotionInstanceNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureMotionInstanceNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureMotionInstanceNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMotionInstanceNV),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMotionInstanceNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureMotionInstanceNV),
            "::",
            stringify!(data)
        )
    );
}
impl Default for VkAccelerationStructureMotionInstanceNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingMotionBlur: VkBool32,
    pub rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRayTracingMotionBlurFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRayTracingMotionBlurFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRayTracingMotionBlurFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rayTracingMotionBlur) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV),
            "::",
            stringify!(rayTracingMotionBlur)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rayTracingMotionBlurPipelineTraceRaysIndirect) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV),
            "::",
            stringify!(rayTracingMotionBlurPipelineTraceRaysIndirect)
        )
    );
}
impl Default for VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub ycbcr2plane444Formats: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ycbcr2plane444Formats) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT),
            "::",
            stringify!(ycbcr2plane444Formats)
        )
    );
}
impl Default for VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentDensityMapDeferred: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentDensityMapDeferred) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT),
            "::",
            stringify!(fragmentDensityMapDeferred)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subsampledLoads: VkBool32,
    pub subsampledCoarseReconstructionEarlyAccess: VkBool32,
    pub maxSubsampledArrayLayers: u32,
    pub maxDescriptorSetSubsampledSamplers: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subsampledLoads) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(subsampledLoads)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).subsampledCoarseReconstructionEarlyAccess) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(subsampledCoarseReconstructionEarlyAccess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSubsampledArrayLayers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(maxSubsampledArrayLayers)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetSubsampledSamplers) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT),
            "::",
            stringify!(maxDescriptorSetSubsampledSamplers)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCopyCommandTransformInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
}
#[test]
fn bindgen_test_layout_VkCopyCommandTransformInfoQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyCommandTransformInfoQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyCommandTransformInfoQCOM>(),
        24usize,
        concat!("Size of: ", stringify!(VkCopyCommandTransformInfoQCOM))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyCommandTransformInfoQCOM>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyCommandTransformInfoQCOM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyCommandTransformInfoQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyCommandTransformInfoQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyCommandTransformInfoQCOM),
            "::",
            stringify!(transform)
        )
    );
}
impl Default for VkCopyCommandTransformInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkImageCompressionFlagBitsEXT {
    VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0,
    VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1,
    VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2,
    VK_IMAGE_COMPRESSION_DISABLED_EXT = 4,
    VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkImageCompressionFlagsEXT = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkImageCompressionFixedRateFlagBitsEXT {
    VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0,
    VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1,
    VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2,
    VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4,
    VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8,
    VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16,
    VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32,
    VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64,
    VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128,
    VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256,
    VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512,
    VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024,
    VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048,
    VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096,
    VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192,
    VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384,
    VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768,
    VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536,
    VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072,
    VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144,
    VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288,
    VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576,
    VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152,
    VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304,
    VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608,
    VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkImageCompressionFixedRateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImageCompressionControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageCompressionControl: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageCompressionControlFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImageCompressionControlFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageCompressionControlFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageCompressionControlFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageCompressionControlFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageCompressionControlFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageCompressionControlFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageCompressionControlFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageCompressionControl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageCompressionControlFeaturesEXT),
            "::",
            stringify!(imageCompressionControl)
        )
    );
}
impl Default for VkPhysicalDeviceImageCompressionControlFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageCompressionControlEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageCompressionFlagsEXT,
    pub compressionControlPlaneCount: u32,
    pub pFixedRateFlags: *mut VkImageCompressionFixedRateFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkImageCompressionControlEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageCompressionControlEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageCompressionControlEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkImageCompressionControlEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageCompressionControlEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageCompressionControlEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCompressionControlEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCompressionControlEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCompressionControlEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).compressionControlPlaneCount) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCompressionControlEXT),
            "::",
            stringify!(compressionControlPlaneCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFixedRateFlags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCompressionControlEXT),
            "::",
            stringify!(pFixedRateFlags)
        )
    );
}
impl Default for VkImageCompressionControlEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubresourceLayout2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subresourceLayout: VkSubresourceLayout,
}
#[test]
fn bindgen_test_layout_VkSubresourceLayout2EXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubresourceLayout2EXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubresourceLayout2EXT>(),
        56usize,
        concat!("Size of: ", stringify!(VkSubresourceLayout2EXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubresourceLayout2EXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkSubresourceLayout2EXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout2EXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout2EXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subresourceLayout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubresourceLayout2EXT),
            "::",
            stringify!(subresourceLayout)
        )
    );
}
impl Default for VkSubresourceLayout2EXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageSubresource2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageSubresource: VkImageSubresource,
}
#[test]
fn bindgen_test_layout_VkImageSubresource2EXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageSubresource2EXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageSubresource2EXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkImageSubresource2EXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageSubresource2EXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageSubresource2EXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresource2EXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresource2EXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSubresource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageSubresource2EXT),
            "::",
            stringify!(imageSubresource)
        )
    );
}
impl Default for VkImageSubresource2EXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageCompressionPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageCompressionFlags: VkImageCompressionFlagsEXT,
    pub imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT,
}
#[test]
fn bindgen_test_layout_VkImageCompressionPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageCompressionPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageCompressionPropertiesEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageCompressionPropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageCompressionPropertiesEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageCompressionPropertiesEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCompressionPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCompressionPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageCompressionFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCompressionPropertiesEXT),
            "::",
            stringify!(imageCompressionFlags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).imageCompressionFixedRateFlags) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageCompressionPropertiesEXT),
            "::",
            stringify!(imageCompressionFixedRateFlags)
        )
    );
}
impl Default for VkImageCompressionPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetImageSubresourceLayout2EXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2EXT,
        pLayout: *mut VkSubresourceLayout2EXT,
    ),
>;
extern "system" {
    pub fn vkGetImageSubresourceLayout2EXT(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2EXT,
        pLayout: *mut VkSubresourceLayout2EXT,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub attachmentFeedbackLoopLayout: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).attachmentFeedbackLoopLayout) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT),
            "::",
            stringify!(attachmentFeedbackLoopLayout)
        )
    );
}
impl Default for VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevice4444FormatsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub formatA4R4G4B4: VkBool32,
    pub formatA4B4G4R4: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevice4444FormatsFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevice4444FormatsFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevice4444FormatsFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevice4444FormatsFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevice4444FormatsFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevice4444FormatsFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice4444FormatsFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice4444FormatsFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatA4R4G4B4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice4444FormatsFeaturesEXT),
            "::",
            stringify!(formatA4R4G4B4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).formatA4B4G4R4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevice4444FormatsFeaturesEXT),
            "::",
            stringify!(formatA4B4G4R4)
        )
    );
}
impl Default for VkPhysicalDevice4444FormatsFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDeviceFaultAddressTypeEXT {
    VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0,
    VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1,
    VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2,
    VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3,
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4,
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5,
    VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6,
    VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDeviceFaultVendorBinaryHeaderVersionEXT {
    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1,
    VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFaultFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceFault: VkBool32,
    pub deviceFaultVendorBinary: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFaultFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFaultFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFaultFeaturesEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceFaultFeaturesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFaultFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFaultFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFaultFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFaultFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceFault) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFaultFeaturesEXT),
            "::",
            stringify!(deviceFault)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceFaultVendorBinary) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFaultFeaturesEXT),
            "::",
            stringify!(deviceFaultVendorBinary)
        )
    );
}
impl Default for VkPhysicalDeviceFaultFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceFaultCountsEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub addressInfoCount: u32,
    pub vendorInfoCount: u32,
    pub vendorBinarySize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkDeviceFaultCountsEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceFaultCountsEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceFaultCountsEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkDeviceFaultCountsEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceFaultCountsEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceFaultCountsEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultCountsEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultCountsEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressInfoCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultCountsEXT),
            "::",
            stringify!(addressInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorInfoCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultCountsEXT),
            "::",
            stringify!(vendorInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorBinarySize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultCountsEXT),
            "::",
            stringify!(vendorBinarySize)
        )
    );
}
impl Default for VkDeviceFaultCountsEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceFaultAddressInfoEXT {
    pub addressType: VkDeviceFaultAddressTypeEXT,
    pub reportedAddress: VkDeviceAddress,
    pub addressPrecision: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkDeviceFaultAddressInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceFaultAddressInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceFaultAddressInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkDeviceFaultAddressInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceFaultAddressInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceFaultAddressInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultAddressInfoEXT),
            "::",
            stringify!(addressType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reportedAddress) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultAddressInfoEXT),
            "::",
            stringify!(reportedAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addressPrecision) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultAddressInfoEXT),
            "::",
            stringify!(addressPrecision)
        )
    );
}
impl Default for VkDeviceFaultAddressInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceFaultVendorInfoEXT {
    pub description: [::std::os::raw::c_char; 256usize],
    pub vendorFaultCode: u64,
    pub vendorFaultData: u64,
}
#[test]
fn bindgen_test_layout_VkDeviceFaultVendorInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceFaultVendorInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceFaultVendorInfoEXT>(),
        272usize,
        concat!("Size of: ", stringify!(VkDeviceFaultVendorInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceFaultVendorInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceFaultVendorInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorInfoEXT),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorFaultCode) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorInfoEXT),
            "::",
            stringify!(vendorFaultCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorFaultData) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorInfoEXT),
            "::",
            stringify!(vendorFaultData)
        )
    );
}
impl Default for VkDeviceFaultVendorInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceFaultInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub description: [::std::os::raw::c_char; 256usize],
    pub pAddressInfos: *mut VkDeviceFaultAddressInfoEXT,
    pub pVendorInfos: *mut VkDeviceFaultVendorInfoEXT,
    pub pVendorBinaryData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDeviceFaultInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceFaultInfoEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceFaultInfoEXT>(),
        296usize,
        concat!("Size of: ", stringify!(VkDeviceFaultInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceFaultInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceFaultInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultInfoEXT),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAddressInfos) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultInfoEXT),
            "::",
            stringify!(pAddressInfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVendorInfos) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultInfoEXT),
            "::",
            stringify!(pVendorInfos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVendorBinaryData) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultInfoEXT),
            "::",
            stringify!(pVendorBinaryData)
        )
    );
}
impl Default for VkDeviceFaultInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
    pub headerSize: u32,
    pub headerVersion: VkDeviceFaultVendorBinaryHeaderVersionEXT,
    pub vendorID: u32,
    pub deviceID: u32,
    pub driverVersion: u32,
    pub pipelineCacheUUID: [u8; 16usize],
    pub applicationNameOffset: u32,
    pub applicationVersion: u32,
    pub engineNameOffset: u32,
    pub engineVersion: u32,
    pub apiVersion: u32,
}
#[test]
fn bindgen_test_layout_VkDeviceFaultVendorBinaryHeaderVersionOneEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceFaultVendorBinaryHeaderVersionOneEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceFaultVendorBinaryHeaderVersionOneEXT>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceFaultVendorBinaryHeaderVersionOneEXT>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(headerSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headerVersion) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(headerVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendorID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(vendorID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceID) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(deviceID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverVersion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(driverVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineCacheUUID) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(pipelineCacheUUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).applicationNameOffset) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(applicationNameOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).applicationVersion) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(applicationVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engineNameOffset) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(engineNameOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).engineVersion) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(engineVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apiVersion) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT),
            "::",
            stringify!(apiVersion)
        )
    );
}
impl Default for VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetDeviceFaultInfoEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pFaultCounts: *mut VkDeviceFaultCountsEXT,
        pFaultInfo: *mut VkDeviceFaultInfoEXT,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetDeviceFaultInfoEXT(
        device: VkDevice,
        pFaultCounts: *mut VkDeviceFaultCountsEXT,
        pFaultInfo: *mut VkDeviceFaultInfoEXT,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rasterizationOrderColorAttachmentAccess: VkBool32,
    pub rasterizationOrderDepthAttachmentAccess: VkBool32,
    pub rasterizationOrderStencilAttachmentAccess: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<
        VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rasterizationOrderColorAttachmentAccess) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT),
            "::",
            stringify!(rasterizationOrderColorAttachmentAccess)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rasterizationOrderDepthAttachmentAccess) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT),
            "::",
            stringify!(rasterizationOrderDepthAttachmentAccess)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rasterizationOrderStencilAttachmentAccess) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT),
            "::",
            stringify!(rasterizationOrderStencilAttachmentAccess)
        )
    );
}
impl Default for VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM =
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub formatRgba10x6WithoutYCbCrSampler: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).formatRgba10x6WithoutYCbCrSampler) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT),
            "::",
            stringify!(formatRgba10x6WithoutYCbCrSampler)
        )
    );
}
impl Default for VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub mutableDescriptorType: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutableDescriptorType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT),
            "::",
            stringify!(mutableDescriptorType)
        )
    );
}
impl Default for VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE =
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMutableDescriptorTypeListEXT {
    pub descriptorTypeCount: u32,
    pub pDescriptorTypes: *const VkDescriptorType,
}
#[test]
fn bindgen_test_layout_VkMutableDescriptorTypeListEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMutableDescriptorTypeListEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMutableDescriptorTypeListEXT>(),
        16usize,
        concat!("Size of: ", stringify!(VkMutableDescriptorTypeListEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMutableDescriptorTypeListEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMutableDescriptorTypeListEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorTypeCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMutableDescriptorTypeListEXT),
            "::",
            stringify!(descriptorTypeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDescriptorTypes) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMutableDescriptorTypeListEXT),
            "::",
            stringify!(pDescriptorTypes)
        )
    );
}
impl Default for VkMutableDescriptorTypeListEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkMutableDescriptorTypeListVALVE = VkMutableDescriptorTypeListEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMutableDescriptorTypeCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub mutableDescriptorTypeListCount: u32,
    pub pMutableDescriptorTypeLists: *const VkMutableDescriptorTypeListEXT,
}
#[test]
fn bindgen_test_layout_VkMutableDescriptorTypeCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMutableDescriptorTypeCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMutableDescriptorTypeCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkMutableDescriptorTypeCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkMutableDescriptorTypeCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkMutableDescriptorTypeCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMutableDescriptorTypeCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMutableDescriptorTypeCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).mutableDescriptorTypeListCount) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMutableDescriptorTypeCreateInfoEXT),
            "::",
            stringify!(mutableDescriptorTypeListCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pMutableDescriptorTypeLists) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMutableDescriptorTypeCreateInfoEXT),
            "::",
            stringify!(pMutableDescriptorTypeLists)
        )
    );
}
impl Default for VkMutableDescriptorTypeCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkMutableDescriptorTypeCreateInfoVALVE = VkMutableDescriptorTypeCreateInfoEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vertexInputDynamicState: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexInputDynamicState) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT),
            "::",
            stringify!(vertexInputDynamicState)
        )
    );
}
impl Default for VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVertexInputBindingDescription2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub binding: u32,
    pub stride: u32,
    pub inputRate: VkVertexInputRate,
    pub divisor: u32,
}
#[test]
fn bindgen_test_layout_VkVertexInputBindingDescription2EXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkVertexInputBindingDescription2EXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVertexInputBindingDescription2EXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkVertexInputBindingDescription2EXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkVertexInputBindingDescription2EXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVertexInputBindingDescription2EXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription2EXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription2EXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription2EXT),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription2EXT),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputRate) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription2EXT),
            "::",
            stringify!(inputRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).divisor) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputBindingDescription2EXT),
            "::",
            stringify!(divisor)
        )
    );
}
impl Default for VkVertexInputBindingDescription2EXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkVertexInputAttributeDescription2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub location: u32,
    pub binding: u32,
    pub format: VkFormat,
    pub offset: u32,
}
#[test]
fn bindgen_test_layout_VkVertexInputAttributeDescription2EXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkVertexInputAttributeDescription2EXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkVertexInputAttributeDescription2EXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkVertexInputAttributeDescription2EXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkVertexInputAttributeDescription2EXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkVertexInputAttributeDescription2EXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription2EXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription2EXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription2EXT),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription2EXT),
            "::",
            stringify!(binding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription2EXT),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkVertexInputAttributeDescription2EXT),
            "::",
            stringify!(offset)
        )
    );
}
impl Default for VkVertexInputAttributeDescription2EXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetVertexInputEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        vertexBindingDescriptionCount: u32,
        pVertexBindingDescriptions: *const VkVertexInputBindingDescription2EXT,
        vertexAttributeDescriptionCount: u32,
        pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription2EXT,
    ),
>;
extern "system" {
    pub fn vkCmdSetVertexInputEXT(
        commandBuffer: VkCommandBuffer,
        vertexBindingDescriptionCount: u32,
        pVertexBindingDescriptions: *const VkVertexInputBindingDescription2EXT,
        vertexAttributeDescriptionCount: u32,
        pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription2EXT,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDrmPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hasPrimary: VkBool32,
    pub hasRender: VkBool32,
    pub primaryMajor: i64,
    pub primaryMinor: i64,
    pub renderMajor: i64,
    pub renderMinor: i64,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDrmPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDrmPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDrmPropertiesEXT>(),
        56usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceDrmPropertiesEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDrmPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDrmPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDrmPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDrmPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasPrimary) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDrmPropertiesEXT),
            "::",
            stringify!(hasPrimary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasRender) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDrmPropertiesEXT),
            "::",
            stringify!(hasRender)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primaryMajor) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDrmPropertiesEXT),
            "::",
            stringify!(primaryMajor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primaryMinor) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDrmPropertiesEXT),
            "::",
            stringify!(primaryMinor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderMajor) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDrmPropertiesEXT),
            "::",
            stringify!(renderMajor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderMinor) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDrmPropertiesEXT),
            "::",
            stringify!(renderMinor)
        )
    );
}
impl Default for VkPhysicalDeviceDrmPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDeviceAddressBindingTypeEXT {
    VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0,
    VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1,
    VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDeviceAddressBindingFlagBitsEXT {
    VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1,
    VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkDeviceAddressBindingFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceAddressBindingReportFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub reportAddressBinding: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceAddressBindingReportFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceAddressBindingReportFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceAddressBindingReportFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceAddressBindingReportFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceAddressBindingReportFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceAddressBindingReportFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAddressBindingReportFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAddressBindingReportFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reportAddressBinding) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAddressBindingReportFeaturesEXT),
            "::",
            stringify!(reportAddressBinding)
        )
    );
}
impl Default for VkPhysicalDeviceAddressBindingReportFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDeviceAddressBindingCallbackDataEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkDeviceAddressBindingFlagsEXT,
    pub baseAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
    pub bindingType: VkDeviceAddressBindingTypeEXT,
}
#[test]
fn bindgen_test_layout_VkDeviceAddressBindingCallbackDataEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceAddressBindingCallbackDataEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceAddressBindingCallbackDataEXT>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkDeviceAddressBindingCallbackDataEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceAddressBindingCallbackDataEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDeviceAddressBindingCallbackDataEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceAddressBindingCallbackDataEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceAddressBindingCallbackDataEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceAddressBindingCallbackDataEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseAddress) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceAddressBindingCallbackDataEXT),
            "::",
            stringify!(baseAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceAddressBindingCallbackDataEXT),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bindingType) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceAddressBindingCallbackDataEXT),
            "::",
            stringify!(bindingType)
        )
    );
}
impl Default for VkDeviceAddressBindingCallbackDataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDepthClipControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub depthClipControl: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDepthClipControlFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDepthClipControlFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDepthClipControlFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDepthClipControlFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDepthClipControlFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDepthClipControlFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClipControlFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClipControlFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthClipControl) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClipControlFeaturesEXT),
            "::",
            stringify!(depthClipControl)
        )
    );
}
impl Default for VkPhysicalDeviceDepthClipControlFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineViewportDepthClipControlCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub negativeOneToOne: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPipelineViewportDepthClipControlCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineViewportDepthClipControlCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineViewportDepthClipControlCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineViewportDepthClipControlCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineViewportDepthClipControlCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineViewportDepthClipControlCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportDepthClipControlCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportDepthClipControlCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).negativeOneToOne) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineViewportDepthClipControlCreateInfoEXT),
            "::",
            stringify!(negativeOneToOne)
        )
    );
}
impl Default for VkPipelineViewportDepthClipControlCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub primitiveTopologyListRestart: VkBool32,
    pub primitiveTopologyPatchListRestart: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).primitiveTopologyListRestart) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT),
            "::",
            stringify!(primitiveTopologyListRestart)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).primitiveTopologyPatchListRestart) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT),
            "::",
            stringify!(primitiveTopologyPatchListRestart)
        )
    );
}
impl Default for VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassShadingPipelineCreateInfoHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
}
#[test]
fn bindgen_test_layout_VkSubpassShadingPipelineCreateInfoHUAWEI() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassShadingPipelineCreateInfoHUAWEI> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassShadingPipelineCreateInfoHUAWEI>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkSubpassShadingPipelineCreateInfoHUAWEI)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassShadingPipelineCreateInfoHUAWEI>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSubpassShadingPipelineCreateInfoHUAWEI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassShadingPipelineCreateInfoHUAWEI),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassShadingPipelineCreateInfoHUAWEI),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).renderPass) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassShadingPipelineCreateInfoHUAWEI),
            "::",
            stringify!(renderPass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpass) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassShadingPipelineCreateInfoHUAWEI),
            "::",
            stringify!(subpass)
        )
    );
}
impl Default for VkSubpassShadingPipelineCreateInfoHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subpassShading: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSubpassShadingFeaturesHUAWEI> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSubpassShadingFeaturesHUAWEI>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSubpassShadingFeaturesHUAWEI>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpassShading) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI),
            "::",
            stringify!(subpassShading)
        )
    );
}
impl Default for VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxSubpassShadingWorkgroupSizeAspectRatio: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxSubpassShadingWorkgroupSizeAspectRatio) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI),
            "::",
            stringify!(maxSubpassShadingWorkgroupSizeAspectRatio)
        )
    );
}
impl Default for VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        renderpass: VkRenderPass,
        pMaxWorkgroupSize: *mut VkExtent2D,
    ) -> VkResult,
>;
pub type PFN_vkCmdSubpassShadingHUAWEI =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
extern "system" {
    pub fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(
        device: VkDevice,
        renderpass: VkRenderPass,
        pMaxWorkgroupSize: *mut VkExtent2D,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdSubpassShadingHUAWEI(commandBuffer: VkCommandBuffer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub invocationMask: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceInvocationMaskFeaturesHUAWEI> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceInvocationMaskFeaturesHUAWEI>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceInvocationMaskFeaturesHUAWEI>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invocationMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI),
            "::",
            stringify!(invocationMask)
        )
    );
}
impl Default for VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdBindInvocationMaskHUAWEI = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    ),
>;
extern "system" {
    pub fn vkCmdBindInvocationMaskHUAWEI(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    );
}
pub type VkRemoteAddressNV = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMemoryGetRemoteAddressInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[test]
fn bindgen_test_layout_VkMemoryGetRemoteAddressInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkMemoryGetRemoteAddressInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMemoryGetRemoteAddressInfoNV>(),
        32usize,
        concat!("Size of: ", stringify!(VkMemoryGetRemoteAddressInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMemoryGetRemoteAddressInfoNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMemoryGetRemoteAddressInfoNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetRemoteAddressInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetRemoteAddressInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetRemoteAddressInfoNV),
            "::",
            stringify!(memory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleType) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMemoryGetRemoteAddressInfoNV),
            "::",
            stringify!(handleType)
        )
    );
}
impl Default for VkMemoryGetRemoteAddressInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub externalMemoryRDMA: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExternalMemoryRDMAFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExternalMemoryRDMAFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExternalMemoryRDMAFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalMemoryRDMA) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV),
            "::",
            stringify!(externalMemoryRDMA)
        )
    );
}
impl Default for VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetMemoryRemoteAddressNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pMemoryGetRemoteAddressInfo: *const VkMemoryGetRemoteAddressInfoNV,
        pAddress: *mut VkRemoteAddressNV,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetMemoryRemoteAddressNV(
        device: VkDevice,
        pMemoryGetRemoteAddressInfo: *const VkMemoryGetRemoteAddressInfoNV,
        pAddress: *mut VkRemoteAddressNV,
    ) -> VkResult;
}
pub type VkPipelineInfoEXT = VkPipelineInfoKHR;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelinePropertiesIdentifierEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineIdentifier: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_VkPipelinePropertiesIdentifierEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelinePropertiesIdentifierEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelinePropertiesIdentifierEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelinePropertiesIdentifierEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelinePropertiesIdentifierEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelinePropertiesIdentifierEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelinePropertiesIdentifierEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelinePropertiesIdentifierEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineIdentifier) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelinePropertiesIdentifierEXT),
            "::",
            stringify!(pipelineIdentifier)
        )
    );
}
impl Default for VkPipelinePropertiesIdentifierEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePipelinePropertiesFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelinePropertiesIdentifier: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePipelinePropertiesFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePipelinePropertiesFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePipelinePropertiesFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePipelinePropertiesFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePipelinePropertiesFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePipelinePropertiesFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelinePropertiesFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelinePropertiesFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pipelinePropertiesIdentifier) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelinePropertiesFeaturesEXT),
            "::",
            stringify!(pipelinePropertiesIdentifier)
        )
    );
}
impl Default for VkPhysicalDevicePipelinePropertiesFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPipelinePropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoEXT,
        pPipelineProperties: *mut VkBaseOutStructure,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetPipelinePropertiesEXT(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoEXT,
        pPipelineProperties: *mut VkBaseOutStructure,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multisampledRenderToSingleSampled: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<
        VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).multisampledRenderToSingleSampled) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT),
            "::",
            stringify!(multisampledRenderToSingleSampled)
        )
    );
}
impl Default for VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassResolvePerformanceQueryEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub optimal: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSubpassResolvePerformanceQueryEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassResolvePerformanceQueryEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassResolvePerformanceQueryEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkSubpassResolvePerformanceQueryEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassResolvePerformanceQueryEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSubpassResolvePerformanceQueryEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassResolvePerformanceQueryEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassResolvePerformanceQueryEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optimal) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassResolvePerformanceQueryEXT),
            "::",
            stringify!(optimal)
        )
    );
}
impl Default for VkSubpassResolvePerformanceQueryEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMultisampledRenderToSingleSampledInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub multisampledRenderToSingleSampledEnable: VkBool32,
    pub rasterizationSamples: VkSampleCountFlagBits,
}
#[test]
fn bindgen_test_layout_VkMultisampledRenderToSingleSampledInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMultisampledRenderToSingleSampledInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMultisampledRenderToSingleSampledInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkMultisampledRenderToSingleSampledInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkMultisampledRenderToSingleSampledInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkMultisampledRenderToSingleSampledInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultisampledRenderToSingleSampledInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultisampledRenderToSingleSampledInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).multisampledRenderToSingleSampledEnable) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultisampledRenderToSingleSampledInfoEXT),
            "::",
            stringify!(multisampledRenderToSingleSampledEnable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rasterizationSamples) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultisampledRenderToSingleSampledInfoEXT),
            "::",
            stringify!(rasterizationSamples)
        )
    );
}
impl Default for VkMultisampledRenderToSingleSampledInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub extendedDynamicState2: VkBool32,
    pub extendedDynamicState2LogicOp: VkBool32,
    pub extendedDynamicState2PatchControlPoints: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extendedDynamicState2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT),
            "::",
            stringify!(extendedDynamicState2)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState2LogicOp) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT),
            "::",
            stringify!(extendedDynamicState2LogicOp)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState2PatchControlPoints) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT),
            "::",
            stringify!(extendedDynamicState2PatchControlPoints)
        )
    );
}
impl Default for VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetPatchControlPointsEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, patchControlPoints: u32),
>;
pub type PFN_vkCmdSetRasterizerDiscardEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthBiasEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32),
>;
pub type PFN_vkCmdSetLogicOpEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, logicOp: VkLogicOp)>;
pub type PFN_vkCmdSetPrimitiveRestartEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32),
>;
extern "system" {
    pub fn vkCmdSetPatchControlPointsEXT(commandBuffer: VkCommandBuffer, patchControlPoints: u32);
}
extern "system" {
    pub fn vkCmdSetRasterizerDiscardEnableEXT(
        commandBuffer: VkCommandBuffer,
        rasterizerDiscardEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetDepthBiasEnableEXT(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetLogicOpEXT(commandBuffer: VkCommandBuffer, logicOp: VkLogicOp);
}
extern "system" {
    pub fn vkCmdSetPrimitiveRestartEnableEXT(
        commandBuffer: VkCommandBuffer,
        primitiveRestartEnable: VkBool32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceColorWriteEnableFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub colorWriteEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceColorWriteEnableFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceColorWriteEnableFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceColorWriteEnableFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceColorWriteEnableFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceColorWriteEnableFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceColorWriteEnableFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceColorWriteEnableFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceColorWriteEnableFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorWriteEnable) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceColorWriteEnableFeaturesEXT),
            "::",
            stringify!(colorWriteEnable)
        )
    );
}
impl Default for VkPhysicalDeviceColorWriteEnableFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineColorWriteCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentCount: u32,
    pub pColorWriteEnables: *const VkBool32,
}
#[test]
fn bindgen_test_layout_VkPipelineColorWriteCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineColorWriteCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineColorWriteCreateInfoEXT>(),
        32usize,
        concat!("Size of: ", stringify!(VkPipelineColorWriteCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineColorWriteCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineColorWriteCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorWriteCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorWriteCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachmentCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorWriteCreateInfoEXT),
            "::",
            stringify!(attachmentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pColorWriteEnables) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineColorWriteCreateInfoEXT),
            "::",
            stringify!(pColorWriteEnables)
        )
    );
}
impl Default for VkPipelineColorWriteCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetColorWriteEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pColorWriteEnables: *const VkBool32,
    ),
>;
extern "system" {
    pub fn vkCmdSetColorWriteEnableEXT(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pColorWriteEnables: *const VkBool32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub primitivesGeneratedQuery: VkBool32,
    pub primitivesGeneratedQueryWithRasterizerDiscard: VkBool32,
    pub primitivesGeneratedQueryWithNonZeroStreams: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitivesGeneratedQuery) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT),
            "::",
            stringify!(primitivesGeneratedQuery)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).primitivesGeneratedQueryWithRasterizerDiscard) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT),
            "::",
            stringify!(primitivesGeneratedQueryWithRasterizerDiscard)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).primitivesGeneratedQueryWithNonZeroStreams) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT),
            "::",
            stringify!(primitivesGeneratedQueryWithNonZeroStreams)
        )
    );
}
impl Default for VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT =
    VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;
pub type VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityPropertiesKHR;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImageViewMinLodFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minLod: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageViewMinLodFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImageViewMinLodFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageViewMinLodFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageViewMinLodFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageViewMinLodFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageViewMinLodFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageViewMinLodFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageViewMinLodFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minLod) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageViewMinLodFeaturesEXT),
            "::",
            stringify!(minLod)
        )
    );
}
impl Default for VkPhysicalDeviceImageViewMinLodFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialOrd, PartialEq)]
pub struct VkImageViewMinLodCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub minLod: f32,
}
#[test]
fn bindgen_test_layout_VkImageViewMinLodCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageViewMinLodCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageViewMinLodCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageViewMinLodCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewMinLodCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewMinLodCreateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewMinLodCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewMinLodCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minLod) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewMinLodCreateInfoEXT),
            "::",
            stringify!(minLod)
        )
    );
}
impl Default for VkImageViewMinLodCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMultiDrawFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multiDraw: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultiDrawFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMultiDrawFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultiDrawFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMultiDrawFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultiDrawFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultiDrawFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiDrawFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiDrawFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiDraw) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiDrawFeaturesEXT),
            "::",
            stringify!(multiDraw)
        )
    );
}
impl Default for VkPhysicalDeviceMultiDrawFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMultiDrawPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxMultiDrawCount: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultiDrawPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMultiDrawPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultiDrawPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMultiDrawPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultiDrawPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultiDrawPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiDrawPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiDrawPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMultiDrawCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiDrawPropertiesEXT),
            "::",
            stringify!(maxMultiDrawCount)
        )
    );
}
impl Default for VkPhysicalDeviceMultiDrawPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMultiDrawInfoEXT {
    pub firstVertex: u32,
    pub vertexCount: u32,
}
#[test]
fn bindgen_test_layout_VkMultiDrawInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMultiDrawInfoEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMultiDrawInfoEXT>(),
        8usize,
        concat!("Size of: ", stringify!(VkMultiDrawInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMultiDrawInfoEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(VkMultiDrawInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstVertex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiDrawInfoEXT),
            "::",
            stringify!(firstVertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiDrawInfoEXT),
            "::",
            stringify!(vertexCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMultiDrawIndexedInfoEXT {
    pub firstIndex: u32,
    pub indexCount: u32,
    pub vertexOffset: i32,
}
#[test]
fn bindgen_test_layout_VkMultiDrawIndexedInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMultiDrawIndexedInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMultiDrawIndexedInfoEXT>(),
        12usize,
        concat!("Size of: ", stringify!(VkMultiDrawIndexedInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMultiDrawIndexedInfoEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(VkMultiDrawIndexedInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiDrawIndexedInfoEXT),
            "::",
            stringify!(firstIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiDrawIndexedInfoEXT),
            "::",
            stringify!(indexCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexOffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiDrawIndexedInfoEXT),
            "::",
            stringify!(vertexOffset)
        )
    );
}
pub type PFN_vkCmdDrawMultiEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        drawCount: u32,
        pVertexInfo: *const VkMultiDrawInfoEXT,
        instanceCount: u32,
        firstInstance: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawMultiIndexedEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        drawCount: u32,
        pIndexInfo: *const VkMultiDrawIndexedInfoEXT,
        instanceCount: u32,
        firstInstance: u32,
        stride: u32,
        pVertexOffset: *const i32,
    ),
>;
extern "system" {
    pub fn vkCmdDrawMultiEXT(
        commandBuffer: VkCommandBuffer,
        drawCount: u32,
        pVertexInfo: *const VkMultiDrawInfoEXT,
        instanceCount: u32,
        firstInstance: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawMultiIndexedEXT(
        commandBuffer: VkCommandBuffer,
        drawCount: u32,
        pIndexInfo: *const VkMultiDrawIndexedInfoEXT,
        instanceCount: u32,
        firstInstance: u32,
        stride: u32,
        pVertexOffset: *const i32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub image2DViewOf3D: VkBool32,
    pub sampler2DViewOf3D: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImage2DViewOf3DFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImage2DViewOf3DFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImage2DViewOf3DFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image2DViewOf3D) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT),
            "::",
            stringify!(image2DViewOf3D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampler2DViewOf3D) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT),
            "::",
            stringify!(sampler2DViewOf3D)
        )
    );
}
impl Default for VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderTileImageFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderTileImageColorReadAccess: VkBool32,
    pub shaderTileImageDepthReadAccess: VkBool32,
    pub shaderTileImageStencilReadAccess: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderTileImageFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderTileImageFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderTileImageFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderTileImageFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderTileImageFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderTileImageFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTileImageFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTileImageFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderTileImageColorReadAccess) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTileImageFeaturesEXT),
            "::",
            stringify!(shaderTileImageColorReadAccess)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderTileImageDepthReadAccess) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTileImageFeaturesEXT),
            "::",
            stringify!(shaderTileImageDepthReadAccess)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderTileImageStencilReadAccess) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTileImageFeaturesEXT),
            "::",
            stringify!(shaderTileImageStencilReadAccess)
        )
    );
}
impl Default for VkPhysicalDeviceShaderTileImageFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderTileImagePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderTileImageCoherentReadAccelerated: VkBool32,
    pub shaderTileImageReadSampleFromPixelRateInvocation: VkBool32,
    pub shaderTileImageReadFromHelperInvocation: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderTileImagePropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderTileImagePropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderTileImagePropertiesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderTileImagePropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderTileImagePropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderTileImagePropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTileImagePropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTileImagePropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderTileImageCoherentReadAccelerated) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTileImagePropertiesEXT),
            "::",
            stringify!(shaderTileImageCoherentReadAccelerated)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderTileImageReadSampleFromPixelRateInvocation) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTileImagePropertiesEXT),
            "::",
            stringify!(shaderTileImageReadSampleFromPixelRateInvocation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderTileImageReadFromHelperInvocation) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderTileImagePropertiesEXT),
            "::",
            stringify!(shaderTileImageReadFromHelperInvocation)
        )
    );
}
impl Default for VkPhysicalDeviceShaderTileImagePropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkMicromapEXT_T {
    _unused: [u8; 0],
}
pub type VkMicromapEXT = *mut VkMicromapEXT_T;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkMicromapTypeEXT {
    VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0,
    VK_MICROMAP_TYPE_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkBuildMicromapModeEXT {
    VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0,
    VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkCopyMicromapModeEXT {
    VK_COPY_MICROMAP_MODE_CLONE_EXT = 0,
    VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1,
    VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2,
    VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3,
    VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkOpacityMicromapFormatEXT {
    VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1,
    VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2,
    VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT = 2147483647,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkOpacityMicromapSpecialIndexEXT {
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4,
    VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAccelerationStructureCompatibilityKHR {
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0,
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1,
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAccelerationStructureBuildTypeKHR {
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkBuildMicromapFlagBitsEXT {
    VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT = 1,
    VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT = 2,
    VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT = 4,
    VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkBuildMicromapFlagsEXT = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkMicromapCreateFlagBitsEXT {
    VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = 1,
    VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkMicromapCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMicromapUsageEXT {
    pub count: u32,
    pub subdivisionLevel: u32,
    pub format: u32,
}
#[test]
fn bindgen_test_layout_VkMicromapUsageEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMicromapUsageEXT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMicromapUsageEXT>(),
        12usize,
        concat!("Size of: ", stringify!(VkMicromapUsageEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMicromapUsageEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(VkMicromapUsageEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapUsageEXT),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subdivisionLevel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapUsageEXT),
            "::",
            stringify!(subdivisionLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapUsageEXT),
            "::",
            stringify!(format)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkDeviceOrHostAddressKHR {
    pub deviceAddress: VkDeviceAddress,
    pub hostAddress: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkDeviceOrHostAddressKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkDeviceOrHostAddressKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDeviceOrHostAddressKHR>(),
        8usize,
        concat!("Size of: ", stringify!(VkDeviceOrHostAddressKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDeviceOrHostAddressKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDeviceOrHostAddressKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceOrHostAddressKHR),
            "::",
            stringify!(deviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDeviceOrHostAddressKHR),
            "::",
            stringify!(hostAddress)
        )
    );
}
impl Default for VkDeviceOrHostAddressKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMicromapBuildInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkMicromapTypeEXT,
    pub flags: VkBuildMicromapFlagsEXT,
    pub mode: VkBuildMicromapModeEXT,
    pub dstMicromap: VkMicromapEXT,
    pub usageCountsCount: u32,
    pub pUsageCounts: *const VkMicromapUsageEXT,
    pub ppUsageCounts: *const *const VkMicromapUsageEXT,
    pub data: VkDeviceOrHostAddressConstKHR,
    pub scratchData: VkDeviceOrHostAddressKHR,
    pub triangleArray: VkDeviceOrHostAddressConstKHR,
    pub triangleArrayStride: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkMicromapBuildInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMicromapBuildInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMicromapBuildInfoEXT>(),
        96usize,
        concat!("Size of: ", stringify!(VkMicromapBuildInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMicromapBuildInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMicromapBuildInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstMicromap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(dstMicromap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usageCountsCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(usageCountsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUsageCounts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(pUsageCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppUsageCounts) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(ppUsageCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scratchData) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(scratchData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).triangleArray) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(triangleArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).triangleArrayStride) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildInfoEXT),
            "::",
            stringify!(triangleArrayStride)
        )
    );
}
impl Default for VkMicromapBuildInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMicromapCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub createFlags: VkMicromapCreateFlagsEXT,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub type_: VkMicromapTypeEXT,
    pub deviceAddress: VkDeviceAddress,
}
#[test]
fn bindgen_test_layout_VkMicromapCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMicromapCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMicromapCreateInfoEXT>(),
        64usize,
        concat!("Size of: ", stringify!(VkMicromapCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMicromapCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMicromapCreateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapCreateInfoEXT),
            "::",
            stringify!(createFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapCreateInfoEXT),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapCreateInfoEXT),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapCreateInfoEXT),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapCreateInfoEXT),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceAddress) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapCreateInfoEXT),
            "::",
            stringify!(deviceAddress)
        )
    );
}
impl Default for VkMicromapCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceOpacityMicromapFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub micromap: VkBool32,
    pub micromapCaptureReplay: VkBool32,
    pub micromapHostCommands: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceOpacityMicromapFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceOpacityMicromapFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceOpacityMicromapFeaturesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceOpacityMicromapFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceOpacityMicromapFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceOpacityMicromapFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpacityMicromapFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpacityMicromapFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).micromap) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpacityMicromapFeaturesEXT),
            "::",
            stringify!(micromap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).micromapCaptureReplay) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpacityMicromapFeaturesEXT),
            "::",
            stringify!(micromapCaptureReplay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).micromapHostCommands) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpacityMicromapFeaturesEXT),
            "::",
            stringify!(micromapHostCommands)
        )
    );
}
impl Default for VkPhysicalDeviceOpacityMicromapFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceOpacityMicromapPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxOpacity2StateSubdivisionLevel: u32,
    pub maxOpacity4StateSubdivisionLevel: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceOpacityMicromapPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceOpacityMicromapPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceOpacityMicromapPropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceOpacityMicromapPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceOpacityMicromapPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceOpacityMicromapPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpacityMicromapPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpacityMicromapPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxOpacity2StateSubdivisionLevel) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpacityMicromapPropertiesEXT),
            "::",
            stringify!(maxOpacity2StateSubdivisionLevel)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxOpacity4StateSubdivisionLevel) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpacityMicromapPropertiesEXT),
            "::",
            stringify!(maxOpacity4StateSubdivisionLevel)
        )
    );
}
impl Default for VkPhysicalDeviceOpacityMicromapPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMicromapVersionInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pVersionData: *const u8,
}
#[test]
fn bindgen_test_layout_VkMicromapVersionInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMicromapVersionInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMicromapVersionInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkMicromapVersionInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMicromapVersionInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMicromapVersionInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapVersionInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapVersionInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVersionData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapVersionInfoEXT),
            "::",
            stringify!(pVersionData)
        )
    );
}
impl Default for VkMicromapVersionInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMicromapToMemoryInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkMicromapEXT,
    pub dst: VkDeviceOrHostAddressKHR,
    pub mode: VkCopyMicromapModeEXT,
}
#[test]
fn bindgen_test_layout_VkCopyMicromapToMemoryInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyMicromapToMemoryInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyMicromapToMemoryInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkCopyMicromapToMemoryInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyMicromapToMemoryInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyMicromapToMemoryInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMicromapToMemoryInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMicromapToMemoryInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMicromapToMemoryInfoEXT),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMicromapToMemoryInfoEXT),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMicromapToMemoryInfoEXT),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for VkCopyMicromapToMemoryInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMemoryToMicromapInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkDeviceOrHostAddressConstKHR,
    pub dst: VkMicromapEXT,
    pub mode: VkCopyMicromapModeEXT,
}
#[test]
fn bindgen_test_layout_VkCopyMemoryToMicromapInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyMemoryToMicromapInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyMemoryToMicromapInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkCopyMemoryToMicromapInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyMemoryToMicromapInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyMemoryToMicromapInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToMicromapInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToMicromapInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToMicromapInfoEXT),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToMicromapInfoEXT),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToMicromapInfoEXT),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for VkCopyMemoryToMicromapInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCopyMicromapInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkMicromapEXT,
    pub dst: VkMicromapEXT,
    pub mode: VkCopyMicromapModeEXT,
}
#[test]
fn bindgen_test_layout_VkCopyMicromapInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyMicromapInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyMicromapInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkCopyMicromapInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyMicromapInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyMicromapInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMicromapInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMicromapInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMicromapInfoEXT),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMicromapInfoEXT),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMicromapInfoEXT),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for VkCopyMicromapInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMicromapBuildSizesInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub micromapSize: VkDeviceSize,
    pub buildScratchSize: VkDeviceSize,
    pub discardable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkMicromapBuildSizesInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMicromapBuildSizesInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMicromapBuildSizesInfoEXT>(),
        40usize,
        concat!("Size of: ", stringify!(VkMicromapBuildSizesInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMicromapBuildSizesInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkMicromapBuildSizesInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildSizesInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildSizesInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).micromapSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildSizesInfoEXT),
            "::",
            stringify!(micromapSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buildScratchSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildSizesInfoEXT),
            "::",
            stringify!(buildScratchSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).discardable) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapBuildSizesInfoEXT),
            "::",
            stringify!(discardable)
        )
    );
}
impl Default for VkMicromapBuildSizesInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureTrianglesOpacityMicromapEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub indexType: VkIndexType,
    pub indexBuffer: VkDeviceOrHostAddressConstKHR,
    pub indexStride: VkDeviceSize,
    pub baseTriangle: u32,
    pub usageCountsCount: u32,
    pub pUsageCounts: *const VkMicromapUsageEXT,
    pub ppUsageCounts: *const *const VkMicromapUsageEXT,
    pub micromap: VkMicromapEXT,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureTrianglesOpacityMicromapEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureTrianglesOpacityMicromapEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureTrianglesOpacityMicromapEXT>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureTrianglesOpacityMicromapEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT),
            "::",
            stringify!(indexType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexBuffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT),
            "::",
            stringify!(indexBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexStride) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT),
            "::",
            stringify!(indexStride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseTriangle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT),
            "::",
            stringify!(baseTriangle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usageCountsCount) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT),
            "::",
            stringify!(usageCountsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pUsageCounts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT),
            "::",
            stringify!(pUsageCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppUsageCounts) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT),
            "::",
            stringify!(ppUsageCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).micromap) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureTrianglesOpacityMicromapEXT),
            "::",
            stringify!(micromap)
        )
    );
}
impl Default for VkAccelerationStructureTrianglesOpacityMicromapEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMicromapTriangleEXT {
    pub dataOffset: u32,
    pub subdivisionLevel: u16,
    pub format: u16,
}
#[test]
fn bindgen_test_layout_VkMicromapTriangleEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkMicromapTriangleEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMicromapTriangleEXT>(),
        8usize,
        concat!("Size of: ", stringify!(VkMicromapTriangleEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkMicromapTriangleEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(VkMicromapTriangleEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataOffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapTriangleEXT),
            "::",
            stringify!(dataOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subdivisionLevel) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapTriangleEXT),
            "::",
            stringify!(subdivisionLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMicromapTriangleEXT),
            "::",
            stringify!(format)
        )
    );
}
pub type PFN_vkCreateMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkMicromapCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMicromap: *mut VkMicromapEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        micromap: VkMicromapEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdBuildMicromapsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkMicromapBuildInfoEXT,
    ),
>;
pub type PFN_vkBuildMicromapsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        infoCount: u32,
        pInfos: *const VkMicromapBuildInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCopyMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMicromapInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCopyMicromapToMemoryEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMicromapToMemoryInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCopyMemoryToMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMemoryToMicromapInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkWriteMicromapsPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        micromapCount: u32,
        pMicromaps: *const VkMicromapEXT,
        queryType: VkQueryType,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: usize,
    ) -> VkResult,
>;
pub type PFN_vkCmdCopyMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pInfo: *const VkCopyMicromapInfoEXT),
>;
pub type PFN_vkCmdCopyMicromapToMemoryEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMicromapToMemoryInfoEXT,
    ),
>;
pub type PFN_vkCmdCopyMemoryToMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMemoryToMicromapInfoEXT,
    ),
>;
pub type PFN_vkCmdWriteMicromapsPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        micromapCount: u32,
        pMicromaps: *const VkMicromapEXT,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkGetDeviceMicromapCompatibilityEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pVersionInfo: *const VkMicromapVersionInfoEXT,
        pCompatibility: *mut VkAccelerationStructureCompatibilityKHR,
    ),
>;
pub type PFN_vkGetMicromapBuildSizesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buildType: VkAccelerationStructureBuildTypeKHR,
        pBuildInfo: *const VkMicromapBuildInfoEXT,
        pSizeInfo: *mut VkMicromapBuildSizesInfoEXT,
    ),
>;
extern "system" {
    pub fn vkCreateMicromapEXT(
        device: VkDevice,
        pCreateInfo: *const VkMicromapCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMicromap: *mut VkMicromapEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyMicromapEXT(
        device: VkDevice,
        micromap: VkMicromapEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCmdBuildMicromapsEXT(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkMicromapBuildInfoEXT,
    );
}
extern "system" {
    pub fn vkBuildMicromapsEXT(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        infoCount: u32,
        pInfos: *const VkMicromapBuildInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCopyMicromapEXT(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMicromapInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCopyMicromapToMemoryEXT(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMicromapToMemoryInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCopyMemoryToMicromapEXT(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMemoryToMicromapInfoEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkWriteMicromapsPropertiesEXT(
        device: VkDevice,
        micromapCount: u32,
        pMicromaps: *const VkMicromapEXT,
        queryType: VkQueryType,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: usize,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdCopyMicromapEXT(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMicromapInfoEXT,
    );
}
extern "system" {
    pub fn vkCmdCopyMicromapToMemoryEXT(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMicromapToMemoryInfoEXT,
    );
}
extern "system" {
    pub fn vkCmdCopyMemoryToMicromapEXT(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMemoryToMicromapInfoEXT,
    );
}
extern "system" {
    pub fn vkCmdWriteMicromapsPropertiesEXT(
        commandBuffer: VkCommandBuffer,
        micromapCount: u32,
        pMicromaps: *const VkMicromapEXT,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    );
}
extern "system" {
    pub fn vkGetDeviceMicromapCompatibilityEXT(
        device: VkDevice,
        pVersionInfo: *const VkMicromapVersionInfoEXT,
        pCompatibility: *mut VkAccelerationStructureCompatibilityKHR,
    );
}
extern "system" {
    pub fn vkGetMicromapBuildSizesEXT(
        device: VkDevice,
        buildType: VkAccelerationStructureBuildTypeKHR,
        pBuildInfo: *const VkMicromapBuildInfoEXT,
        pSizeInfo: *mut VkMicromapBuildSizesInfoEXT,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub clustercullingShader: VkBool32,
    pub multiviewClusterCullingShader: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clustercullingShader) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI),
            "::",
            stringify!(clustercullingShader)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).multiviewClusterCullingShader) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI),
            "::",
            stringify!(multiviewClusterCullingShader)
        )
    );
}
impl Default for VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxWorkGroupCount: [u32; 3usize],
    pub maxWorkGroupSize: [u32; 3usize],
    pub maxOutputClusterCount: u32,
    pub indirectBufferOffsetAlignment: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxWorkGroupCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI),
            "::",
            stringify!(maxWorkGroupCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxWorkGroupSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI),
            "::",
            stringify!(maxWorkGroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxOutputClusterCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI),
            "::",
            stringify!(maxOutputClusterCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).indirectBufferOffsetAlignment) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI),
            "::",
            stringify!(indirectBufferOffsetAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdDrawClusterHUAWEI = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkCmdDrawClusterIndirectHUAWEI = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize),
>;
extern "system" {
    pub fn vkCmdDrawClusterHUAWEI(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawClusterIndirectHUAWEI(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub borderColorSwizzle: VkBool32,
    pub borderColorSwizzleFromImage: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceBorderColorSwizzleFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceBorderColorSwizzleFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceBorderColorSwizzleFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).borderColorSwizzle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT),
            "::",
            stringify!(borderColorSwizzle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).borderColorSwizzleFromImage) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT),
            "::",
            stringify!(borderColorSwizzleFromImage)
        )
    );
}
impl Default for VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSamplerBorderColorComponentMappingCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub components: VkComponentMapping,
    pub srgb: VkBool32,
}
#[test]
fn bindgen_test_layout_VkSamplerBorderColorComponentMappingCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkSamplerBorderColorComponentMappingCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSamplerBorderColorComponentMappingCreateInfoEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkSamplerBorderColorComponentMappingCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSamplerBorderColorComponentMappingCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSamplerBorderColorComponentMappingCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerBorderColorComponentMappingCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerBorderColorComponentMappingCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).components) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerBorderColorComponentMappingCreateInfoEXT),
            "::",
            stringify!(components)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srgb) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSamplerBorderColorComponentMappingCreateInfoEXT),
            "::",
            stringify!(srgb)
        )
    );
}
impl Default for VkSamplerBorderColorComponentMappingCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pageableDeviceLocalMemory: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageableDeviceLocalMemory) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT),
            "::",
            stringify!(pageableDeviceLocalMemory)
        )
    );
}
impl Default for VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkSetDeviceMemoryPriorityEXT = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, memory: VkDeviceMemory, priority: f32),
>;
extern "system" {
    pub fn vkSetDeviceMemoryPriorityEXT(device: VkDevice, memory: VkDeviceMemory, priority: f32);
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderCorePropertiesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pixelRate: u32,
    pub texelRate: u32,
    pub fmaRate: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderCorePropertiesARM() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderCorePropertiesARM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderCorePropertiesARM>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesARM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderCorePropertiesARM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesARM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesARM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesARM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelRate) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesARM),
            "::",
            stringify!(pixelRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).texelRate) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesARM),
            "::",
            stringify!(texelRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fmaRate) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCorePropertiesARM),
            "::",
            stringify!(fmaRate)
        )
    );
}
impl Default for VkPhysicalDeviceShaderCorePropertiesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageSlicedViewOf3D: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSlicedViewOf3D) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT),
            "::",
            stringify!(imageSlicedViewOf3D)
        )
    );
}
impl Default for VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageViewSlicedCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sliceOffset: u32,
    pub sliceCount: u32,
}
#[test]
fn bindgen_test_layout_VkImageViewSlicedCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageViewSlicedCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageViewSlicedCreateInfoEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkImageViewSlicedCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewSlicedCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkImageViewSlicedCreateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewSlicedCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewSlicedCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sliceOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewSlicedCreateInfoEXT),
            "::",
            stringify!(sliceOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sliceCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewSlicedCreateInfoEXT),
            "::",
            stringify!(sliceCount)
        )
    );
}
impl Default for VkImageViewSlicedCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub descriptorSetHostMapping: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorSetHostMapping) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE),
            "::",
            stringify!(descriptorSetHostMapping)
        )
    );
}
impl Default for VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorSetBindingReferenceVALVE {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub descriptorSetLayout: VkDescriptorSetLayout,
    pub binding: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetBindingReferenceVALVE() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetBindingReferenceVALVE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetBindingReferenceVALVE>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorSetBindingReferenceVALVE)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetBindingReferenceVALVE>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorSetBindingReferenceVALVE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetBindingReferenceVALVE),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetBindingReferenceVALVE),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorSetLayout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetBindingReferenceVALVE),
            "::",
            stringify!(descriptorSetLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binding) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetBindingReferenceVALVE),
            "::",
            stringify!(binding)
        )
    );
}
impl Default for VkDescriptorSetBindingReferenceVALVE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDescriptorSetLayoutHostMappingInfoVALVE {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub descriptorOffset: usize,
    pub descriptorSize: u32,
}
#[test]
fn bindgen_test_layout_VkDescriptorSetLayoutHostMappingInfoVALVE() {
    const UNINIT: ::std::mem::MaybeUninit<VkDescriptorSetLayoutHostMappingInfoVALVE> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDescriptorSetLayoutHostMappingInfoVALVE>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkDescriptorSetLayoutHostMappingInfoVALVE)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkDescriptorSetLayoutHostMappingInfoVALVE>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkDescriptorSetLayoutHostMappingInfoVALVE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutHostMappingInfoVALVE),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutHostMappingInfoVALVE),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutHostMappingInfoVALVE),
            "::",
            stringify!(descriptorOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDescriptorSetLayoutHostMappingInfoVALVE),
            "::",
            stringify!(descriptorSize)
        )
    );
}
impl Default for VkDescriptorSetLayoutHostMappingInfoVALVE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pBindingReference: *const VkDescriptorSetBindingReferenceVALVE,
        pHostMapping: *mut VkDescriptorSetLayoutHostMappingInfoVALVE,
    ),
>;
pub type PFN_vkGetDescriptorSetHostMappingVALVE = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        ppData: *mut *mut ::std::os::raw::c_void,
    ),
>;
extern "system" {
    pub fn vkGetDescriptorSetLayoutHostMappingInfoVALVE(
        device: VkDevice,
        pBindingReference: *const VkDescriptorSetBindingReferenceVALVE,
        pHostMapping: *mut VkDescriptorSetLayoutHostMappingInfoVALVE,
    );
}
extern "system" {
    pub fn vkGetDescriptorSetHostMappingVALVE(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        ppData: *mut *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub depthClampZeroOne: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceDepthClampZeroOneFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceDepthClampZeroOneFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceDepthClampZeroOneFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceDepthClampZeroOneFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthClampZeroOne) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceDepthClampZeroOneFeaturesEXT),
            "::",
            stringify!(depthClampZeroOne)
        )
    );
}
impl Default for VkPhysicalDeviceDepthClampZeroOneFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub nonSeamlessCubeMap: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nonSeamlessCubeMap) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT),
            "::",
            stringify!(nonSeamlessCubeMap)
        )
    );
}
impl Default for VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentDensityMapOffset: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentDensityMapOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM),
            "::",
            stringify!(fragmentDensityMapOffset)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentDensityOffsetGranularity: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentDensityOffsetGranularity) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM),
            "::",
            stringify!(fragmentDensityOffsetGranularity)
        )
    );
}
impl Default for VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fragmentDensityOffsetCount: u32,
    pub pFragmentDensityOffsets: *const VkOffset2D,
}
#[test]
fn bindgen_test_layout_VkSubpassFragmentDensityMapOffsetEndInfoQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkSubpassFragmentDensityMapOffsetEndInfoQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkSubpassFragmentDensityMapOffsetEndInfoQCOM>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkSubpassFragmentDensityMapOffsetEndInfoQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkSubpassFragmentDensityMapOffsetEndInfoQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkSubpassFragmentDensityMapOffsetEndInfoQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassFragmentDensityMapOffsetEndInfoQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassFragmentDensityMapOffsetEndInfoQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentDensityOffsetCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassFragmentDensityMapOffsetEndInfoQCOM),
            "::",
            stringify!(fragmentDensityOffsetCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pFragmentDensityOffsets) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkSubpassFragmentDensityMapOffsetEndInfoQCOM),
            "::",
            stringify!(pFragmentDensityOffsets)
        )
    );
}
impl Default for VkSubpassFragmentDensityMapOffsetEndInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCopyMemoryIndirectCommandNV {
    pub srcAddress: VkDeviceAddress,
    pub dstAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkCopyMemoryIndirectCommandNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyMemoryIndirectCommandNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyMemoryIndirectCommandNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkCopyMemoryIndirectCommandNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyMemoryIndirectCommandNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkCopyMemoryIndirectCommandNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryIndirectCommandNV),
            "::",
            stringify!(srcAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAddress) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryIndirectCommandNV),
            "::",
            stringify!(dstAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryIndirectCommandNV),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCopyMemoryToImageIndirectCommandNV {
    pub srcAddress: VkDeviceAddress,
    pub bufferRowLength: u32,
    pub bufferImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[test]
fn bindgen_test_layout_VkCopyMemoryToImageIndirectCommandNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyMemoryToImageIndirectCommandNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyMemoryToImageIndirectCommandNV>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(VkCopyMemoryToImageIndirectCommandNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyMemoryToImageIndirectCommandNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkCopyMemoryToImageIndirectCommandNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToImageIndirectCommandNV),
            "::",
            stringify!(srcAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferRowLength) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToImageIndirectCommandNV),
            "::",
            stringify!(bufferRowLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferImageHeight) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToImageIndirectCommandNV),
            "::",
            stringify!(bufferImageHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSubresource) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToImageIndirectCommandNV),
            "::",
            stringify!(imageSubresource)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageOffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToImageIndirectCommandNV),
            "::",
            stringify!(imageOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageExtent) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToImageIndirectCommandNV),
            "::",
            stringify!(imageExtent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub indirectCopy: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCopyMemoryIndirectFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceCopyMemoryIndirectFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCopyMemoryIndirectFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCopyMemoryIndirectFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indirectCopy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV),
            "::",
            stringify!(indirectCopy)
        )
    );
}
impl Default for VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportedQueues: VkQueueFlags,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceCopyMemoryIndirectPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedQueues) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV),
            "::",
            stringify!(supportedQueues)
        )
    );
}
impl Default for VkPhysicalDeviceCopyMemoryIndirectPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdCopyMemoryIndirectNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        copyBufferAddress: VkDeviceAddress,
        copyCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdCopyMemoryToImageIndirectNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        copyBufferAddress: VkDeviceAddress,
        copyCount: u32,
        stride: u32,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        pImageSubresources: *const VkImageSubresourceLayers,
    ),
>;
extern "system" {
    pub fn vkCmdCopyMemoryIndirectNV(
        commandBuffer: VkCommandBuffer,
        copyBufferAddress: VkDeviceAddress,
        copyCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdCopyMemoryToImageIndirectNV(
        commandBuffer: VkCommandBuffer,
        copyBufferAddress: VkDeviceAddress,
        copyCount: u32,
        stride: u32,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        pImageSubresources: *const VkImageSubresourceLayers,
    );
}
pub type VkMemoryDecompressionMethodFlagBitsNV = VkFlags64;
pub const VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV:
    VkMemoryDecompressionMethodFlagBitsNV = 1;
pub type VkMemoryDecompressionMethodFlagsNV = VkFlags64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDecompressMemoryRegionNV {
    pub srcAddress: VkDeviceAddress,
    pub dstAddress: VkDeviceAddress,
    pub compressedSize: VkDeviceSize,
    pub decompressedSize: VkDeviceSize,
    pub decompressionMethod: VkMemoryDecompressionMethodFlagsNV,
}
#[test]
fn bindgen_test_layout_VkDecompressMemoryRegionNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkDecompressMemoryRegionNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDecompressMemoryRegionNV>(),
        40usize,
        concat!("Size of: ", stringify!(VkDecompressMemoryRegionNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDecompressMemoryRegionNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDecompressMemoryRegionNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDecompressMemoryRegionNV),
            "::",
            stringify!(srcAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAddress) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDecompressMemoryRegionNV),
            "::",
            stringify!(dstAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressedSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDecompressMemoryRegionNV),
            "::",
            stringify!(compressedSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decompressedSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDecompressMemoryRegionNV),
            "::",
            stringify!(decompressedSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decompressionMethod) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDecompressMemoryRegionNV),
            "::",
            stringify!(decompressionMethod)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMemoryDecompressionFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryDecompression: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryDecompressionFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMemoryDecompressionFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryDecompressionFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMemoryDecompressionFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryDecompressionFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryDecompressionFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryDecompressionFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryDecompressionFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memoryDecompression) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryDecompressionFeaturesNV),
            "::",
            stringify!(memoryDecompression)
        )
    );
}
impl Default for VkPhysicalDeviceMemoryDecompressionFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMemoryDecompressionPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub decompressionMethods: VkMemoryDecompressionMethodFlagsNV,
    pub maxDecompressionIndirectCount: u64,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMemoryDecompressionPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMemoryDecompressionPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMemoryDecompressionPropertiesNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMemoryDecompressionPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMemoryDecompressionPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMemoryDecompressionPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryDecompressionPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryDecompressionPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decompressionMethods) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryDecompressionPropertiesNV),
            "::",
            stringify!(decompressionMethods)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDecompressionIndirectCount) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMemoryDecompressionPropertiesNV),
            "::",
            stringify!(maxDecompressionIndirectCount)
        )
    );
}
impl Default for VkPhysicalDeviceMemoryDecompressionPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdDecompressMemoryNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        decompressRegionCount: u32,
        pDecompressMemoryRegions: *const VkDecompressMemoryRegionNV,
    ),
>;
pub type PFN_vkCmdDecompressMemoryIndirectCountNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        indirectCommandsAddress: VkDeviceAddress,
        indirectCommandsCountAddress: VkDeviceAddress,
        stride: u32,
    ),
>;
extern "system" {
    pub fn vkCmdDecompressMemoryNV(
        commandBuffer: VkCommandBuffer,
        decompressRegionCount: u32,
        pDecompressMemoryRegions: *const VkDecompressMemoryRegionNV,
    );
}
extern "system" {
    pub fn vkCmdDecompressMemoryIndirectCountNV(
        commandBuffer: VkCommandBuffer,
        indirectCommandsAddress: VkDeviceAddress,
        indirectCommandsCountAddress: VkDeviceAddress,
        stride: u32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub linearColorAttachment: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceLinearColorAttachmentFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceLinearColorAttachmentFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceLinearColorAttachmentFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceLinearColorAttachmentFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceLinearColorAttachmentFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceLinearColorAttachmentFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLinearColorAttachmentFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLinearColorAttachmentFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linearColorAttachment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLinearColorAttachmentFeaturesNV),
            "::",
            stringify!(linearColorAttachment)
        )
    );
}
impl Default for VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageCompressionControlSwapchain: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<
        VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).imageCompressionControlSwapchain) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT),
            "::",
            stringify!(imageCompressionControlSwapchain)
        )
    );
}
impl Default for VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkImageViewSampleWeightCreateInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub filterCenter: VkOffset2D,
    pub filterSize: VkExtent2D,
    pub numPhases: u32,
}
#[test]
fn bindgen_test_layout_VkImageViewSampleWeightCreateInfoQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkImageViewSampleWeightCreateInfoQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkImageViewSampleWeightCreateInfoQCOM>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkImageViewSampleWeightCreateInfoQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkImageViewSampleWeightCreateInfoQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkImageViewSampleWeightCreateInfoQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewSampleWeightCreateInfoQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewSampleWeightCreateInfoQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filterCenter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewSampleWeightCreateInfoQCOM),
            "::",
            stringify!(filterCenter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filterSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewSampleWeightCreateInfoQCOM),
            "::",
            stringify!(filterSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numPhases) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkImageViewSampleWeightCreateInfoQCOM),
            "::",
            stringify!(numPhases)
        )
    );
}
impl Default for VkImageViewSampleWeightCreateInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImageProcessingFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub textureSampleWeighted: VkBool32,
    pub textureBoxFilter: VkBool32,
    pub textureBlockMatch: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageProcessingFeaturesQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImageProcessingFeaturesQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageProcessingFeaturesQCOM>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageProcessingFeaturesQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageProcessingFeaturesQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageProcessingFeaturesQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingFeaturesQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingFeaturesQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureSampleWeighted) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingFeaturesQCOM),
            "::",
            stringify!(textureSampleWeighted)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureBoxFilter) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingFeaturesQCOM),
            "::",
            stringify!(textureBoxFilter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textureBlockMatch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingFeaturesQCOM),
            "::",
            stringify!(textureBlockMatch)
        )
    );
}
impl Default for VkPhysicalDeviceImageProcessingFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceImageProcessingPropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxWeightFilterPhases: u32,
    pub maxWeightFilterDimension: VkExtent2D,
    pub maxBlockMatchRegion: VkExtent2D,
    pub maxBoxFilterBlockSize: VkExtent2D,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceImageProcessingPropertiesQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceImageProcessingPropertiesQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceImageProcessingPropertiesQCOM>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceImageProcessingPropertiesQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceImageProcessingPropertiesQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceImageProcessingPropertiesQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingPropertiesQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingPropertiesQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxWeightFilterPhases) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingPropertiesQCOM),
            "::",
            stringify!(maxWeightFilterPhases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxWeightFilterDimension) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingPropertiesQCOM),
            "::",
            stringify!(maxWeightFilterDimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBlockMatchRegion) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingPropertiesQCOM),
            "::",
            stringify!(maxBlockMatchRegion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBoxFilterBlockSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceImageProcessingPropertiesQCOM),
            "::",
            stringify!(maxBoxFilterBlockSize)
        )
    );
}
impl Default for VkPhysicalDeviceImageProcessingPropertiesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub extendedDynamicState3TessellationDomainOrigin: VkBool32,
    pub extendedDynamicState3DepthClampEnable: VkBool32,
    pub extendedDynamicState3PolygonMode: VkBool32,
    pub extendedDynamicState3RasterizationSamples: VkBool32,
    pub extendedDynamicState3SampleMask: VkBool32,
    pub extendedDynamicState3AlphaToCoverageEnable: VkBool32,
    pub extendedDynamicState3AlphaToOneEnable: VkBool32,
    pub extendedDynamicState3LogicOpEnable: VkBool32,
    pub extendedDynamicState3ColorBlendEnable: VkBool32,
    pub extendedDynamicState3ColorBlendEquation: VkBool32,
    pub extendedDynamicState3ColorWriteMask: VkBool32,
    pub extendedDynamicState3RasterizationStream: VkBool32,
    pub extendedDynamicState3ConservativeRasterizationMode: VkBool32,
    pub extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32,
    pub extendedDynamicState3DepthClipEnable: VkBool32,
    pub extendedDynamicState3SampleLocationsEnable: VkBool32,
    pub extendedDynamicState3ColorBlendAdvanced: VkBool32,
    pub extendedDynamicState3ProvokingVertexMode: VkBool32,
    pub extendedDynamicState3LineRasterizationMode: VkBool32,
    pub extendedDynamicState3LineStippleEnable: VkBool32,
    pub extendedDynamicState3DepthClipNegativeOneToOne: VkBool32,
    pub extendedDynamicState3ViewportWScalingEnable: VkBool32,
    pub extendedDynamicState3ViewportSwizzle: VkBool32,
    pub extendedDynamicState3CoverageToColorEnable: VkBool32,
    pub extendedDynamicState3CoverageToColorLocation: VkBool32,
    pub extendedDynamicState3CoverageModulationMode: VkBool32,
    pub extendedDynamicState3CoverageModulationTableEnable: VkBool32,
    pub extendedDynamicState3CoverageModulationTable: VkBool32,
    pub extendedDynamicState3CoverageReductionMode: VkBool32,
    pub extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32,
    pub extendedDynamicState3ShadingRateImageEnable: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExtendedDynamicState3FeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT>(),
        144usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3TessellationDomainOrigin) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3TessellationDomainOrigin)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3DepthClampEnable) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3DepthClampEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3PolygonMode) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3PolygonMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3RasterizationSamples) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3RasterizationSamples)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3SampleMask) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3SampleMask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3AlphaToCoverageEnable) as usize
                - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3AlphaToCoverageEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3AlphaToOneEnable) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3AlphaToOneEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3LogicOpEnable) as usize - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3LogicOpEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3ColorBlendEnable) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3ColorBlendEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3ColorBlendEquation) as usize
                - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3ColorBlendEquation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3ColorWriteMask) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3ColorWriteMask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3RasterizationStream) as usize
                - ptr as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3RasterizationStream)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3ConservativeRasterizationMode) as usize
                - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3ConservativeRasterizationMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3ExtraPrimitiveOverestimationSize)
                as usize
                - ptr as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3ExtraPrimitiveOverestimationSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3DepthClipEnable) as usize
                - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3DepthClipEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3SampleLocationsEnable) as usize
                - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3SampleLocationsEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3ColorBlendAdvanced) as usize
                - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3ColorBlendAdvanced)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3ProvokingVertexMode) as usize
                - ptr as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3ProvokingVertexMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3LineRasterizationMode) as usize
                - ptr as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3LineRasterizationMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3LineStippleEnable) as usize
                - ptr as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3LineStippleEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3DepthClipNegativeOneToOne) as usize
                - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3DepthClipNegativeOneToOne)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3ViewportWScalingEnable) as usize
                - ptr as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3ViewportWScalingEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3ViewportSwizzle) as usize
                - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3ViewportSwizzle)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3CoverageToColorEnable) as usize
                - ptr as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3CoverageToColorEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3CoverageToColorLocation) as usize
                - ptr as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3CoverageToColorLocation)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3CoverageModulationMode) as usize
                - ptr as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3CoverageModulationMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3CoverageModulationTableEnable) as usize
                - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3CoverageModulationTableEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3CoverageModulationTable) as usize
                - ptr as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3CoverageModulationTable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3CoverageReductionMode) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3CoverageReductionMode)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3RepresentativeFragmentTestEnable)
                as usize
                - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3RepresentativeFragmentTestEnable)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).extendedDynamicState3ShadingRateImageEnable) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT),
            "::",
            stringify!(extendedDynamicState3ShadingRateImageEnable)
        )
    );
}
impl Default for VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub dynamicPrimitiveTopologyUnrestricted: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceExtendedDynamicState3PropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).dynamicPrimitiveTopologyUnrestricted) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceExtendedDynamicState3PropertiesEXT),
            "::",
            stringify!(dynamicPrimitiveTopologyUnrestricted)
        )
    );
}
impl Default for VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkColorBlendEquationEXT {
    pub srcColorBlendFactor: VkBlendFactor,
    pub dstColorBlendFactor: VkBlendFactor,
    pub colorBlendOp: VkBlendOp,
    pub srcAlphaBlendFactor: VkBlendFactor,
    pub dstAlphaBlendFactor: VkBlendFactor,
    pub alphaBlendOp: VkBlendOp,
}
#[test]
fn bindgen_test_layout_VkColorBlendEquationEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkColorBlendEquationEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkColorBlendEquationEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkColorBlendEquationEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkColorBlendEquationEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(VkColorBlendEquationEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcColorBlendFactor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendEquationEXT),
            "::",
            stringify!(srcColorBlendFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstColorBlendFactor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendEquationEXT),
            "::",
            stringify!(dstColorBlendFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorBlendOp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendEquationEXT),
            "::",
            stringify!(colorBlendOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAlphaBlendFactor) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendEquationEXT),
            "::",
            stringify!(srcAlphaBlendFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAlphaBlendFactor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendEquationEXT),
            "::",
            stringify!(dstAlphaBlendFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alphaBlendOp) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendEquationEXT),
            "::",
            stringify!(alphaBlendOp)
        )
    );
}
impl Default for VkColorBlendEquationEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkColorBlendAdvancedEXT {
    pub advancedBlendOp: VkBlendOp,
    pub srcPremultiplied: VkBool32,
    pub dstPremultiplied: VkBool32,
    pub blendOverlap: VkBlendOverlapEXT,
    pub clampResults: VkBool32,
}
#[test]
fn bindgen_test_layout_VkColorBlendAdvancedEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkColorBlendAdvancedEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkColorBlendAdvancedEXT>(),
        20usize,
        concat!("Size of: ", stringify!(VkColorBlendAdvancedEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkColorBlendAdvancedEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(VkColorBlendAdvancedEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advancedBlendOp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendAdvancedEXT),
            "::",
            stringify!(advancedBlendOp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcPremultiplied) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendAdvancedEXT),
            "::",
            stringify!(srcPremultiplied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstPremultiplied) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendAdvancedEXT),
            "::",
            stringify!(dstPremultiplied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blendOverlap) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendAdvancedEXT),
            "::",
            stringify!(blendOverlap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clampResults) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkColorBlendAdvancedEXT),
            "::",
            stringify!(clampResults)
        )
    );
}
impl Default for VkColorBlendAdvancedEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetTessellationDomainOriginEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, domainOrigin: VkTessellationDomainOrigin),
>;
pub type PFN_vkCmdSetDepthClampEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32),
>;
pub type PFN_vkCmdSetPolygonModeEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode),
>;
pub type PFN_vkCmdSetRasterizationSamplesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        rasterizationSamples: VkSampleCountFlagBits,
    ),
>;
pub type PFN_vkCmdSetSampleMaskEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        samples: VkSampleCountFlagBits,
        pSampleMask: *const VkSampleMask,
    ),
>;
pub type PFN_vkCmdSetAlphaToCoverageEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, alphaToCoverageEnable: VkBool32),
>;
pub type PFN_vkCmdSetAlphaToOneEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32),
>;
pub type PFN_vkCmdSetLogicOpEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32),
>;
pub type PFN_vkCmdSetColorBlendEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendEnables: *const VkBool32,
    ),
>;
pub type PFN_vkCmdSetColorBlendEquationEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendEquations: *const VkColorBlendEquationEXT,
    ),
>;
pub type PFN_vkCmdSetColorWriteMaskEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorWriteMasks: *const VkColorComponentFlags,
    ),
>;
pub type PFN_vkCmdSetRasterizationStreamEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, rasterizationStream: u32),
>;
pub type PFN_vkCmdSetConservativeRasterizationModeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    ),
>;
pub type PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, extraPrimitiveOverestimationSize: f32),
>;
pub type PFN_vkCmdSetDepthClipEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32),
>;
pub type PFN_vkCmdSetSampleLocationsEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, sampleLocationsEnable: VkBool32),
>;
pub type PFN_vkCmdSetColorBlendAdvancedEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendAdvanced: *const VkColorBlendAdvancedEXT,
    ),
>;
pub type PFN_vkCmdSetProvokingVertexModeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        provokingVertexMode: VkProvokingVertexModeEXT,
    ),
>;
pub type PFN_vkCmdSetLineRasterizationModeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        lineRasterizationMode: VkLineRasterizationModeEXT,
    ),
>;
pub type PFN_vkCmdSetLineStippleEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, stippledLineEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthClipNegativeOneToOneEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, negativeOneToOne: VkBool32),
>;
pub type PFN_vkCmdSetViewportWScalingEnableNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, viewportWScalingEnable: VkBool32),
>;
pub type PFN_vkCmdSetViewportSwizzleNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportSwizzles: *const VkViewportSwizzleNV,
    ),
>;
pub type PFN_vkCmdSetCoverageToColorEnableNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, coverageToColorEnable: VkBool32),
>;
pub type PFN_vkCmdSetCoverageToColorLocationNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, coverageToColorLocation: u32),
>;
pub type PFN_vkCmdSetCoverageModulationModeNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        coverageModulationMode: VkCoverageModulationModeNV,
    ),
>;
pub type PFN_vkCmdSetCoverageModulationTableEnableNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, coverageModulationTableEnable: VkBool32),
>;
pub type PFN_vkCmdSetCoverageModulationTableNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        coverageModulationTableCount: u32,
        pCoverageModulationTable: *const f32,
    ),
>;
pub type PFN_vkCmdSetShadingRateImageEnableNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, shadingRateImageEnable: VkBool32),
>;
pub type PFN_vkCmdSetRepresentativeFragmentTestEnableNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        representativeFragmentTestEnable: VkBool32,
    ),
>;
pub type PFN_vkCmdSetCoverageReductionModeNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        coverageReductionMode: VkCoverageReductionModeNV,
    ),
>;
extern "system" {
    pub fn vkCmdSetTessellationDomainOriginEXT(
        commandBuffer: VkCommandBuffer,
        domainOrigin: VkTessellationDomainOrigin,
    );
}
extern "system" {
    pub fn vkCmdSetDepthClampEnableEXT(commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetPolygonModeEXT(commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode);
}
extern "system" {
    pub fn vkCmdSetRasterizationSamplesEXT(
        commandBuffer: VkCommandBuffer,
        rasterizationSamples: VkSampleCountFlagBits,
    );
}
extern "system" {
    pub fn vkCmdSetSampleMaskEXT(
        commandBuffer: VkCommandBuffer,
        samples: VkSampleCountFlagBits,
        pSampleMask: *const VkSampleMask,
    );
}
extern "system" {
    pub fn vkCmdSetAlphaToCoverageEnableEXT(
        commandBuffer: VkCommandBuffer,
        alphaToCoverageEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetAlphaToOneEnableEXT(commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetLogicOpEnableEXT(commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetColorBlendEnableEXT(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendEnables: *const VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetColorBlendEquationEXT(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendEquations: *const VkColorBlendEquationEXT,
    );
}
extern "system" {
    pub fn vkCmdSetColorWriteMaskEXT(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorWriteMasks: *const VkColorComponentFlags,
    );
}
extern "system" {
    pub fn vkCmdSetRasterizationStreamEXT(commandBuffer: VkCommandBuffer, rasterizationStream: u32);
}
extern "system" {
    pub fn vkCmdSetConservativeRasterizationModeEXT(
        commandBuffer: VkCommandBuffer,
        conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    );
}
extern "system" {
    pub fn vkCmdSetExtraPrimitiveOverestimationSizeEXT(
        commandBuffer: VkCommandBuffer,
        extraPrimitiveOverestimationSize: f32,
    );
}
extern "system" {
    pub fn vkCmdSetDepthClipEnableEXT(commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32);
}
extern "system" {
    pub fn vkCmdSetSampleLocationsEnableEXT(
        commandBuffer: VkCommandBuffer,
        sampleLocationsEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetColorBlendAdvancedEXT(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendAdvanced: *const VkColorBlendAdvancedEXT,
    );
}
extern "system" {
    pub fn vkCmdSetProvokingVertexModeEXT(
        commandBuffer: VkCommandBuffer,
        provokingVertexMode: VkProvokingVertexModeEXT,
    );
}
extern "system" {
    pub fn vkCmdSetLineRasterizationModeEXT(
        commandBuffer: VkCommandBuffer,
        lineRasterizationMode: VkLineRasterizationModeEXT,
    );
}
extern "system" {
    pub fn vkCmdSetLineStippleEnableEXT(
        commandBuffer: VkCommandBuffer,
        stippledLineEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetDepthClipNegativeOneToOneEXT(
        commandBuffer: VkCommandBuffer,
        negativeOneToOne: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetViewportWScalingEnableNV(
        commandBuffer: VkCommandBuffer,
        viewportWScalingEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetViewportSwizzleNV(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportSwizzles: *const VkViewportSwizzleNV,
    );
}
extern "system" {
    pub fn vkCmdSetCoverageToColorEnableNV(
        commandBuffer: VkCommandBuffer,
        coverageToColorEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetCoverageToColorLocationNV(
        commandBuffer: VkCommandBuffer,
        coverageToColorLocation: u32,
    );
}
extern "system" {
    pub fn vkCmdSetCoverageModulationModeNV(
        commandBuffer: VkCommandBuffer,
        coverageModulationMode: VkCoverageModulationModeNV,
    );
}
extern "system" {
    pub fn vkCmdSetCoverageModulationTableEnableNV(
        commandBuffer: VkCommandBuffer,
        coverageModulationTableEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetCoverageModulationTableNV(
        commandBuffer: VkCommandBuffer,
        coverageModulationTableCount: u32,
        pCoverageModulationTable: *const f32,
    );
}
extern "system" {
    pub fn vkCmdSetShadingRateImageEnableNV(
        commandBuffer: VkCommandBuffer,
        shadingRateImageEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetRepresentativeFragmentTestEnableNV(
        commandBuffer: VkCommandBuffer,
        representativeFragmentTestEnable: VkBool32,
    );
}
extern "system" {
    pub fn vkCmdSetCoverageReductionModeNV(
        commandBuffer: VkCommandBuffer,
        coverageReductionMode: VkCoverageReductionModeNV,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkSubpassMergeStatusEXT {
    VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0,
    VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12,
    VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13,
    VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subpassMergeFeedback: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpassMergeFeedback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT),
            "::",
            stringify!(subpassMergeFeedback)
        )
    );
}
impl Default for VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassCreationControlEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub disallowMerging: VkBool32,
}
#[test]
fn bindgen_test_layout_VkRenderPassCreationControlEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassCreationControlEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassCreationControlEXT>(),
        24usize,
        concat!("Size of: ", stringify!(VkRenderPassCreationControlEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassCreationControlEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkRenderPassCreationControlEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreationControlEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreationControlEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disallowMerging) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreationControlEXT),
            "::",
            stringify!(disallowMerging)
        )
    );
}
impl Default for VkRenderPassCreationControlEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassCreationFeedbackInfoEXT {
    pub postMergeSubpassCount: u32,
}
#[test]
fn bindgen_test_layout_VkRenderPassCreationFeedbackInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassCreationFeedbackInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassCreationFeedbackInfoEXT>(),
        4usize,
        concat!("Size of: ", stringify!(VkRenderPassCreationFeedbackInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassCreationFeedbackInfoEXT>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassCreationFeedbackInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).postMergeSubpassCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreationFeedbackInfoEXT),
            "::",
            stringify!(postMergeSubpassCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassCreationFeedbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pRenderPassFeedback: *mut VkRenderPassCreationFeedbackInfoEXT,
}
#[test]
fn bindgen_test_layout_VkRenderPassCreationFeedbackCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassCreationFeedbackCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassCreationFeedbackCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkRenderPassCreationFeedbackCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassCreationFeedbackCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassCreationFeedbackCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreationFeedbackCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreationFeedbackCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRenderPassFeedback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassCreationFeedbackCreateInfoEXT),
            "::",
            stringify!(pRenderPassFeedback)
        )
    );
}
impl Default for VkRenderPassCreationFeedbackCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassSubpassFeedbackInfoEXT {
    pub subpassMergeStatus: VkSubpassMergeStatusEXT,
    pub description: [::std::os::raw::c_char; 256usize],
    pub postMergeIndex: u32,
}
#[test]
fn bindgen_test_layout_VkRenderPassSubpassFeedbackInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassSubpassFeedbackInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassSubpassFeedbackInfoEXT>(),
        264usize,
        concat!("Size of: ", stringify!(VkRenderPassSubpassFeedbackInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassSubpassFeedbackInfoEXT>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassSubpassFeedbackInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subpassMergeStatus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSubpassFeedbackInfoEXT),
            "::",
            stringify!(subpassMergeStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSubpassFeedbackInfoEXT),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).postMergeIndex) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSubpassFeedbackInfoEXT),
            "::",
            stringify!(postMergeIndex)
        )
    );
}
impl Default for VkRenderPassSubpassFeedbackInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRenderPassSubpassFeedbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pSubpassFeedback: *mut VkRenderPassSubpassFeedbackInfoEXT,
}
#[test]
fn bindgen_test_layout_VkRenderPassSubpassFeedbackCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkRenderPassSubpassFeedbackCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRenderPassSubpassFeedbackCreateInfoEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkRenderPassSubpassFeedbackCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRenderPassSubpassFeedbackCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRenderPassSubpassFeedbackCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSubpassFeedbackCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSubpassFeedbackCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSubpassFeedback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRenderPassSubpassFeedbackCreateInfoEXT),
            "::",
            stringify!(pSubpassFeedback)
        )
    );
}
impl Default for VkRenderPassSubpassFeedbackCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkDirectDriverLoadingModeLUNARG {
    VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0,
    VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1,
    VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG = 2147483647,
}
pub type VkDirectDriverLoadingFlagsLUNARG = VkFlags;
pub type PFN_vkGetInstanceProcAddrLUNARG = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDirectDriverLoadingInfoLUNARG {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkDirectDriverLoadingFlagsLUNARG,
    pub pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG,
}
#[test]
fn bindgen_test_layout_VkDirectDriverLoadingInfoLUNARG() {
    const UNINIT: ::std::mem::MaybeUninit<VkDirectDriverLoadingInfoLUNARG> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDirectDriverLoadingInfoLUNARG>(),
        32usize,
        concat!("Size of: ", stringify!(VkDirectDriverLoadingInfoLUNARG))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDirectDriverLoadingInfoLUNARG>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDirectDriverLoadingInfoLUNARG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDirectDriverLoadingInfoLUNARG),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDirectDriverLoadingInfoLUNARG),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDirectDriverLoadingInfoLUNARG),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetInstanceProcAddr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDirectDriverLoadingInfoLUNARG),
            "::",
            stringify!(pfnGetInstanceProcAddr)
        )
    );
}
impl Default for VkDirectDriverLoadingInfoLUNARG {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDirectDriverLoadingListLUNARG {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub mode: VkDirectDriverLoadingModeLUNARG,
    pub driverCount: u32,
    pub pDrivers: *const VkDirectDriverLoadingInfoLUNARG,
}
#[test]
fn bindgen_test_layout_VkDirectDriverLoadingListLUNARG() {
    const UNINIT: ::std::mem::MaybeUninit<VkDirectDriverLoadingListLUNARG> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDirectDriverLoadingListLUNARG>(),
        32usize,
        concat!("Size of: ", stringify!(VkDirectDriverLoadingListLUNARG))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDirectDriverLoadingListLUNARG>(),
        8usize,
        concat!("Alignment of ", stringify!(VkDirectDriverLoadingListLUNARG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDirectDriverLoadingListLUNARG),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDirectDriverLoadingListLUNARG),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDirectDriverLoadingListLUNARG),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDirectDriverLoadingListLUNARG),
            "::",
            stringify!(driverCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDrivers) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDirectDriverLoadingListLUNARG),
            "::",
            stringify!(pDrivers)
        )
    );
}
impl Default for VkDirectDriverLoadingListLUNARG {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderModuleIdentifier: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderModuleIdentifier) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT),
            "::",
            stringify!(shaderModuleIdentifier)
        )
    );
}
impl Default for VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderModuleIdentifierAlgorithmUUID: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderModuleIdentifierAlgorithmUUID) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT),
            "::",
            stringify!(shaderModuleIdentifierAlgorithmUUID)
        )
    );
}
impl Default for VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub identifierSize: u32,
    pub pIdentifier: *const u8,
}
#[test]
fn bindgen_test_layout_VkPipelineShaderStageModuleIdentifierCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPipelineShaderStageModuleIdentifierCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPipelineShaderStageModuleIdentifierCreateInfoEXT>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPipelineShaderStageModuleIdentifierCreateInfoEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPipelineShaderStageModuleIdentifierCreateInfoEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPipelineShaderStageModuleIdentifierCreateInfoEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageModuleIdentifierCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageModuleIdentifierCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifierSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageModuleIdentifierCreateInfoEXT),
            "::",
            stringify!(identifierSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pIdentifier) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPipelineShaderStageModuleIdentifierCreateInfoEXT),
            "::",
            stringify!(pIdentifier)
        )
    );
}
impl Default for VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkShaderModuleIdentifierEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub identifierSize: u32,
    pub identifier: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_VkShaderModuleIdentifierEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkShaderModuleIdentifierEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkShaderModuleIdentifierEXT>(),
        56usize,
        concat!("Size of: ", stringify!(VkShaderModuleIdentifierEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkShaderModuleIdentifierEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkShaderModuleIdentifierEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleIdentifierEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleIdentifierEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifierSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleIdentifierEXT),
            "::",
            stringify!(identifierSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).identifier) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderModuleIdentifierEXT),
            "::",
            stringify!(identifier)
        )
    );
}
impl Default for VkShaderModuleIdentifierEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetShaderModuleIdentifierEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pIdentifier: *mut VkShaderModuleIdentifierEXT,
    ),
>;
pub type PFN_vkGetShaderModuleCreateInfoIdentifierEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pIdentifier: *mut VkShaderModuleIdentifierEXT,
    ),
>;
extern "system" {
    pub fn vkGetShaderModuleIdentifierEXT(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pIdentifier: *mut VkShaderModuleIdentifierEXT,
    );
}
extern "system" {
    pub fn vkGetShaderModuleCreateInfoIdentifierEXT(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pIdentifier: *mut VkShaderModuleIdentifierEXT,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkOpticalFlowSessionNV_T {
    _unused: [u8; 0],
}
pub type VkOpticalFlowSessionNV = *mut VkOpticalFlowSessionNV_T;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkOpticalFlowPerformanceLevelNV {
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3,
    VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkOpticalFlowSessionBindingPointNV {
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8,
    VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkOpticalFlowGridSizeFlagBitsNV {
    VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0,
    VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV = 1,
    VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV = 2,
    VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV = 4,
    VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV = 8,
    VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
}
pub type VkOpticalFlowGridSizeFlagsNV = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkOpticalFlowUsageFlagBitsNV {
    VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0,
    VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV = 1,
    VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV = 2,
    VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV = 4,
    VK_OPTICAL_FLOW_USAGE_COST_BIT_NV = 8,
    VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV = 16,
    VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
}
pub type VkOpticalFlowUsageFlagsNV = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkOpticalFlowSessionCreateFlagBitsNV {
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV = 1,
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV = 2,
    VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV = 4,
    VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV = 8,
    VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV = 16,
    VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
}
pub type VkOpticalFlowSessionCreateFlagsNV = VkFlags;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkOpticalFlowExecuteFlagBitsNV {
    VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV = 1,
    VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV = 2147483647,
}
pub type VkOpticalFlowExecuteFlagsNV = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceOpticalFlowFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub opticalFlow: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceOpticalFlowFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceOpticalFlowFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceOpticalFlowFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceOpticalFlowFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceOpticalFlowFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceOpticalFlowFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opticalFlow) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowFeaturesNV),
            "::",
            stringify!(opticalFlow)
        )
    );
}
impl Default for VkPhysicalDeviceOpticalFlowFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceOpticalFlowPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV,
    pub supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV,
    pub hintSupported: VkBool32,
    pub costSupported: VkBool32,
    pub bidirectionalFlowSupported: VkBool32,
    pub globalFlowSupported: VkBool32,
    pub minWidth: u32,
    pub minHeight: u32,
    pub maxWidth: u32,
    pub maxHeight: u32,
    pub maxNumRegionsOfInterest: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceOpticalFlowPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceOpticalFlowPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceOpticalFlowPropertiesNV>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceOpticalFlowPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedOutputGridSizes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(supportedOutputGridSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportedHintGridSizes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(supportedHintGridSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hintSupported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(hintSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).costSupported) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(costSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bidirectionalFlowSupported) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(bidirectionalFlowSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalFlowSupported) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(globalFlowSupported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minWidth) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(minWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minHeight) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(minHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxWidth) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(maxWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxHeight) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(maxHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxNumRegionsOfInterest) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceOpticalFlowPropertiesNV),
            "::",
            stringify!(maxNumRegionsOfInterest)
        )
    );
}
impl Default for VkPhysicalDeviceOpticalFlowPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkOpticalFlowImageFormatInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub usage: VkOpticalFlowUsageFlagsNV,
}
#[test]
fn bindgen_test_layout_VkOpticalFlowImageFormatInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkOpticalFlowImageFormatInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkOpticalFlowImageFormatInfoNV>(),
        24usize,
        concat!("Size of: ", stringify!(VkOpticalFlowImageFormatInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkOpticalFlowImageFormatInfoNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkOpticalFlowImageFormatInfoNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowImageFormatInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowImageFormatInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowImageFormatInfoNV),
            "::",
            stringify!(usage)
        )
    );
}
impl Default for VkOpticalFlowImageFormatInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkOpticalFlowImageFormatPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
}
#[test]
fn bindgen_test_layout_VkOpticalFlowImageFormatPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkOpticalFlowImageFormatPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkOpticalFlowImageFormatPropertiesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkOpticalFlowImageFormatPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkOpticalFlowImageFormatPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkOpticalFlowImageFormatPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowImageFormatPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowImageFormatPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowImageFormatPropertiesNV),
            "::",
            stringify!(format)
        )
    );
}
impl Default for VkOpticalFlowImageFormatPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkOpticalFlowSessionCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub width: u32,
    pub height: u32,
    pub imageFormat: VkFormat,
    pub flowVectorFormat: VkFormat,
    pub costFormat: VkFormat,
    pub outputGridSize: VkOpticalFlowGridSizeFlagsNV,
    pub hintGridSize: VkOpticalFlowGridSizeFlagsNV,
    pub performanceLevel: VkOpticalFlowPerformanceLevelNV,
    pub flags: VkOpticalFlowSessionCreateFlagsNV,
}
#[test]
fn bindgen_test_layout_VkOpticalFlowSessionCreateInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkOpticalFlowSessionCreateInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkOpticalFlowSessionCreateInfoNV>(),
        56usize,
        concat!("Size of: ", stringify!(VkOpticalFlowSessionCreateInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkOpticalFlowSessionCreateInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkOpticalFlowSessionCreateInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageFormat) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(imageFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flowVectorFormat) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(flowVectorFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).costFormat) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(costFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputGridSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(outputGridSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hintGridSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(hintGridSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).performanceLevel) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(performanceLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreateInfoNV),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkOpticalFlowSessionCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkOpticalFlowSessionCreatePrivateDataInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub id: u32,
    pub size: u32,
    pub pPrivateData: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkOpticalFlowSessionCreatePrivateDataInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkOpticalFlowSessionCreatePrivateDataInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkOpticalFlowSessionCreatePrivateDataInfoNV>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkOpticalFlowSessionCreatePrivateDataInfoNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkOpticalFlowSessionCreatePrivateDataInfoNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkOpticalFlowSessionCreatePrivateDataInfoNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreatePrivateDataInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreatePrivateDataInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreatePrivateDataInfoNV),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreatePrivateDataInfoNV),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPrivateData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowSessionCreatePrivateDataInfoNV),
            "::",
            stringify!(pPrivateData)
        )
    );
}
impl Default for VkOpticalFlowSessionCreatePrivateDataInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkOpticalFlowExecuteInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkOpticalFlowExecuteFlagsNV,
    pub regionCount: u32,
    pub pRegions: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkOpticalFlowExecuteInfoNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkOpticalFlowExecuteInfoNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkOpticalFlowExecuteInfoNV>(),
        32usize,
        concat!("Size of: ", stringify!(VkOpticalFlowExecuteInfoNV))
    );
    assert_eq!(
        ::std::mem::align_of::<VkOpticalFlowExecuteInfoNV>(),
        8usize,
        concat!("Alignment of ", stringify!(VkOpticalFlowExecuteInfoNV))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowExecuteInfoNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowExecuteInfoNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowExecuteInfoNV),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regionCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowExecuteInfoNV),
            "::",
            stringify!(regionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pRegions) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkOpticalFlowExecuteInfoNV),
            "::",
            stringify!(pRegions)
        )
    );
}
impl Default for VkOpticalFlowExecuteInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pOpticalFlowImageFormatInfo: *const VkOpticalFlowImageFormatInfoNV,
        pFormatCount: *mut u32,
        pImageFormatProperties: *mut VkOpticalFlowImageFormatPropertiesNV,
    ) -> VkResult,
>;
pub type PFN_vkCreateOpticalFlowSessionNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkOpticalFlowSessionCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pSession: *mut VkOpticalFlowSessionNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyOpticalFlowSessionNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        session: VkOpticalFlowSessionNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkBindOpticalFlowSessionImageNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        session: VkOpticalFlowSessionNV,
        bindingPoint: VkOpticalFlowSessionBindingPointNV,
        view: VkImageView,
        layout: VkImageLayout,
    ) -> VkResult,
>;
pub type PFN_vkCmdOpticalFlowExecuteNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        session: VkOpticalFlowSessionNV,
        pExecuteInfo: *const VkOpticalFlowExecuteInfoNV,
    ),
>;
extern "system" {
    pub fn vkGetPhysicalDeviceOpticalFlowImageFormatsNV(
        physicalDevice: VkPhysicalDevice,
        pOpticalFlowImageFormatInfo: *const VkOpticalFlowImageFormatInfoNV,
        pFormatCount: *mut u32,
        pImageFormatProperties: *mut VkOpticalFlowImageFormatPropertiesNV,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCreateOpticalFlowSessionNV(
        device: VkDevice,
        pCreateInfo: *const VkOpticalFlowSessionCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pSession: *mut VkOpticalFlowSessionNV,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyOpticalFlowSessionNV(
        device: VkDevice,
        session: VkOpticalFlowSessionNV,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkBindOpticalFlowSessionImageNV(
        device: VkDevice,
        session: VkOpticalFlowSessionNV,
        bindingPoint: VkOpticalFlowSessionBindingPointNV,
        view: VkImageView,
        layout: VkImageLayout,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdOpticalFlowExecuteNV(
        commandBuffer: VkCommandBuffer,
        session: VkOpticalFlowSessionNV,
        pExecuteInfo: *const VkOpticalFlowExecuteInfoNV,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceLegacyDitheringFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub legacyDithering: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceLegacyDitheringFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceLegacyDitheringFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceLegacyDitheringFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceLegacyDitheringFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceLegacyDitheringFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceLegacyDitheringFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLegacyDitheringFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLegacyDitheringFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).legacyDithering) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceLegacyDitheringFeaturesEXT),
            "::",
            stringify!(legacyDithering)
        )
    );
}
impl Default for VkPhysicalDeviceLegacyDitheringFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineProtectedAccess: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePipelineProtectedAccessFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePipelineProtectedAccessFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePipelineProtectedAccessFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePipelineProtectedAccessFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineProtectedAccess) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineProtectedAccessFeaturesEXT),
            "::",
            stringify!(pipelineProtectedAccess)
        )
    );
}
impl Default for VkPhysicalDevicePipelineProtectedAccessFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkShaderEXT_T {
    _unused: [u8; 0],
}
pub type VkShaderEXT = *mut VkShaderEXT_T;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkShaderCodeTypeEXT {
    VK_SHADER_CODE_TYPE_BINARY_EXT = 0,
    VK_SHADER_CODE_TYPE_SPIRV_EXT = 1,
    VK_SHADER_CODE_TYPE_MAX_ENUM_EXT = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkShaderCreateFlagBitsEXT {
    VK_SHADER_CREATE_LINK_STAGE_BIT_EXT = 1,
    VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 2,
    VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 4,
    VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT = 8,
    VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT = 16,
    VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT = 32,
    VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 64,
    VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647,
}
pub type VkShaderCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderObjectFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderObject: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderObjectFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderObjectFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderObjectFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderObjectFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderObjectFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderObjectFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderObjectFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderObjectFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderObject) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderObjectFeaturesEXT),
            "::",
            stringify!(shaderObject)
        )
    );
}
impl Default for VkPhysicalDeviceShaderObjectFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderObjectPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderBinaryUUID: [u8; 16usize],
    pub shaderBinaryVersion: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderObjectPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderObjectPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderObjectPropertiesEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderObjectPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderObjectPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderObjectPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderObjectPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderObjectPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderBinaryUUID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderObjectPropertiesEXT),
            "::",
            stringify!(shaderBinaryUUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderBinaryVersion) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderObjectPropertiesEXT),
            "::",
            stringify!(shaderBinaryVersion)
        )
    );
}
impl Default for VkPhysicalDeviceShaderObjectPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkShaderCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkShaderCreateFlagsEXT,
    pub stage: VkShaderStageFlagBits,
    pub nextStage: VkShaderStageFlags,
    pub codeType: VkShaderCodeTypeEXT,
    pub codeSize: usize,
    pub pCode: *const ::std::os::raw::c_void,
    pub pName: *const ::std::os::raw::c_char,
    pub setLayoutCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
    pub pushConstantRangeCount: u32,
    pub pPushConstantRanges: *const VkPushConstantRange,
    pub pSpecializationInfo: *const VkSpecializationInfo,
}
#[test]
fn bindgen_test_layout_VkShaderCreateInfoEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkShaderCreateInfoEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkShaderCreateInfoEXT>(),
        96usize,
        concat!("Size of: ", stringify!(VkShaderCreateInfoEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkShaderCreateInfoEXT>(),
        8usize,
        concat!("Alignment of ", stringify!(VkShaderCreateInfoEXT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stage) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextStage) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(nextStage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codeType) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(codeType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codeSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(codeSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pCode) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(pCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pName) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(pName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setLayoutCount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(setLayoutCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSetLayouts) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(pSetLayouts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pushConstantRangeCount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(pushConstantRangeCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPushConstantRanges) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(pPushConstantRanges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pSpecializationInfo) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkShaderCreateInfoEXT),
            "::",
            stringify!(pSpecializationInfo)
        )
    );
}
impl Default for VkShaderCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkShaderRequiredSubgroupSizeCreateInfoEXT =
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub type PFN_vkCreateShadersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        createInfoCount: u32,
        pCreateInfos: *const VkShaderCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pShaders: *mut VkShaderEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyShaderEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        shader: VkShaderEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetShaderBinaryDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        shader: VkShaderEXT,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdBindShadersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        stageCount: u32,
        pStages: *const VkShaderStageFlagBits,
        pShaders: *const VkShaderEXT,
    ),
>;
extern "system" {
    pub fn vkCreateShadersEXT(
        device: VkDevice,
        createInfoCount: u32,
        pCreateInfos: *const VkShaderCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pShaders: *mut VkShaderEXT,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyShaderEXT(
        device: VkDevice,
        shader: VkShaderEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkGetShaderBinaryDataEXT(
        device: VkDevice,
        shader: VkShaderEXT,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdBindShadersEXT(
        commandBuffer: VkCommandBuffer,
        stageCount: u32,
        pStages: *const VkShaderStageFlagBits,
        pShaders: *const VkShaderEXT,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceTilePropertiesFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub tileProperties: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceTilePropertiesFeaturesQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceTilePropertiesFeaturesQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceTilePropertiesFeaturesQCOM>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceTilePropertiesFeaturesQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceTilePropertiesFeaturesQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceTilePropertiesFeaturesQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTilePropertiesFeaturesQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTilePropertiesFeaturesQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tileProperties) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceTilePropertiesFeaturesQCOM),
            "::",
            stringify!(tileProperties)
        )
    );
}
impl Default for VkPhysicalDeviceTilePropertiesFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkTilePropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub tileSize: VkExtent3D,
    pub apronSize: VkExtent2D,
    pub origin: VkOffset2D,
}
#[test]
fn bindgen_test_layout_VkTilePropertiesQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkTilePropertiesQCOM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkTilePropertiesQCOM>(),
        48usize,
        concat!("Size of: ", stringify!(VkTilePropertiesQCOM))
    );
    assert_eq!(
        ::std::mem::align_of::<VkTilePropertiesQCOM>(),
        8usize,
        concat!("Alignment of ", stringify!(VkTilePropertiesQCOM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTilePropertiesQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTilePropertiesQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tileSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTilePropertiesQCOM),
            "::",
            stringify!(tileSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apronSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTilePropertiesQCOM),
            "::",
            stringify!(apronSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).origin) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTilePropertiesQCOM),
            "::",
            stringify!(origin)
        )
    );
}
impl Default for VkTilePropertiesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetFramebufferTilePropertiesQCOM = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pPropertiesCount: *mut u32,
        pProperties: *mut VkTilePropertiesQCOM,
    ) -> VkResult,
>;
pub type PFN_vkGetDynamicRenderingTilePropertiesQCOM = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pRenderingInfo: *const VkRenderingInfo,
        pProperties: *mut VkTilePropertiesQCOM,
    ) -> VkResult,
>;
extern "system" {
    pub fn vkGetFramebufferTilePropertiesQCOM(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pPropertiesCount: *mut u32,
        pProperties: *mut VkTilePropertiesQCOM,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetDynamicRenderingTilePropertiesQCOM(
        device: VkDevice,
        pRenderingInfo: *const VkRenderingInfo,
        pProperties: *mut VkTilePropertiesQCOM,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceAmigoProfilingFeaturesSEC {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub amigoProfiling: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceAmigoProfilingFeaturesSEC() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceAmigoProfilingFeaturesSEC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceAmigoProfilingFeaturesSEC>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceAmigoProfilingFeaturesSEC)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceAmigoProfilingFeaturesSEC>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceAmigoProfilingFeaturesSEC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAmigoProfilingFeaturesSEC),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAmigoProfilingFeaturesSEC),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amigoProfiling) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAmigoProfilingFeaturesSEC),
            "::",
            stringify!(amigoProfiling)
        )
    );
}
impl Default for VkPhysicalDeviceAmigoProfilingFeaturesSEC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAmigoProfilingSubmitInfoSEC {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub firstDrawTimestamp: u64,
    pub swapBufferTimestamp: u64,
}
#[test]
fn bindgen_test_layout_VkAmigoProfilingSubmitInfoSEC() {
    const UNINIT: ::std::mem::MaybeUninit<VkAmigoProfilingSubmitInfoSEC> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAmigoProfilingSubmitInfoSEC>(),
        32usize,
        concat!("Size of: ", stringify!(VkAmigoProfilingSubmitInfoSEC))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAmigoProfilingSubmitInfoSEC>(),
        8usize,
        concat!("Alignment of ", stringify!(VkAmigoProfilingSubmitInfoSEC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAmigoProfilingSubmitInfoSEC),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAmigoProfilingSubmitInfoSEC),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstDrawTimestamp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAmigoProfilingSubmitInfoSEC),
            "::",
            stringify!(firstDrawTimestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapBufferTimestamp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAmigoProfilingSubmitInfoSEC),
            "::",
            stringify!(swapBufferTimestamp)
        )
    );
}
impl Default for VkAmigoProfilingSubmitInfoSEC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multiviewPerViewViewports: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiviewPerViewViewports) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM),
            "::",
            stringify!(multiviewPerViewViewports)
        )
    );
}
impl Default for VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkRayTracingInvocationReorderModeNV {
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0,
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1,
    VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingInvocationReorderReorderingHint: VkRayTracingInvocationReorderModeNV,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rayTracingInvocationReorderReorderingHint) as usize
                - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV),
            "::",
            stringify!(rayTracingInvocationReorderReorderingHint)
        )
    );
}
impl Default for VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingInvocationReorder: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rayTracingInvocationReorder) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV),
            "::",
            stringify!(rayTracingInvocationReorder)
        )
    );
}
impl Default for VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderCoreBuiltins: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderCoreBuiltins) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM),
            "::",
            stringify!(shaderCoreBuiltins)
        )
    );
}
impl Default for VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderCoreMask: u64,
    pub shaderCoreCount: u32,
    pub shaderWarpsPerCore: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderCoreMask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM),
            "::",
            stringify!(shaderCoreMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderCoreCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM),
            "::",
            stringify!(shaderCoreCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderWarpsPerCore) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM),
            "::",
            stringify!(shaderWarpsPerCore)
        )
    );
}
impl Default for VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineLibraryGroupHandles: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pipelineLibraryGroupHandles) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT),
            "::",
            stringify!(pipelineLibraryGroupHandles)
        )
    );
}
impl Default for VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multiviewPerViewRenderAreas: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiviewPerViewRenderAreas) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM),
            "::",
            stringify!(multiviewPerViewRenderAreas)
        )
    );
}
impl Default for VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub perViewRenderAreaCount: u32,
    pub pPerViewRenderAreas: *const VkRect2D,
}
#[test]
fn bindgen_test_layout_VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM() {
    const UNINIT: ::std::mem::MaybeUninit<VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perViewRenderAreaCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM),
            "::",
            stringify!(perViewRenderAreaCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pPerViewRenderAreas) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM),
            "::",
            stringify!(pPerViewRenderAreas)
        )
    );
}
impl Default for VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkBuildAccelerationStructureModeKHR {
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0,
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1,
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkAccelerationStructureCreateFlagBitsKHR {
    VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1,
    VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8,
    VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4,
    VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647,
}
pub type VkAccelerationStructureCreateFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAccelerationStructureBuildRangeInfoKHR {
    pub primitiveCount: u32,
    pub primitiveOffset: u32,
    pub firstVertex: u32,
    pub transformOffset: u32,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureBuildRangeInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureBuildRangeInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureBuildRangeInfoKHR>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureBuildRangeInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureBuildRangeInfoKHR>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureBuildRangeInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitiveCount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildRangeInfoKHR),
            "::",
            stringify!(primitiveCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitiveOffset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildRangeInfoKHR),
            "::",
            stringify!(primitiveOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).firstVertex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildRangeInfoKHR),
            "::",
            stringify!(firstVertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformOffset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildRangeInfoKHR),
            "::",
            stringify!(transformOffset)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryTrianglesDataKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexFormat: VkFormat,
    pub vertexData: VkDeviceOrHostAddressConstKHR,
    pub vertexStride: VkDeviceSize,
    pub maxVertex: u32,
    pub indexType: VkIndexType,
    pub indexData: VkDeviceOrHostAddressConstKHR,
    pub transformData: VkDeviceOrHostAddressConstKHR,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureGeometryTrianglesDataKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureGeometryTrianglesDataKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureGeometryTrianglesDataKHR>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureGeometryTrianglesDataKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexFormat) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR),
            "::",
            stringify!(vertexFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexData) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR),
            "::",
            stringify!(vertexData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexStride) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR),
            "::",
            stringify!(vertexStride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVertex) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR),
            "::",
            stringify!(maxVertex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexType) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR),
            "::",
            stringify!(indexType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexData) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR),
            "::",
            stringify!(indexData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transformData) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryTrianglesDataKHR),
            "::",
            stringify!(transformData)
        )
    );
}
impl Default for VkAccelerationStructureGeometryTrianglesDataKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryAabbsDataKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub data: VkDeviceOrHostAddressConstKHR,
    pub stride: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureGeometryAabbsDataKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureGeometryAabbsDataKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureGeometryAabbsDataKHR>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureGeometryAabbsDataKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureGeometryAabbsDataKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureGeometryAabbsDataKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryAabbsDataKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryAabbsDataKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryAabbsDataKHR),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryAabbsDataKHR),
            "::",
            stringify!(stride)
        )
    );
}
impl Default for VkAccelerationStructureGeometryAabbsDataKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryInstancesDataKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub arrayOfPointers: VkBool32,
    pub data: VkDeviceOrHostAddressConstKHR,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureGeometryInstancesDataKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureGeometryInstancesDataKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureGeometryInstancesDataKHR>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureGeometryInstancesDataKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureGeometryInstancesDataKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureGeometryInstancesDataKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryInstancesDataKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryInstancesDataKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arrayOfPointers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryInstancesDataKHR),
            "::",
            stringify!(arrayOfPointers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryInstancesDataKHR),
            "::",
            stringify!(data)
        )
    );
}
impl Default for VkAccelerationStructureGeometryInstancesDataKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkAccelerationStructureGeometryDataKHR {
    pub triangles: VkAccelerationStructureGeometryTrianglesDataKHR,
    pub aabbs: VkAccelerationStructureGeometryAabbsDataKHR,
    pub instances: VkAccelerationStructureGeometryInstancesDataKHR,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureGeometryDataKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureGeometryDataKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureGeometryDataKHR>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureGeometryDataKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureGeometryDataKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureGeometryDataKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).triangles) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryDataKHR),
            "::",
            stringify!(triangles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aabbs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryDataKHR),
            "::",
            stringify!(aabbs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instances) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryDataKHR),
            "::",
            stringify!(instances)
        )
    );
}
impl Default for VkAccelerationStructureGeometryDataKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub geometryType: VkGeometryTypeKHR,
    pub geometry: VkAccelerationStructureGeometryDataKHR,
    pub flags: VkGeometryFlagsKHR,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureGeometryKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureGeometryKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureGeometryKHR>(),
        96usize,
        concat!("Size of: ", stringify!(VkAccelerationStructureGeometryKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureGeometryKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureGeometryKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryType) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryKHR),
            "::",
            stringify!(geometryType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryKHR),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureGeometryKHR),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for VkAccelerationStructureGeometryKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureBuildGeometryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkAccelerationStructureTypeKHR,
    pub flags: VkBuildAccelerationStructureFlagsKHR,
    pub mode: VkBuildAccelerationStructureModeKHR,
    pub srcAccelerationStructure: VkAccelerationStructureKHR,
    pub dstAccelerationStructure: VkAccelerationStructureKHR,
    pub geometryCount: u32,
    pub pGeometries: *const VkAccelerationStructureGeometryKHR,
    pub ppGeometries: *const *const VkAccelerationStructureGeometryKHR,
    pub scratchData: VkDeviceOrHostAddressKHR,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureBuildGeometryInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureBuildGeometryInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureBuildGeometryInfoKHR>(),
        80usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureBuildGeometryInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srcAccelerationStructure) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(srcAccelerationStructure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dstAccelerationStructure) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(dstAccelerationStructure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(geometryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGeometries) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(pGeometries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ppGeometries) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(ppGeometries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scratchData) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildGeometryInfoKHR),
            "::",
            stringify!(scratchData)
        )
    );
}
impl Default for VkAccelerationStructureBuildGeometryInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAccelerationStructureCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub createFlags: VkAccelerationStructureCreateFlagsKHR,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub type_: VkAccelerationStructureTypeKHR,
    pub deviceAddress: VkDeviceAddress,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureCreateInfoKHR>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureCreateInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoKHR),
            "::",
            stringify!(createFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoKHR),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoKHR),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoKHR),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceAddress) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureCreateInfoKHR),
            "::",
            stringify!(deviceAddress)
        )
    );
}
impl Default for VkAccelerationStructureCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkWriteDescriptorSetAccelerationStructureKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructureCount: u32,
    pub pAccelerationStructures: *const VkAccelerationStructureKHR,
}
#[test]
fn bindgen_test_layout_VkWriteDescriptorSetAccelerationStructureKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkWriteDescriptorSetAccelerationStructureKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkWriteDescriptorSetAccelerationStructureKHR>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkWriteDescriptorSetAccelerationStructureKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accelerationStructureCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR),
            "::",
            stringify!(accelerationStructureCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pAccelerationStructures) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkWriteDescriptorSetAccelerationStructureKHR),
            "::",
            stringify!(pAccelerationStructures)
        )
    );
}
impl Default for VkWriteDescriptorSetAccelerationStructureKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub accelerationStructure: VkBool32,
    pub accelerationStructureCaptureReplay: VkBool32,
    pub accelerationStructureIndirectBuild: VkBool32,
    pub accelerationStructureHostCommands: VkBool32,
    pub descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceAccelerationStructureFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceAccelerationStructureFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceAccelerationStructureFeaturesKHR>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceAccelerationStructureFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceAccelerationStructureFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceAccelerationStructureFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructureFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructureFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accelerationStructure) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructureFeaturesKHR),
            "::",
            stringify!(accelerationStructure)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).accelerationStructureCaptureReplay) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructureFeaturesKHR),
            "::",
            stringify!(accelerationStructureCaptureReplay)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).accelerationStructureIndirectBuild) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructureFeaturesKHR),
            "::",
            stringify!(accelerationStructureIndirectBuild)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).accelerationStructureHostCommands) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructureFeaturesKHR),
            "::",
            stringify!(accelerationStructureHostCommands)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).descriptorBindingAccelerationStructureUpdateAfterBind)
                as usize
                - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructureFeaturesKHR),
            "::",
            stringify!(descriptorBindingAccelerationStructureUpdateAfterBind)
        )
    );
}
impl Default for VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxGeometryCount: u64,
    pub maxInstanceCount: u64,
    pub maxPrimitiveCount: u64,
    pub maxPerStageDescriptorAccelerationStructures: u32,
    pub maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32,
    pub maxDescriptorSetAccelerationStructures: u32,
    pub maxDescriptorSetUpdateAfterBindAccelerationStructures: u32,
    pub minAccelerationStructureScratchOffsetAlignment: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceAccelerationStructurePropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceAccelerationStructurePropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceAccelerationStructurePropertiesKHR>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceAccelerationStructurePropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxGeometryCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR),
            "::",
            stringify!(maxGeometryCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxInstanceCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR),
            "::",
            stringify!(maxInstanceCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPrimitiveCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR),
            "::",
            stringify!(maxPrimitiveCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorAccelerationStructures) as usize
                - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR),
            "::",
            stringify!(maxPerStageDescriptorAccelerationStructures)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPerStageDescriptorUpdateAfterBindAccelerationStructures)
                as usize
                - ptr as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR),
            "::",
            stringify!(maxPerStageDescriptorUpdateAfterBindAccelerationStructures)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetAccelerationStructures) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR),
            "::",
            stringify!(maxDescriptorSetAccelerationStructures)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxDescriptorSetUpdateAfterBindAccelerationStructures)
                as usize
                - ptr as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR),
            "::",
            stringify!(maxDescriptorSetUpdateAfterBindAccelerationStructures)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).minAccelerationStructureScratchOffsetAlignment) as usize
                - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceAccelerationStructurePropertiesKHR),
            "::",
            stringify!(minAccelerationStructureScratchOffsetAlignment)
        )
    );
}
impl Default for VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAccelerationStructureDeviceAddressInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructure: VkAccelerationStructureKHR,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureDeviceAddressInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureDeviceAddressInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureDeviceAddressInfoKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureDeviceAddressInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureDeviceAddressInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureDeviceAddressInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureDeviceAddressInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureDeviceAddressInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accelerationStructure) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureDeviceAddressInfoKHR),
            "::",
            stringify!(accelerationStructure)
        )
    );
}
impl Default for VkAccelerationStructureDeviceAddressInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAccelerationStructureVersionInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pVersionData: *const u8,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureVersionInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureVersionInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureVersionInfoKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureVersionInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureVersionInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureVersionInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureVersionInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureVersionInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pVersionData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureVersionInfoKHR),
            "::",
            stringify!(pVersionData)
        )
    );
}
impl Default for VkAccelerationStructureVersionInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyAccelerationStructureToMemoryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkAccelerationStructureKHR,
    pub dst: VkDeviceOrHostAddressKHR,
    pub mode: VkCopyAccelerationStructureModeKHR,
}
#[test]
fn bindgen_test_layout_VkCopyAccelerationStructureToMemoryInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyAccelerationStructureToMemoryInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyAccelerationStructureToMemoryInfoKHR>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkCopyAccelerationStructureToMemoryInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyAccelerationStructureToMemoryInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkCopyAccelerationStructureToMemoryInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyAccelerationStructureToMemoryInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyAccelerationStructureToMemoryInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyAccelerationStructureToMemoryInfoKHR),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyAccelerationStructureToMemoryInfoKHR),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyAccelerationStructureToMemoryInfoKHR),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for VkCopyAccelerationStructureToMemoryInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMemoryToAccelerationStructureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkDeviceOrHostAddressConstKHR,
    pub dst: VkAccelerationStructureKHR,
    pub mode: VkCopyAccelerationStructureModeKHR,
}
#[test]
fn bindgen_test_layout_VkCopyMemoryToAccelerationStructureInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyMemoryToAccelerationStructureInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyMemoryToAccelerationStructureInfoKHR>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkCopyMemoryToAccelerationStructureInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyMemoryToAccelerationStructureInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkCopyMemoryToAccelerationStructureInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToAccelerationStructureInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToAccelerationStructureInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToAccelerationStructureInfoKHR),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToAccelerationStructureInfoKHR),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyMemoryToAccelerationStructureInfoKHR),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for VkCopyMemoryToAccelerationStructureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkCopyAccelerationStructureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkAccelerationStructureKHR,
    pub dst: VkAccelerationStructureKHR,
    pub mode: VkCopyAccelerationStructureModeKHR,
}
#[test]
fn bindgen_test_layout_VkCopyAccelerationStructureInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkCopyAccelerationStructureInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkCopyAccelerationStructureInfoKHR>(),
        40usize,
        concat!("Size of: ", stringify!(VkCopyAccelerationStructureInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkCopyAccelerationStructureInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkCopyAccelerationStructureInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyAccelerationStructureInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyAccelerationStructureInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyAccelerationStructureInfoKHR),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyAccelerationStructureInfoKHR),
            "::",
            stringify!(dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkCopyAccelerationStructureInfoKHR),
            "::",
            stringify!(mode)
        )
    );
}
impl Default for VkCopyAccelerationStructureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkAccelerationStructureBuildSizesInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructureSize: VkDeviceSize,
    pub updateScratchSize: VkDeviceSize,
    pub buildScratchSize: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkAccelerationStructureBuildSizesInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkAccelerationStructureBuildSizesInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkAccelerationStructureBuildSizesInfoKHR>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkAccelerationStructureBuildSizesInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkAccelerationStructureBuildSizesInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkAccelerationStructureBuildSizesInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildSizesInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildSizesInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accelerationStructureSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildSizesInfoKHR),
            "::",
            stringify!(accelerationStructureSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).updateScratchSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildSizesInfoKHR),
            "::",
            stringify!(updateScratchSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buildScratchSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkAccelerationStructureBuildSizesInfoKHR),
            "::",
            stringify!(buildScratchSize)
        )
    );
}
impl Default for VkAccelerationStructureBuildSizesInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdBuildAccelerationStructuresKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        ppBuildRangeInfos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
    ),
>;
pub type PFN_vkCmdBuildAccelerationStructuresIndirectKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        pIndirectDeviceAddresses: *const VkDeviceAddress,
        pIndirectStrides: *const u32,
        ppMaxPrimitiveCounts: *const *const u32,
    ),
>;
pub type PFN_vkBuildAccelerationStructuresKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        ppBuildRangeInfos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCopyAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyAccelerationStructureInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCopyAccelerationStructureToMemoryKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyAccelerationStructureToMemoryInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCopyMemoryToAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMemoryToAccelerationStructureInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkWriteAccelerationStructuresPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: usize,
    ) -> VkResult,
>;
pub type PFN_vkCmdCopyAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyAccelerationStructureInfoKHR,
    ),
>;
pub type PFN_vkCmdCopyAccelerationStructureToMemoryKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyAccelerationStructureToMemoryInfoKHR,
    ),
>;
pub type PFN_vkCmdCopyMemoryToAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMemoryToAccelerationStructureInfoKHR,
    ),
>;
pub type PFN_vkGetAccelerationStructureDeviceAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureDeviceAddressInfoKHR,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pVersionInfo: *const VkAccelerationStructureVersionInfoKHR,
        pCompatibility: *mut VkAccelerationStructureCompatibilityKHR,
    ),
>;
pub type PFN_vkGetAccelerationStructureBuildSizesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buildType: VkAccelerationStructureBuildTypeKHR,
        pBuildInfo: *const VkAccelerationStructureBuildGeometryInfoKHR,
        pMaxPrimitiveCounts: *const u32,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    ),
>;
extern "system" {
    pub fn vkCreateAccelerationStructureKHR(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkDestroyAccelerationStructureKHR(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
extern "system" {
    pub fn vkCmdBuildAccelerationStructuresKHR(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        ppBuildRangeInfos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
    );
}
extern "system" {
    pub fn vkCmdBuildAccelerationStructuresIndirectKHR(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        pIndirectDeviceAddresses: *const VkDeviceAddress,
        pIndirectStrides: *const u32,
        ppMaxPrimitiveCounts: *const *const u32,
    );
}
extern "system" {
    pub fn vkBuildAccelerationStructuresKHR(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        ppBuildRangeInfos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCopyAccelerationStructureKHR(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyAccelerationStructureInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCopyAccelerationStructureToMemoryKHR(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyAccelerationStructureToMemoryInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCopyMemoryToAccelerationStructureKHR(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMemoryToAccelerationStructureInfoKHR,
    ) -> VkResult;
}
extern "system" {
    pub fn vkWriteAccelerationStructuresPropertiesKHR(
        device: VkDevice,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: usize,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdCopyAccelerationStructureKHR(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyAccelerationStructureInfoKHR,
    );
}
extern "system" {
    pub fn vkCmdCopyAccelerationStructureToMemoryKHR(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyAccelerationStructureToMemoryInfoKHR,
    );
}
extern "system" {
    pub fn vkCmdCopyMemoryToAccelerationStructureKHR(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMemoryToAccelerationStructureInfoKHR,
    );
}
extern "system" {
    pub fn vkGetAccelerationStructureDeviceAddressKHR(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureDeviceAddressInfoKHR,
    ) -> VkDeviceAddress;
}
extern "system" {
    pub fn vkCmdWriteAccelerationStructuresPropertiesKHR(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    );
}
extern "system" {
    pub fn vkGetDeviceAccelerationStructureCompatibilityKHR(
        device: VkDevice,
        pVersionInfo: *const VkAccelerationStructureVersionInfoKHR,
        pCompatibility: *mut VkAccelerationStructureCompatibilityKHR,
    );
}
extern "system" {
    pub fn vkGetAccelerationStructureBuildSizesKHR(
        device: VkDevice,
        buildType: VkAccelerationStructureBuildTypeKHR,
        pBuildInfo: *const VkAccelerationStructureBuildGeometryInfoKHR,
        pMaxPrimitiveCounts: *const u32,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkShaderGroupShaderKHR {
    VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0,
    VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1,
    VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2,
    VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3,
    VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 2147483647,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRayTracingShaderGroupCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkRayTracingShaderGroupTypeKHR,
    pub generalShader: u32,
    pub closestHitShader: u32,
    pub anyHitShader: u32,
    pub intersectionShader: u32,
    pub pShaderGroupCaptureReplayHandle: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_VkRayTracingShaderGroupCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkRayTracingShaderGroupCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRayTracingShaderGroupCreateInfoKHR>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkRayTracingShaderGroupCreateInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRayTracingShaderGroupCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRayTracingShaderGroupCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoKHR),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generalShader) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoKHR),
            "::",
            stringify!(generalShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closestHitShader) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoKHR),
            "::",
            stringify!(closestHitShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).anyHitShader) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoKHR),
            "::",
            stringify!(anyHitShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intersectionShader) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoKHR),
            "::",
            stringify!(intersectionShader)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pShaderGroupCaptureReplayHandle) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingShaderGroupCreateInfoKHR),
            "::",
            stringify!(pShaderGroupCaptureReplayHandle)
        )
    );
}
impl Default for VkRayTracingShaderGroupCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRayTracingPipelineInterfaceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxPipelineRayPayloadSize: u32,
    pub maxPipelineRayHitAttributeSize: u32,
}
#[test]
fn bindgen_test_layout_VkRayTracingPipelineInterfaceCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkRayTracingPipelineInterfaceCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRayTracingPipelineInterfaceCreateInfoKHR>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(VkRayTracingPipelineInterfaceCreateInfoKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkRayTracingPipelineInterfaceCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRayTracingPipelineInterfaceCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineInterfaceCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineInterfaceCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxPipelineRayPayloadSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineInterfaceCreateInfoKHR),
            "::",
            stringify!(maxPipelineRayPayloadSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPipelineRayHitAttributeSize) as usize - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineInterfaceCreateInfoKHR),
            "::",
            stringify!(maxPipelineRayHitAttributeSize)
        )
    );
}
impl Default for VkRayTracingPipelineInterfaceCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkRayTracingPipelineCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub groupCount: u32,
    pub pGroups: *const VkRayTracingShaderGroupCreateInfoKHR,
    pub maxPipelineRayRecursionDepth: u32,
    pub pLibraryInfo: *const VkPipelineLibraryCreateInfoKHR,
    pub pLibraryInterface: *const VkRayTracingPipelineInterfaceCreateInfoKHR,
    pub pDynamicState: *const VkPipelineDynamicStateCreateInfo,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[test]
fn bindgen_test_layout_VkRayTracingPipelineCreateInfoKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkRayTracingPipelineCreateInfoKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkRayTracingPipelineCreateInfoKHR>(),
        104usize,
        concat!("Size of: ", stringify!(VkRayTracingPipelineCreateInfoKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkRayTracingPipelineCreateInfoKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkRayTracingPipelineCreateInfoKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stageCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(stageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pStages) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(pStages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupCount) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(groupCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pGroups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(pGroups)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPipelineRayRecursionDepth) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(maxPipelineRayRecursionDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLibraryInfo) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(pLibraryInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLibraryInterface) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(pLibraryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pDynamicState) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(pDynamicState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layout) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(layout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basePipelineHandle) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(basePipelineHandle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basePipelineIndex) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkRayTracingPipelineCreateInfoKHR),
            "::",
            stringify!(basePipelineIndex)
        )
    );
}
impl Default for VkRayTracingPipelineCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingPipeline: VkBool32,
    pub rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32,
    pub rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32,
    pub rayTracingPipelineTraceRaysIndirect: VkBool32,
    pub rayTraversalPrimitiveCulling: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRayTracingPipelineFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRayTracingPipelineFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRayTracingPipelineFeaturesKHR>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRayTracingPipelineFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rayTracingPipeline) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR),
            "::",
            stringify!(rayTracingPipeline)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rayTracingPipelineShaderGroupHandleCaptureReplay) as usize
                - ptr as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR),
            "::",
            stringify!(rayTracingPipelineShaderGroupHandleCaptureReplay)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rayTracingPipelineShaderGroupHandleCaptureReplayMixed)
                as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR),
            "::",
            stringify!(rayTracingPipelineShaderGroupHandleCaptureReplayMixed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rayTracingPipelineTraceRaysIndirect) as usize - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR),
            "::",
            stringify!(rayTracingPipelineTraceRaysIndirect)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).rayTraversalPrimitiveCulling) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR),
            "::",
            stringify!(rayTraversalPrimitiveCulling)
        )
    );
}
impl Default for VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderGroupHandleSize: u32,
    pub maxRayRecursionDepth: u32,
    pub maxShaderGroupStride: u32,
    pub shaderGroupBaseAlignment: u32,
    pub shaderGroupHandleCaptureReplaySize: u32,
    pub maxRayDispatchInvocationCount: u32,
    pub shaderGroupHandleAlignment: u32,
    pub maxRayHitAttributeSize: u32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRayTracingPipelinePropertiesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRayTracingPipelinePropertiesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRayTracingPipelinePropertiesKHR>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRayTracingPipelinePropertiesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderGroupHandleSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR),
            "::",
            stringify!(shaderGroupHandleSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRayRecursionDepth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR),
            "::",
            stringify!(maxRayRecursionDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxShaderGroupStride) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR),
            "::",
            stringify!(maxShaderGroupStride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderGroupBaseAlignment) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR),
            "::",
            stringify!(shaderGroupBaseAlignment)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).shaderGroupHandleCaptureReplaySize) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR),
            "::",
            stringify!(shaderGroupHandleCaptureReplaySize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxRayDispatchInvocationCount) as usize - ptr as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR),
            "::",
            stringify!(maxRayDispatchInvocationCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shaderGroupHandleAlignment) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR),
            "::",
            stringify!(shaderGroupHandleAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxRayHitAttributeSize) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR),
            "::",
            stringify!(maxRayHitAttributeSize)
        )
    );
}
impl Default for VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkStridedDeviceAddressRegionKHR {
    pub deviceAddress: VkDeviceAddress,
    pub stride: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[test]
fn bindgen_test_layout_VkStridedDeviceAddressRegionKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkStridedDeviceAddressRegionKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkStridedDeviceAddressRegionKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkStridedDeviceAddressRegionKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkStridedDeviceAddressRegionKHR>(),
        8usize,
        concat!("Alignment of ", stringify!(VkStridedDeviceAddressRegionKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceAddress) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStridedDeviceAddressRegionKHR),
            "::",
            stringify!(deviceAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStridedDeviceAddressRegionKHR),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkStridedDeviceAddressRegionKHR),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkTraceRaysIndirectCommandKHR {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[test]
fn bindgen_test_layout_VkTraceRaysIndirectCommandKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkTraceRaysIndirectCommandKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkTraceRaysIndirectCommandKHR>(),
        12usize,
        concat!("Size of: ", stringify!(VkTraceRaysIndirectCommandKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkTraceRaysIndirectCommandKHR>(),
        4usize,
        concat!("Alignment of ", stringify!(VkTraceRaysIndirectCommandKHR))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommandKHR),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommandKHR),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkTraceRaysIndirectCommandKHR),
            "::",
            stringify!(depth)
        )
    );
}
pub type PFN_vkCmdTraceRaysKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRaygenShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pMissShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pHitShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pCallableShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        width: u32,
        height: u32,
        depth: u32,
    ),
>;
pub type PFN_vkCreateRayTracingPipelinesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdTraceRaysIndirectKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRaygenShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pMissShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pHitShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pCallableShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        indirectDeviceAddress: VkDeviceAddress,
    ),
>;
pub type PFN_vkGetRayTracingShaderGroupStackSizeKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        group: u32,
        groupShader: VkShaderGroupShaderKHR,
    ) -> VkDeviceSize,
>;
pub type PFN_vkCmdSetRayTracingPipelineStackSizeKHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pipelineStackSize: u32),
>;
extern "system" {
    pub fn vkCmdTraceRaysKHR(
        commandBuffer: VkCommandBuffer,
        pRaygenShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pMissShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pHitShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pCallableShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        width: u32,
        height: u32,
        depth: u32,
    );
}
extern "system" {
    pub fn vkCreateRayTracingPipelinesKHR(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
extern "system" {
    pub fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
extern "system" {
    pub fn vkCmdTraceRaysIndirectKHR(
        commandBuffer: VkCommandBuffer,
        pRaygenShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pMissShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pHitShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pCallableShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        indirectDeviceAddress: VkDeviceAddress,
    );
}
extern "system" {
    pub fn vkGetRayTracingShaderGroupStackSizeKHR(
        device: VkDevice,
        pipeline: VkPipeline,
        group: u32,
        groupShader: VkShaderGroupShaderKHR,
    ) -> VkDeviceSize;
}
extern "system" {
    pub fn vkCmdSetRayTracingPipelineStackSizeKHR(
        commandBuffer: VkCommandBuffer,
        pipelineStackSize: u32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceRayQueryFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayQuery: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceRayQueryFeaturesKHR() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceRayQueryFeaturesKHR> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceRayQueryFeaturesKHR>(),
        24usize,
        concat!("Size of: ", stringify!(VkPhysicalDeviceRayQueryFeaturesKHR))
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceRayQueryFeaturesKHR>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceRayQueryFeaturesKHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayQueryFeaturesKHR),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayQueryFeaturesKHR),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rayQuery) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceRayQueryFeaturesKHR),
            "::",
            stringify!(rayQuery)
        )
    );
}
impl Default for VkPhysicalDeviceRayQueryFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMeshShaderFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub taskShader: VkBool32,
    pub meshShader: VkBool32,
    pub multiviewMeshShader: VkBool32,
    pub primitiveFragmentShadingRateMeshShader: VkBool32,
    pub meshShaderQueries: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMeshShaderFeaturesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMeshShaderFeaturesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMeshShaderFeaturesEXT>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMeshShaderFeaturesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).taskShader) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesEXT),
            "::",
            stringify!(taskShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meshShader) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesEXT),
            "::",
            stringify!(meshShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multiviewMeshShader) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesEXT),
            "::",
            stringify!(multiviewMeshShader)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).primitiveFragmentShadingRateMeshShader) as usize
                - ptr as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesEXT),
            "::",
            stringify!(primitiveFragmentShadingRateMeshShader)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meshShaderQueries) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderFeaturesEXT),
            "::",
            stringify!(meshShaderQueries)
        )
    );
}
impl Default for VkPhysicalDeviceMeshShaderFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkPhysicalDeviceMeshShaderPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxTaskWorkGroupTotalCount: u32,
    pub maxTaskWorkGroupCount: [u32; 3usize],
    pub maxTaskWorkGroupInvocations: u32,
    pub maxTaskWorkGroupSize: [u32; 3usize],
    pub maxTaskPayloadSize: u32,
    pub maxTaskSharedMemorySize: u32,
    pub maxTaskPayloadAndSharedMemorySize: u32,
    pub maxMeshWorkGroupTotalCount: u32,
    pub maxMeshWorkGroupCount: [u32; 3usize],
    pub maxMeshWorkGroupInvocations: u32,
    pub maxMeshWorkGroupSize: [u32; 3usize],
    pub maxMeshSharedMemorySize: u32,
    pub maxMeshPayloadAndSharedMemorySize: u32,
    pub maxMeshOutputMemorySize: u32,
    pub maxMeshPayloadAndOutputMemorySize: u32,
    pub maxMeshOutputComponents: u32,
    pub maxMeshOutputVertices: u32,
    pub maxMeshOutputPrimitives: u32,
    pub maxMeshOutputLayers: u32,
    pub maxMeshMultiviewViewCount: u32,
    pub meshOutputPerVertexGranularity: u32,
    pub meshOutputPerPrimitiveGranularity: u32,
    pub maxPreferredTaskWorkGroupInvocations: u32,
    pub maxPreferredMeshWorkGroupInvocations: u32,
    pub prefersLocalInvocationVertexOutput: VkBool32,
    pub prefersLocalInvocationPrimitiveOutput: VkBool32,
    pub prefersCompactVertexOutput: VkBool32,
    pub prefersCompactPrimitiveOutput: VkBool32,
}
#[test]
fn bindgen_test_layout_VkPhysicalDeviceMeshShaderPropertiesEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkPhysicalDeviceMeshShaderPropertiesEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkPhysicalDeviceMeshShaderPropertiesEXT>(),
        160usize,
        concat!(
            "Size of: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkPhysicalDeviceMeshShaderPropertiesEXT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTaskWorkGroupTotalCount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxTaskWorkGroupTotalCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTaskWorkGroupCount) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxTaskWorkGroupCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTaskWorkGroupInvocations) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxTaskWorkGroupInvocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTaskWorkGroupSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxTaskWorkGroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTaskPayloadSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxTaskPayloadSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxTaskSharedMemorySize) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxTaskSharedMemorySize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxTaskPayloadAndSharedMemorySize) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxTaskPayloadAndSharedMemorySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshWorkGroupTotalCount) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshWorkGroupTotalCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshWorkGroupCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshWorkGroupCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshWorkGroupInvocations) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshWorkGroupInvocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshWorkGroupSize) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshWorkGroupSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshSharedMemorySize) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshSharedMemorySize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxMeshPayloadAndSharedMemorySize) as usize - ptr as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshPayloadAndSharedMemorySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshOutputMemorySize) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshOutputMemorySize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxMeshPayloadAndOutputMemorySize) as usize - ptr as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshPayloadAndOutputMemorySize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshOutputComponents) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshOutputComponents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshOutputVertices) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshOutputVertices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshOutputPrimitives) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshOutputPrimitives)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshOutputLayers) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshOutputLayers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxMeshMultiviewViewCount) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxMeshMultiviewViewCount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).meshOutputPerVertexGranularity) as usize - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(meshOutputPerVertexGranularity)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).meshOutputPerPrimitiveGranularity) as usize - ptr as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(meshOutputPerPrimitiveGranularity)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPreferredTaskWorkGroupInvocations) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxPreferredTaskWorkGroupInvocations)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).maxPreferredMeshWorkGroupInvocations) as usize
                - ptr as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(maxPreferredMeshWorkGroupInvocations)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prefersLocalInvocationVertexOutput) as usize - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(prefersLocalInvocationVertexOutput)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prefersLocalInvocationPrimitiveOutput) as usize
                - ptr as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(prefersLocalInvocationPrimitiveOutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefersCompactVertexOutput) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(prefersCompactVertexOutput)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).prefersCompactPrimitiveOutput) as usize - ptr as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(VkPhysicalDeviceMeshShaderPropertiesEXT),
            "::",
            stringify!(prefersCompactPrimitiveOutput)
        )
    );
}
impl Default for VkPhysicalDeviceMeshShaderPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkDrawMeshTasksIndirectCommandEXT {
    pub groupCountX: u32,
    pub groupCountY: u32,
    pub groupCountZ: u32,
}
#[test]
fn bindgen_test_layout_VkDrawMeshTasksIndirectCommandEXT() {
    const UNINIT: ::std::mem::MaybeUninit<VkDrawMeshTasksIndirectCommandEXT> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkDrawMeshTasksIndirectCommandEXT>(),
        12usize,
        concat!("Size of: ", stringify!(VkDrawMeshTasksIndirectCommandEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<VkDrawMeshTasksIndirectCommandEXT>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VkDrawMeshTasksIndirectCommandEXT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupCountX) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawMeshTasksIndirectCommandEXT),
            "::",
            stringify!(groupCountX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupCountY) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawMeshTasksIndirectCommandEXT),
            "::",
            stringify!(groupCountY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groupCountZ) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkDrawMeshTasksIndirectCommandEXT),
            "::",
            stringify!(groupCountZ)
        )
    );
}
pub type PFN_vkCmdDrawMeshTasksEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
extern "system" {
    pub fn vkCmdDrawMeshTasksEXT(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawMeshTasksIndirectEXT(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
extern "system" {
    pub fn vkCmdDrawMeshTasksIndirectCountEXT(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
pub type PFN_GetPhysicalDeviceProcAddr = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction,
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkNegotiateLayerStructType {
    LAYER_NEGOTIATE_UNINTIALIZED = 0,
    LAYER_NEGOTIATE_INTERFACE_STRUCT = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkNegotiateLayerInterface {
    pub sType: VkNegotiateLayerStructType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub loaderLayerInterfaceVersion: u32,
    pub pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddr,
    pub pfnGetDeviceProcAddr: PFN_vkGetDeviceProcAddr,
    pub pfnGetPhysicalDeviceProcAddr: PFN_GetPhysicalDeviceProcAddr,
}
#[test]
fn bindgen_test_layout_VkNegotiateLayerInterface() {
    const UNINIT: ::std::mem::MaybeUninit<VkNegotiateLayerInterface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkNegotiateLayerInterface>(),
        48usize,
        concat!("Size of: ", stringify!(VkNegotiateLayerInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<VkNegotiateLayerInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(VkNegotiateLayerInterface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loaderLayerInterfaceVersion) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(loaderLayerInterfaceVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetInstanceProcAddr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(pfnGetInstanceProcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnGetDeviceProcAddr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(pfnGetDeviceProcAddr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnGetPhysicalDeviceProcAddr) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(VkNegotiateLayerInterface),
            "::",
            stringify!(pfnGetPhysicalDeviceProcAddr)
        )
    );
}
impl Default for VkNegotiateLayerInterface {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkNegotiateLoaderLayerInterfaceVersion = ::std::option::Option<
    unsafe extern "system" fn(pVersionStruct: *mut VkNegotiateLayerInterface) -> VkResult,
>;
pub type PFN_PhysDevExt =
    ::std::option::Option<unsafe extern "system" fn(phys_device: VkPhysicalDevice) -> VkResult>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkLayerFunction_ {
    VK_LAYER_LINK_INFO = 0,
    VK_LOADER_DATA_CALLBACK = 1,
    VK_LOADER_LAYER_CREATE_DEVICE_CALLBACK = 2,
    VK_LOADER_FEATURES = 3,
}
pub use self::VkLayerFunction_ as VkLayerFunction;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkLayerInstanceLink_ {
    pub pNext: *mut VkLayerInstanceLink_,
    pub pfnNextGetInstanceProcAddr: PFN_vkGetInstanceProcAddr,
    pub pfnNextGetPhysicalDeviceProcAddr: PFN_GetPhysicalDeviceProcAddr,
}
#[test]
fn bindgen_test_layout_VkLayerInstanceLink_() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerInstanceLink_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerInstanceLink_>(),
        24usize,
        concat!("Size of: ", stringify!(VkLayerInstanceLink_))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerInstanceLink_>(),
        8usize,
        concat!("Alignment of ", stringify!(VkLayerInstanceLink_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceLink_),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnNextGetInstanceProcAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceLink_),
            "::",
            stringify!(pfnNextGetInstanceProcAddr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).pfnNextGetPhysicalDeviceProcAddr) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceLink_),
            "::",
            stringify!(pfnNextGetPhysicalDeviceProcAddr)
        )
    );
}
impl Default for VkLayerInstanceLink_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkLayerInstanceLink = VkLayerInstanceLink_;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkLayerDeviceInfo_ {
    pub device_info: *mut ::std::os::raw::c_void,
    pub pfnNextGetInstanceProcAddr: PFN_vkGetInstanceProcAddr,
}
#[test]
fn bindgen_test_layout_VkLayerDeviceInfo_() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerDeviceInfo_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerDeviceInfo_>(),
        16usize,
        concat!("Size of: ", stringify!(VkLayerDeviceInfo_))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerDeviceInfo_>(),
        8usize,
        concat!("Alignment of ", stringify!(VkLayerDeviceInfo_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceInfo_),
            "::",
            stringify!(device_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnNextGetInstanceProcAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceInfo_),
            "::",
            stringify!(pfnNextGetInstanceProcAddr)
        )
    );
}
impl Default for VkLayerDeviceInfo_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkLayerDeviceInfo = VkLayerDeviceInfo_;
pub type PFN_vkSetInstanceLoaderData = ::std::option::Option<
    unsafe extern "system" fn(instance: VkInstance, object: *mut ::std::os::raw::c_void) -> VkResult,
>;
pub type PFN_vkSetDeviceLoaderData = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, object: *mut ::std::os::raw::c_void) -> VkResult,
>;
pub type PFN_vkLayerCreateDevice = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        physicalDevice: VkPhysicalDevice,
        pCreateInfo: *const VkDeviceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDevice: *mut VkDevice,
        layerGIPA: PFN_vkGetInstanceProcAddr,
        nextGDPA: *mut PFN_vkGetDeviceProcAddr,
    ) -> VkResult,
>;
pub type PFN_vkLayerDestroyDevice = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkDevice,
        pAllocator: *const VkAllocationCallbacks,
        destroyFunction: PFN_vkDestroyDevice,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkLoaderFeastureFlagBits {
    VK_LOADER_FEATURE_PHYSICAL_DEVICE_SORTING = 1,
}
pub use self::VkLoaderFeastureFlagBits as VkLoaderFlagBits;
pub type VkLoaderFeatureFlags = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLayerInstanceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub function: VkLayerFunction,
    pub u: VkLayerInstanceCreateInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkLayerInstanceCreateInfo__bindgen_ty_1 {
    pub pLayerInfo: *mut VkLayerInstanceLink,
    pub pfnSetInstanceLoaderData: PFN_vkSetInstanceLoaderData,
    pub layerDevice: VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1,
    pub loaderFeatures: VkLoaderFeatureFlags,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1 {
    pub pfnLayerCreateDevice: PFN_vkLayerCreateDevice,
    pub pfnLayerDestroyDevice: PFN_vkLayerDestroyDevice,
}
#[test]
fn bindgen_test_layout_VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnLayerCreateDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pfnLayerCreateDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnLayerDestroyDevice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pfnLayerDestroyDevice)
        )
    );
}
#[test]
fn bindgen_test_layout_VkLayerInstanceCreateInfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerInstanceCreateInfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerInstanceCreateInfo__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerInstanceCreateInfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLayerInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(pLayerInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSetInstanceLoaderData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(pfnSetInstanceLoaderData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerDevice) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(layerDevice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loaderFeatures) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(loaderFeatures)
        )
    );
}
impl Default for VkLayerInstanceCreateInfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_VkLayerInstanceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerInstanceCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerInstanceCreateInfo>(),
        40usize,
        concat!("Size of: ", stringify!(VkLayerInstanceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerInstanceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkLayerInstanceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerInstanceCreateInfo),
            "::",
            stringify!(u)
        )
    );
}
impl Default for VkLayerInstanceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkLayerDeviceLink_ {
    pub pNext: *mut VkLayerDeviceLink_,
    pub pfnNextGetInstanceProcAddr: PFN_vkGetInstanceProcAddr,
    pub pfnNextGetDeviceProcAddr: PFN_vkGetDeviceProcAddr,
}
#[test]
fn bindgen_test_layout_VkLayerDeviceLink_() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerDeviceLink_> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerDeviceLink_>(),
        24usize,
        concat!("Size of: ", stringify!(VkLayerDeviceLink_))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerDeviceLink_>(),
        8usize,
        concat!("Alignment of ", stringify!(VkLayerDeviceLink_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceLink_),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnNextGetInstanceProcAddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceLink_),
            "::",
            stringify!(pfnNextGetInstanceProcAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnNextGetDeviceProcAddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceLink_),
            "::",
            stringify!(pfnNextGetDeviceProcAddr)
        )
    );
}
impl Default for VkLayerDeviceLink_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkLayerDeviceLink = VkLayerDeviceLink_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLayerDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub function: VkLayerFunction,
    pub u: VkLayerDeviceCreateInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkLayerDeviceCreateInfo__bindgen_ty_1 {
    pub pLayerInfo: *mut VkLayerDeviceLink,
    pub pfnSetDeviceLoaderData: PFN_vkSetDeviceLoaderData,
}
#[test]
fn bindgen_test_layout_VkLayerDeviceCreateInfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerDeviceCreateInfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerDeviceCreateInfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(VkLayerDeviceCreateInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerDeviceCreateInfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkLayerDeviceCreateInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pLayerInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(pLayerInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnSetDeviceLoaderData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo__bindgen_ty_1),
            "::",
            stringify!(pfnSetDeviceLoaderData)
        )
    );
}
impl Default for VkLayerDeviceCreateInfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_VkLayerDeviceCreateInfo() {
    const UNINIT: ::std::mem::MaybeUninit<VkLayerDeviceCreateInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkLayerDeviceCreateInfo>(),
        32usize,
        concat!("Size of: ", stringify!(VkLayerDeviceCreateInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<VkLayerDeviceCreateInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(VkLayerDeviceCreateInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sType) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo),
            "::",
            stringify!(sType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNext) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo),
            "::",
            stringify!(pNext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).function) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkLayerDeviceCreateInfo),
            "::",
            stringify!(u)
        )
    );
}
impl Default for VkLayerDeviceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "system" {
    pub fn vkNegotiateLoaderLayerInterfaceVersion(
        pVersionStruct: *mut VkNegotiateLayerInterface,
    ) -> VkResult;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub enum VkChainType {
    VK_CHAIN_TYPE_UNKNOWN = 0,
    VK_CHAIN_TYPE_ENUMERATE_INSTANCE_EXTENSION_PROPERTIES = 1,
    VK_CHAIN_TYPE_ENUMERATE_INSTANCE_LAYER_PROPERTIES = 2,
    VK_CHAIN_TYPE_ENUMERATE_INSTANCE_VERSION = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkChainHeader {
    pub type_: VkChainType,
    pub version: u32,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_VkChainHeader() {
    const UNINIT: ::std::mem::MaybeUninit<VkChainHeader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkChainHeader>(),
        12usize,
        concat!("Size of: ", stringify!(VkChainHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<VkChainHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(VkChainHeader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkChainHeader),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VkChainHeader),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VkChainHeader),
            "::",
            stringify!(size)
        )
    );
}
impl Default for VkChainHeader {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkEnumerateInstanceExtensionPropertiesChain {
    pub header: VkChainHeader,
    pub pfnNextLayer: ::std::option::Option<
        unsafe extern "system" fn(
            arg1: *const VkEnumerateInstanceExtensionPropertiesChain,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut u32,
            arg4: *mut VkExtensionProperties,
        ) -> VkResult,
    >,
    pub pNextLink: *const VkEnumerateInstanceExtensionPropertiesChain,
}
#[test]
fn bindgen_test_layout_VkEnumerateInstanceExtensionPropertiesChain() {
    const UNINIT: ::std::mem::MaybeUninit<VkEnumerateInstanceExtensionPropertiesChain> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkEnumerateInstanceExtensionPropertiesChain>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkEnumerateInstanceExtensionPropertiesChain)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkEnumerateInstanceExtensionPropertiesChain>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkEnumerateInstanceExtensionPropertiesChain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEnumerateInstanceExtensionPropertiesChain),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnNextLayer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEnumerateInstanceExtensionPropertiesChain),
            "::",
            stringify!(pfnNextLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNextLink) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEnumerateInstanceExtensionPropertiesChain),
            "::",
            stringify!(pNextLink)
        )
    );
}
impl Default for VkEnumerateInstanceExtensionPropertiesChain {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkEnumerateInstanceLayerPropertiesChain {
    pub header: VkChainHeader,
    pub pfnNextLayer: ::std::option::Option<
        unsafe extern "system" fn(
            arg1: *const VkEnumerateInstanceLayerPropertiesChain,
            arg2: *mut u32,
            arg3: *mut VkLayerProperties,
        ) -> VkResult,
    >,
    pub pNextLink: *const VkEnumerateInstanceLayerPropertiesChain,
}
#[test]
fn bindgen_test_layout_VkEnumerateInstanceLayerPropertiesChain() {
    const UNINIT: ::std::mem::MaybeUninit<VkEnumerateInstanceLayerPropertiesChain> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkEnumerateInstanceLayerPropertiesChain>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(VkEnumerateInstanceLayerPropertiesChain)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VkEnumerateInstanceLayerPropertiesChain>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VkEnumerateInstanceLayerPropertiesChain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEnumerateInstanceLayerPropertiesChain),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnNextLayer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEnumerateInstanceLayerPropertiesChain),
            "::",
            stringify!(pfnNextLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNextLink) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEnumerateInstanceLayerPropertiesChain),
            "::",
            stringify!(pNextLink)
        )
    );
}
impl Default for VkEnumerateInstanceLayerPropertiesChain {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]
pub struct VkEnumerateInstanceVersionChain {
    pub header: VkChainHeader,
    pub pfnNextLayer: ::std::option::Option<
        unsafe extern "system" fn(
            arg1: *const VkEnumerateInstanceVersionChain,
            arg2: *mut u32,
        ) -> VkResult,
    >,
    pub pNextLink: *const VkEnumerateInstanceVersionChain,
}
#[test]
fn bindgen_test_layout_VkEnumerateInstanceVersionChain() {
    const UNINIT: ::std::mem::MaybeUninit<VkEnumerateInstanceVersionChain> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VkEnumerateInstanceVersionChain>(),
        32usize,
        concat!("Size of: ", stringify!(VkEnumerateInstanceVersionChain))
    );
    assert_eq!(
        ::std::mem::align_of::<VkEnumerateInstanceVersionChain>(),
        8usize,
        concat!("Alignment of ", stringify!(VkEnumerateInstanceVersionChain))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEnumerateInstanceVersionChain),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pfnNextLayer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEnumerateInstanceVersionChain),
            "::",
            stringify!(pfnNextLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pNextLink) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(VkEnumerateInstanceVersionChain),
            "::",
            stringify!(pNextLink)
        )
    );
}
impl Default for VkEnumerateInstanceVersionChain {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
